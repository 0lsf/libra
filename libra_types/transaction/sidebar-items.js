initSidebarItems({"constant":[["MAX_TRANSACTION_SIZE_IN_BYTES",""],["PRE_GENESIS_VERSION",""],["SCRIPT_HASH_LENGTH",""]],"enum":[["Transaction","`Transaction` will be the transaction type used internally in the libra node to represent the transaction to be processed and persisted."],["TransactionArgument",""],["TransactionPayload",""],["TransactionStatus","The status of executing a transaction. The VM decides whether or not we should `Keep` the transaction output or `Discard` it based upon the execution of the transaction. We wrap these decisions around a `VMStatus` that provides more detail on the final execution state of the VM."]],"fn":[["parse_transaction_argument",""]],"mod":[["authenticator",""],["helpers",""]],"struct":[["ChangeSet",""],["Module",""],["RawTransaction","RawTransaction is the portion of a transaction that a client signs"],["RawTransactionHasher",""],["Script",""],["SignatureCheckedTransaction","A transaction for which the signature has been verified. Created by [`SignedTransaction::check_signature`] and [`RawTransaction::sign`]."],["SignedTransaction","A transaction that has been signed."],["TransactionHasher",""],["TransactionInfo","`TransactionInfo` is the object we store in the transaction accumulator. It consists of the transaction as well as the execution result of this transaction."],["TransactionInfoHasher",""],["TransactionListWithProof","The list may have three states: 1. The list is empty. Both proofs must be `None`. 2. The list has only 1 transaction/transaction_info. Then `proof_of_first_transaction` must exist and `proof_of_last_transaction` must be `None`. 3. The list has 2+ transactions/transaction_infos. The both proofs must exist."],["TransactionOutput","The output of executing a transaction."],["TransactionToCommit",""],["TransactionWithProof",""],["VMValidatorResult","The result of running the transaction through the VM validator."]],"type":[["Version",""]]});