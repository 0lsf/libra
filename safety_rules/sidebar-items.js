initSidebarItems({"enum":[["Error","Different reasons for proposal rejection"]],"mod":[["process_client_wrapper",""],["test_utils",""]],"static":[["COUNTERS",""]],"struct":[["ConsensusState","Public representation of the internal state of SafetyRules for monitoring / debugging purposes. This does not include sensitive data like private keys. @TODO add hash of ledger info (waypoint)"],["PersistentSafetyStorage","SafetyRules needs an abstract storage interface to act as a common utility for storing persistent data to local disk, cloud, secrets managers, or even memory (for tests) Any set function is expected to sync to the remote system before returning. @TODO add access to private key from persistent store @TODO add retrieval of private key based upon public key to persistent store"],["Process",""],["SafetyRules","SafetyRules is responsible for the safety of the consensus: 1) voting rules 2) commit rules 3) ownership of the consensus private key @TODO add a benchmark to evaluate SafetyRules @TODO consider a cache of verified QCs to cut down on verification costs @TODO bootstrap with a hash of a ledger info (waypoint) that includes a validator set @TODO update storage with hash of ledger info (waypoint) during epoch changes (includes a new validator set)"],["SafetyRulesManager",""]],"trait":[["TSafetyRules","Interface for SafetyRules"]]});