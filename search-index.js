var searchIndex = JSON.parse('{\
"accumulator":{"doc":"This module provides algorithms for accessing and updating…","i":[[3,"MerkleAccumulator","accumulator","In this live Merkle Accumulator algorithms.",null,null],[8,"HashReader","","Defines the interface between `MerkleAccumulator` and…",null,null],[10,"get","","Return `HashValue` carried by the node at `Position`.",0,[[["position",3]],[["result",6],["hashvalue",3]]]],[11,"append","","Given an existing Merkle Accumulator (represented by…",1,[[["leafcount",6]],["result",6]]],[11,"get_proof","","Get proof of inclusion of the leaf at `leaf_index` in this…",1,[[["leafcount",6]],[["result",6],["accumulatorproof",3]]]],[11,"get_consistency_proof","","Gets a proof that shows the full accumulator is consistent…",1,[[["leafcount",6]],[["result",6],["accumulatorconsistencyproof",3]]]],[11,"get_range_proof","","Gets a proof that shows a range of leaves are part of the…",1,[[["option",4],["leafcount",6]],[["result",6],["accumulatorrangeproof",3]]]],[11,"get_frozen_subtree_hashes","","From left to right, gets frozen subtree root hashes of the…",1,[[["leafcount",6]],[["result",6],["vec",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]]],"p":[[8,"HashReader"],[3,"MerkleAccumulator"]]},\
"backup_cli":{"doc":"","i":[[0,"backup","backup_cli","",null,null],[3,"BackupServiceClientOpt","backup_cli::backup","",null,null],[12,"port","","",0,null],[3,"BackupServiceClient","","",null,null],[3,"GlobalBackupOpt","","",null,null],[12,"max_chunk_size","","",1,null],[3,"StateSnapshotBackupOpt","","",null,null],[12,"version","","",2,null],[3,"StateSnapshotBackupController","","",null,null],[11,"new_with_opt","","",3,[[["backupserviceclientopt",3]]]],[11,"new","","",3,[[]]],[11,"get_latest_state_root","","",3,[[]]],[11,"new","","",4,[[["statesnapshotbackupopt",3],["globalbackupopt",3],["arc",3],["backupserviceclient",3],["backupstorage",8],["arc",3]]]],[11,"run","","",4,[[]]],[0,"manifest","backup_cli","",null,null],[0,"state_snapshot","backup_cli::manifest","",null,null],[3,"StateSnapshotChunk","backup_cli::manifest::state_snapshot","",null,null],[12,"first_idx","","index of the first account in this chunk over all accounts.",5,null],[12,"last_idx","","index of the last account in this chunk over all accounts.",5,null],[12,"first_key","","key of the first account in this chunk.",5,null],[12,"last_key","","key of the last account in this chunk.",5,null],[12,"blobs","","Repeated `len(record) + record` where `record` is LCS…",5,null],[12,"proof","","LCS serialized `SparseMerkleRangeProof` that proves this…",5,null],[3,"StateSnapshotBackup","","",null,null],[12,"version","","Version at which this state snapshot is taken.",6,null],[12,"root_hash","","Hash of the state tree root.",6,null],[12,"chunks","","All account blobs in chunks.",6,null],[12,"proof","","",6,null],[0,"restore","backup_cli","",null,null],[3,"GlobalRestoreOpt","backup_cli::restore","",null,null],[12,"db_dir","","",7,null],[3,"StateSnapshotRestoreOpt","","",null,null],[12,"manifest_handle","","",8,null],[12,"version","","",8,null],[3,"StateSnapshotRestoreController","","",null,null],[11,"new","","",9,[[["statesnapshotrestoreopt",3],["arc",3],["arc",3],["backupstorage",8],["libradb",3]]]],[11,"run","","",9,[[]]],[0,"storage","backup_cli","",null,null],[0,"local_fs","backup_cli::storage","",null,null],[3,"LocalFsOpt","backup_cli::storage::local_fs","",null,null],[12,"dir","","",10,null],[3,"LocalFs","","A storage backend that stores everything in a local…",null,null],[11,"new","","",11,[[["pathbuf",3]]]],[11,"new_with_opt","","",11,[[["localfsopt",3]]]],[6,"BackupHandle","backup_cli::storage","",null,null],[6,"BackupHandleRef","","",null,null],[6,"FileHandle","","",null,null],[6,"FileHandleRef","","",null,null],[8,"BackupStorage","","",null,null],[10,"create_backup","","Hint that a bunch of files are gonna be created related to…",12,[[],[["pin",3],["box",3]]]],[10,"create_for_write","","Ask to create a file for write, `backup_handle` was…",12,[[["backuphandleref",6]],[["pin",3],["box",3]]]],[10,"open_for_read","","Open file for reading.",12,[[["filehandleref",6]],[["box",3],["pin",3]]]],[11,"from","backup_cli::backup","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","backup_cli::manifest::state_snapshot","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","backup_cli::restore","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","backup_cli::storage::local_fs","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"create_backup","","",11,[[],[["pin",3],["box",3]]]],[11,"create_for_write","","",11,[[["backuphandleref",6]],[["pin",3],["box",3]]]],[11,"open_for_read","","N.B: `LocalFs` uses absolute paths as file handles, so…",11,[[["filehandleref",6]],[["box",3],["pin",3]]]],[11,"serialize","backup_cli::manifest::state_snapshot","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"clap","backup_cli::backup","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"clap","backup_cli::restore","",7,[[],["app",3]]],[11,"from_clap","","",7,[[["argmatches",3]]]],[11,"clap","","",8,[[],["app",3]]],[11,"from_clap","","",8,[[["argmatches",3]]]],[11,"clap","backup_cli::storage::local_fs","",10,[[],["app",3]]],[11,"from_clap","","",10,[[["argmatches",3]]]],[11,"augment_clap","backup_cli::backup","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"is_subcommand","","",1,[[]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"is_subcommand","","",2,[[]]],[11,"augment_clap","backup_cli::restore","",7,[[["app",3]],["app",3]]],[11,"is_subcommand","","",7,[[]]],[11,"augment_clap","","",8,[[["app",3]],["app",3]]],[11,"is_subcommand","","",8,[[]]],[11,"augment_clap","backup_cli::storage::local_fs","",10,[[["app",3]],["app",3]]],[11,"is_subcommand","","",10,[[]]]],"p":[[3,"BackupServiceClientOpt"],[3,"GlobalBackupOpt"],[3,"StateSnapshotBackupOpt"],[3,"BackupServiceClient"],[3,"StateSnapshotBackupController"],[3,"StateSnapshotChunk"],[3,"StateSnapshotBackup"],[3,"GlobalRestoreOpt"],[3,"StateSnapshotRestoreOpt"],[3,"StateSnapshotRestoreController"],[3,"LocalFsOpt"],[3,"LocalFs"],[8,"BackupStorage"]]},\
"backup_service":{"doc":"","i":[[5,"start_backup_service","backup_service","",null,[[["arc",3],["libradb",3]],["runtime",3]]]],"p":[]},\
"borrow_graph":{"doc":"","i":[[0,"graph","borrow_graph","",null,null],[3,"BorrowGraph","borrow_graph::graph","",null,null],[11,"new","","creates an empty borrow graph",0,[[]]],[11,"is_mutable","","checks if the given reference is mutable or not",0,[[["refid",3]]]],[11,"new_ref","","Adds a new reference to the borrow graph Fails if the id…",0,[[["refid",3]]]],[11,"borrowed_by","","Return the references borrowing the `id` reference The…",0,[[["refid",3]]]],[11,"between_edges","","Return the edges between parent and child",0,[[["refid",3]],["vec",3]]],[11,"out_edges","","Return the outgoing edges from id",0,[[["refid",3]],["vec",3]]],[11,"in_edges","","Return the incoming edges into id",0,[[["refid",3]],["vec",3]]],[11,"add_strong_borrow","","Add a strong (exact) epsilon borrow from `parent_id` to…",0,[[["refid",3]]]],[11,"add_strong_field_borrow","","Add a strong (exact) field borrow from `parent_id` to…",0,[[["refid",3]]]],[11,"add_weak_borrow","","Add a weak (prefix) epsilon borrow from `parent_id` to…",0,[[["refid",3]]]],[11,"add_weak_field_borrow","","Add a weak (prefix) field borrow from `parent_id` to…",0,[[["refid",3]]]],[11,"release","","Remove reference `id` from the graph Fixes any transitive…",0,[[["refid",3]]]],[11,"leq","","checks if `self` covers `other`",0,[[]]],[11,"remap_refs","","Utility for remapping the reference ids according the…",0,[[["btreemap",3]]]],[11,"join","","Joins other into self It adds only \'unmatched\' edges from…",0,[[]]],[11,"contains_id","","Checks if the current reference is in the graph",0,[[["refid",3]]]],[11,"all_refs","","Returns all ref ids in the map",0,[[],[["btreeset",3],["refid",3]]]],[11,"display","","Prints out a view of the borrow graph",0,[[]]],[0,"references","borrow_graph","",null,null],[3,"RefID","borrow_graph::references","Unique identifier for the reference",null,null],[11,"new","","Creates a new reference id from the given number",1,[[]]],[11,"from","borrow_graph::graph","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","borrow_graph::references","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"clone","borrow_graph::graph","",0,[[],["borrowgraph",3]]],[11,"clone","borrow_graph::references","",1,[[],["refid",3]]],[11,"default","borrow_graph::graph","",0,[[],["borrowgraph",3]]],[11,"cmp","borrow_graph::references","",1,[[["refid",3]],["ordering",4]]],[11,"eq","borrow_graph::graph","",0,[[["borrowgraph",3]]]],[11,"ne","","",0,[[["borrowgraph",3]]]],[11,"eq","borrow_graph::references","",1,[[["refid",3]]]],[11,"ne","","",1,[[["refid",3]]]],[11,"partial_cmp","","",1,[[["refid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["refid",3]]]],[11,"le","","",1,[[["refid",3]]]],[11,"gt","","",1,[[["refid",3]]]],[11,"ge","","",1,[[["refid",3]]]],[11,"fmt","borrow_graph::graph","",0,[[["formatter",3]],["result",6]]],[11,"fmt","borrow_graph::references","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"BorrowGraph"],[3,"RefID"]]},\
"bounded_executor":{"doc":"A bounded tokio [`Handle`]. Only a bounded number of tasks…","i":[[3,"BoundedExecutor","bounded_executor","",null,null],[11,"new","","Create a new `BoundedExecutor` from an existing tokio…",0,[[["handle",3]]]],[11,"spawn","","Spawn a [`Future`] on the `BoundedExecutor`. This function…",0,[[]]],[11,"try_spawn","","Try to spawn a [`Future`] on the `BoundedExecutor`. If the…",0,[[],[["joinhandle",3],["result",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[],["boundedexecutor",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"BoundedExecutor"]]},\
"bytecode_source_map":{"doc":"","i":[[0,"mapping","bytecode_source_map","",null,null],[3,"SourceMapping","bytecode_source_map::mapping","An object that associates source code with compiled…",null,null],[12,"bytecode","","",0,null],[12,"source_map","","",0,null],[12,"source_code","","",0,null],[12,"marks","","",0,null],[11,"new","","",0,[[["sourcemap",3],["compiledmodule",3]]]],[11,"new_from_script","","",0,[[["sourcemap",3],["compiledscript",3]]]],[11,"with_marks","","",0,[[["markedsourcemapping",3]]]],[11,"with_source_code","","",0,[[]]],[0,"marking","bytecode_source_map","",null,null],[3,"FunctionMarking","bytecode_source_map::marking","A data structure used to track any markings or extra…",null,null],[12,"code_offsets","","",1,null],[12,"type_param_offsets","","",1,null],[3,"StructMarking","","A data structure used to track any markings or extra…",null,null],[12,"fields","","",2,null],[12,"type_param_offsets","","",2,null],[3,"MarkedSourceMapping","","A data structure that contains markings for both functions…",null,null],[11,"new","","",1,[[]]],[11,"code_offset","","",1,[[["string",3],["codeoffset",6]]]],[11,"type_param","","",1,[[["string",3]]]],[11,"new","","",2,[[]]],[11,"field","","",2,[[["string",3],["membercount",6]]]],[11,"type_param","","",2,[[["string",3]]]],[11,"new","","",3,[[]]],[11,"mark_code_offset","","",3,[[["string",3],["codeoffset",6],["functiondefinitionindex",3]]]],[11,"mark_function_type_param","","",3,[[["string",3],["functiondefinitionindex",3]]]],[11,"mark_struct_field","","",3,[[["string",3],["structdefinitionindex",3],["membercount",6]]]],[11,"mark_struct_type_param","","",3,[[["string",3],["structdefinitionindex",3]]]],[0,"source_map","bytecode_source_map","",null,null],[3,"StructSourceMap","bytecode_source_map::source_map","",null,null],[12,"decl_location","","The source declaration location of the struct",4,null],[12,"type_parameters","","Important: type parameters need to be added in the order…",4,null],[12,"fields","","Note that fields to a struct source map need to be added…",4,null],[3,"FunctionSourceMap","","",null,null],[12,"decl_location","","The source location for the definition of this entire…",5,null],[12,"type_parameters","","Note that type parameters need to be added in the order of…",5,null],[12,"parameters","","",5,null],[12,"locals","","The index into the vector is the locals index. The…",5,null],[12,"nops","","A map to the code offset for a corresponding nop. Nop\'s…",5,null],[12,"code_map","","The source location map for the function body.",5,null],[3,"SourceMap","","",null,null],[12,"module_name_opt","","The name <address.module_name> for module that this source…",6,null],[5,"remap_locations_source_name","","",null,[[["clone",8],["sourcename",6],["eq",8]],[["clone",8],["eq",8],["sourcename",6]]]],[5,"remap_locations_source_map","","",null,[[["sourcemap",3],["vec",3]],[["vec",3],["sourcemap",3]]]],[6,"SourceName","","",null,null],[11,"new","","",4,[[]]],[11,"add_type_parameter","","",4,[[["sourcename",6]]]],[11,"get_type_parameter_name","","",4,[[],[["sourcename",6],["option",4]]]],[11,"add_field_location","","",4,[[]]],[11,"get_field_location","","",4,[[["membercount",6]],["option",4]]],[11,"dummy_struct_map","","",4,[[["structdefinition",3],["compiledmodule",3]],["result",6]]],[11,"remap_locations","","",4,[[],[["structsourcemap",3],["clone",8],["eq",8]]]],[11,"new","","",5,[[]]],[11,"add_type_parameter","","",5,[[["sourcename",6]]]],[11,"get_type_parameter_name","","",5,[[],[["sourcename",6],["option",4]]]],[11,"add_code_mapping","","A single source-level instruction may possibly map to a…",5,[[["codeoffset",6]]]],[11,"add_nop_mapping","","Record the code offset for an Nop label",5,[[["noplabel",3],["codeoffset",6]]]],[11,"add_local_mapping","","",5,[[["sourcename",6]]]],[11,"add_parameter_mapping","","",5,[[["sourcename",6]]]],[11,"get_code_location","","Recall that we are using a segment tree. We therefore…",5,[[["codeoffset",6]],["option",4]]],[11,"get_parameter_or_local_name","","",5,[[],[["sourcename",6],["option",4]]]],[11,"make_local_name_to_index_map","","",5,[[],[["string",3],["localindex",6],["btreemap",3]]]],[11,"dummy_function_map","","",5,[[["functiondefinition",3],["compiledmodule",3]],["result",6]]],[11,"remap_locations","","",5,[[],[["functionsourcemap",3],["clone",8],["eq",8]]]],[11,"new","","",6,[[["option",4],["qualifiedmoduleident",3]]]],[11,"add_top_level_function_mapping","","",6,[[["functiondefinitionindex",3]],["result",6]]],[11,"add_function_type_parameter_mapping","","",6,[[["functiondefinitionindex",3],["sourcename",6]],["result",6]]],[11,"get_function_type_parameter_name","","",6,[[["functiondefinitionindex",3]],[["result",6],["sourcename",6]]]],[11,"add_code_mapping","","",6,[[["codeoffset",6],["functiondefinitionindex",3]],["result",6]]],[11,"add_nop_mapping","","",6,[[["noplabel",3],["codeoffset",6],["functiondefinitionindex",3]],["result",6]]],[11,"get_code_location","","Given a function definition and a code offset within that…",6,[[["codeoffset",6],["functiondefinitionindex",3]],["result",6]]],[11,"add_local_mapping","","",6,[[["functiondefinitionindex",3],["sourcename",6]],["result",6]]],[11,"add_parameter_mapping","","",6,[[["functiondefinitionindex",3],["sourcename",6]],["result",6]]],[11,"get_parameter_or_local_name","","",6,[[["functiondefinitionindex",3]],[["result",6],["sourcename",6]]]],[11,"add_top_level_struct_mapping","","",6,[[["structdefinitionindex",3]],["result",6]]],[11,"add_struct_field_mapping","","",6,[[["structdefinitionindex",3]],["result",6]]],[11,"get_struct_field_name","","",6,[[["structdefinitionindex",3],["membercount",6]],["option",4]]],[11,"add_struct_type_parameter_mapping","","",6,[[["structdefinitionindex",3],["sourcename",6]],["result",6]]],[11,"get_struct_type_parameter_name","","",6,[[["structdefinitionindex",3]],[["result",6],["sourcename",6]]]],[11,"get_function_source_map","","",6,[[["functiondefinitionindex",3]],[["functionsourcemap",3],["result",6]]]],[11,"get_struct_source_map","","",6,[[["structdefinitionindex",3]],[["result",6],["structsourcemap",3]]]],[11,"dummy_from_module","","Create a \'dummy\' source map for a compiled module. This is…",6,[[["compiledmodule",3]],["result",6]]],[11,"dummy_from_script","","",6,[[["compiledscript",3]],["result",6]]],[11,"remap_locations","","",6,[[],[["clone",8],["sourcemap",3],["eq",8]]]],[0,"utils","bytecode_source_map","",null,null],[3,"OwnedLoc","bytecode_source_map::utils","",null,null],[5,"source_map_from_file","","",null,[[["path",3]],[["result",6],["sourcemap",3]]]],[5,"render_errors","","",null,[[["errors",6],["sourcemapping",3]],["result",6]]],[5,"create_diagnostic","","",null,[[["fileid",3],["error",6]],["diagnostic",3]]],[5,"remap_owned_loc_to_loc","","",null,[[["sourcemap",3],["ownedloc",3]],[["loc",3],["sourcemap",3]]]],[6,"Error","","",null,null],[6,"Errors","","",null,null],[11,"from","bytecode_source_map::mapping","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","bytecode_source_map::marking","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"initialize","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"from","bytecode_source_map::source_map","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","bytecode_source_map::utils","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"initialize","","",7,[[]]],[11,"clone","bytecode_source_map::source_map","",4,[[],["structsourcemap",3]]],[11,"clone","","",5,[[],["functionsourcemap",3]]],[11,"clone","","",6,[[],["sourcemap",3]]],[11,"clone","bytecode_source_map::utils","",7,[[],["ownedloc",3]]],[11,"default","bytecode_source_map::marking","",1,[[],["functionmarking",3]]],[11,"default","","",2,[[],["structmarking",3]]],[11,"default","","",3,[[],["markedsourcemapping",3]]],[11,"default","bytecode_source_map::utils","",7,[[],["ownedloc",3]]],[11,"eq","","",7,[[["ownedloc",3]]]],[11,"ne","","",7,[[["ownedloc",3]]]],[11,"fmt","bytecode_source_map::mapping","",0,[[["formatter",3]],["result",6]]],[11,"fmt","bytecode_source_map::marking","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","bytecode_source_map::source_map","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","bytecode_source_map::utils","",7,[[["formatter",3]],["result",6]]],[11,"deserialize","bytecode_source_map::source_map","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","bytecode_source_map::utils","",7,[[],["result",4]]],[11,"serialize","bytecode_source_map::source_map","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","bytecode_source_map::utils","",7,[[],["result",4]]]],"p":[[3,"SourceMapping"],[3,"FunctionMarking"],[3,"StructMarking"],[3,"MarkedSourceMapping"],[3,"StructSourceMap"],[3,"FunctionSourceMap"],[3,"SourceMap"],[3,"OwnedLoc"]]},\
"bytecode_verifier":{"doc":"Verifies bytecode sanity.","i":[[0,"absint","bytecode_verifier","",null,null],[3,"BlockInvariant","bytecode_verifier::absint","",null,null],[12,"pre","","Precondition of the block",0,null],[12,"post","","Postcondition of the block",0,null],[4,"JoinResult","","",null,null],[13,"Changed","","",1,null],[13,"Unchanged","","",1,null],[4,"BlockPostcondition","","",null,null],[13,"Unprocessed","","Block not yet analyzed",2,null],[13,"Success","","Analyzing block was successful TODO might carry post state…",2,null],[13,"Error","","Analyzing block resulted in an error",2,null],[6,"InvariantMap","","A map from block id\'s to the pre/post of each block after…",null,null],[8,"AbstractDomain","","Trait for finite-height abstract domains. Infinite height…",null,null],[10,"join","","",3,[[],["joinresult",4]]],[8,"TransferFunctions","","Take a pre-state + instruction and mutate it to produce a…",null,null],[16,"State","","",4,null],[16,"AnalysisError","","",4,null],[10,"execute","","Execute local@instr found at index local@index in the…",4,[[["bytecode",4]],["result",4]]],[8,"AbstractInterpreter","","",null,null],[11,"analyze_function","","Analyze procedure local@function_view starting from…",5,[[["controlflowgraph",8],["functiondefinitionview",3]],["invariantmap",6]]],[11,"execute_block","","",5,[[["controlflowgraph",8],["blockid",6],["codeunit",3]],["result",4]]],[0,"acquires_list_verifier","bytecode_verifier","This module implements a checker for verifying properties…",null,null],[3,"AcquiresVerifier","bytecode_verifier::acquires_list_verifier","",null,null],[11,"verify","","",6,[[["compiledmodule",3],["functiondefinition",3]],["vmresult",6]]],[0,"check_duplication","bytecode_verifier","This module implements a checker for verifying that each…",null,null],[3,"DuplicationChecker","bytecode_verifier::check_duplication","",null,null],[11,"new","","",7,[[["compiledmodule",3]]]],[11,"verify","","",7,[[],["vmresult",6]]],[0,"code_unit_verifier","bytecode_verifier","This module implements the checker for verifying…",null,null],[3,"CodeUnitVerifier","bytecode_verifier::code_unit_verifier","",null,null],[11,"verify","","",8,[[["compiledmodule",3]],["vmresult",6]]],[0,"constants","bytecode_verifier","This module implements a checker for verifying that - a…",null,null],[3,"ConstantsChecker","bytecode_verifier::constants","",null,null],[11,"new","","",9,[[["compiledmodule",3]]]],[11,"verify","","",9,[[],["vmresult",6]]],[11,"verify_constant","","",9,[[["constant",3]],["vmresult",6]]],[11,"verify_constant_type","","",9,[[["signaturetoken",4]],["vmresult",6]]],[11,"verify_constant_data","","",9,[[["constant",3]],["vmresult",6]]],[0,"control_flow","bytecode_verifier","This module implements a checker for verifies control…",null,null],[5,"verify","bytecode_verifier::control_flow","",null,[[["functiondefinition",3],["compiledmodule",3]],["vmresult",6]]],[0,"control_flow_graph","bytecode_verifier","This module defines the control-flow graph uses for…",null,null],[3,"VMControlFlowGraph","bytecode_verifier::control_flow_graph","The control flow graph that we build from the bytecode.",null,null],[6,"BlockId","","",null,null],[8,"ControlFlowGraph","","A trait that specifies the basic requirements for a CFG",null,null],[10,"block_start","","Start index of the block ID in the bytecode vector",10,[[["blockid",6]],["codeoffset",6]]],[10,"block_end","","End index of the block ID in the bytecode vector",10,[[["blockid",6]],["codeoffset",6]]],[10,"successors","","Successors of the block ID in the bytecode vector",10,[[["blockid",6]],["vec",3]]],[10,"instr_indexes","","Iterator over the indexes of instructions in this block",10,[[["blockid",6]],[["box",3],["iterator",8]]]],[10,"blocks","","Return an iterator over the blocks of the CFG",10,[[],[["vec",3],["blockid",6]]]],[10,"num_blocks","","Return the number of blocks (vertices) in the control flow…",10,[[]]],[10,"entry_block_id","","Return the id of the entry block for this control-flow…",10,[[],["blockid",6]]],[11,"new","","",11,[[]]],[11,"display","","",11,[[]]],[11,"reachable_from","","",11,[[["blockid",6]],[["vec",3],["blockid",6]]]],[0,"instantiation_loops","bytecode_verifier","This implements an algorithm that detects loops during the…",null,null],[3,"InstantiationLoopChecker","bytecode_verifier::instantiation_loops","",null,null],[11,"new","","",12,[[["compiledmodule",3]]]],[11,"verify","","",12,[[],["vmresult",6]]],[0,"instruction_consistency","bytecode_verifier","This module defines the transfer functions for verifying…",null,null],[3,"InstructionConsistency","bytecode_verifier::instruction_consistency","",null,null],[11,"new","","",13,[[["compiledmodule",3]]]],[11,"verify","","",13,[[],["vmresult",6]]],[0,"locals_safety","bytecode_verifier","This module defines the transfer functions for verifying…",null,null],[5,"verify","bytecode_verifier::locals_safety","",null,[[["vmcontrolflowgraph",3],["functiondefinition",3],["compiledmodule",3]],["vmresult",6]]],[0,"reference_safety","bytecode_verifier","This module defines the transfer functions for verifying…",null,null],[5,"verify","bytecode_verifier::reference_safety","",null,[[["vmcontrolflowgraph",3],["functiondefinition",3],["compiledmodule",3]],["vmresult",6]]],[0,"resolver","bytecode_verifier","This module implements a resolver for importing a…",null,null],[3,"Resolver","bytecode_verifier::resolver","Resolution context for importing types",null,null],[11,"new","","create a new instance of Resolver for module",14,[[]]],[11,"import_signature_token","","given a signature token in dependency, construct an…",14,[[["signaturetoken",4]],[["vmstatus",3],["result",4],["signaturetoken",4]]]],[11,"import_signature","","",14,[[["signature",3]],[["signature",3],["result",4],["vmstatus",3]]]],[11,"compare_cross_module_signatures","","",14,[[["signature",3]],[["vmstatus",3],["result",4]]]],[0,"resources","bytecode_verifier","This module implements a checker for verifying that a…",null,null],[3,"ResourceTransitiveChecker","bytecode_verifier::resources","",null,null],[11,"new","","",15,[[["compiledmodule",3]]]],[11,"verify","","",15,[[],["vmresult",6]]],[0,"signature","bytecode_verifier","This module implements a checker for verifying signature…",null,null],[3,"SignatureChecker","bytecode_verifier::signature","",null,null],[11,"new","","",16,[[["compiledmodule",3]]]],[11,"verify","","",16,[[],["vmresult",6]]],[0,"stack_usage_verifier","bytecode_verifier","This module implements a checker for verifying that basic…",null,null],[3,"StackUsageVerifier","bytecode_verifier::stack_usage_verifier","",null,null],[11,"verify","","",17,[[["compiledmodule",3],["functiondefinition",3],["vmcontrolflowgraph",3]],["vmresult",6]]],[0,"struct_defs","bytecode_verifier","This module provides a checker for verifing that struct…",null,null],[3,"RecursiveStructDefChecker","bytecode_verifier::struct_defs","",null,null],[3,"StructDefGraphBuilder","","Given a module, build a graph of struct definitions. This…",null,null],[11,"new","","",18,[[["compiledmodule",3]]]],[11,"verify","","",18,[[],["vmresult",6]]],[11,"new","","",19,[[["compiledmodule",3]]]],[11,"build","","",19,[[],[["vmresult",6],["digraphmap",6]]]],[0,"type_safety","bytecode_verifier","This module defines the transfer functions for verifying…",null,null],[5,"verify","bytecode_verifier::type_safety","",null,[[["vmcontrolflowgraph",3],["functiondefinition",3],["compiledmodule",3]],["vmresult",6]]],[0,"unused_entries","bytecode_verifier","",null,null],[3,"UnusedEntryChecker","bytecode_verifier::unused_entries","",null,null],[11,"new","","",20,[[["compiledmodule",3]]]],[11,"verify","","",20,[[],[["vec",3],["vmstatus",3]]]],[0,"verifier","bytecode_verifier","This module contains the public APIs supported by the…",null,null],[3,"VerifiedModule","bytecode_verifier::verifier","A module that has been verified for internal consistency.",null,null],[3,"VerifiedScript","","A script that has been verified for internal consistency.",null,null],[5,"verify_main_signature","","This function checks the extra requirements on the…",null,[[["compiledscript",3]],["vmresult",6]]],[5,"verify_module_dependencies","","Verification of a module in isolation (using…",null,[[["verifiedmodule",3]],["vmresult",6]]],[5,"verify_dependencies","","",null,[[["btreemap",3],["verifiedmodule",3]],["vmresult",6]]],[5,"verify_script_dependencies","","Verifying the dependencies of a script follows the same…",null,[[["verifiedscript",3]],["vmresult",6]]],[5,"verify_script_dependency_map","","",null,[[["btreemap",3],["verifiedscript",3]],["vmresult",6]]],[5,"batch_verify_modules","","Batch verify a list of modules and panic on any error. The…",null,[[["compiledmodule",3],["vec",3]],[["verifiedmodule",3],["vec",3]]]],[11,"new","","Verifies this `CompiledModule`, returning a…",21,[[["compiledmodule",3]],["result",4]]],[11,"serialize","","Serializes this module into the provided buffer.",21,[[["vec",3]],[["result",4],["error",3]]]],[11,"as_inner","","Returns a reference to the `CompiledModule` within.",21,[[],["compiledmodule",3]]],[11,"into_inner","","Returns the `CompiledModule` within. Conversion back to…",21,[[],["compiledmodule",3]]],[11,"new","","Verifies this `CompiledScript`, returning a…",22,[[["compiledscript",3]],["result",4]]],[11,"into_module","","Returns the corresponding `VerifiedModule` for this script.",22,[[]]],[11,"serialize","","Serializes this script into the provided buffer.",22,[[["vec",3]],[["result",4],["error",3]]]],[11,"as_inner","","Returns a reference to the `CompiledScript` within.",22,[[],["compiledscript",3]]],[11,"into_inner","","Returns the `CompiledScript` within. Conversion back to…",22,[[],["compiledscript",3]]],[11,"from","bytecode_verifier::absint","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","bytecode_verifier::acquires_list_verifier","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","bytecode_verifier::check_duplication","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","bytecode_verifier::code_unit_verifier","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","bytecode_verifier::constants","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","bytecode_verifier::control_flow_graph","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","bytecode_verifier::instantiation_loops","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","bytecode_verifier::instruction_consistency","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","bytecode_verifier::resolver","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","bytecode_verifier::resources","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","bytecode_verifier::signature","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","bytecode_verifier::stack_usage_verifier","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","bytecode_verifier::struct_defs","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","bytecode_verifier::unused_entries","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","bytecode_verifier::verifier","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"equivalent","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"equivalent","","",22,[[]]],[11,"block_start","bytecode_verifier::control_flow_graph","",11,[[["blockid",6]],["codeoffset",6]]],[11,"block_end","","",11,[[["blockid",6]],["codeoffset",6]]],[11,"successors","","",11,[[["blockid",6]],["vec",3]]],[11,"blocks","","",11,[[],[["vec",3],["blockid",6]]]],[11,"instr_indexes","","",11,[[["blockid",6]],[["box",3],["iterator",8]]]],[11,"num_blocks","","",11,[[]]],[11,"entry_block_id","","",11,[[],["blockid",6]]],[11,"clone","bytecode_verifier::absint","",2,[[],["blockpostcondition",4]]],[11,"clone","","",0,[[],["blockinvariant",3]]],[11,"clone","bytecode_verifier::verifier","",21,[[],["verifiedmodule",3]]],[11,"clone","","",22,[[],["verifiedscript",3]]],[11,"eq","","",21,[[["verifiedmodule",3]]]],[11,"ne","","",21,[[["verifiedmodule",3]]]],[11,"eq","","",22,[[["verifiedscript",3]]]],[11,"ne","","",22,[[["verifiedscript",3]]]],[11,"fmt","bytecode_verifier::absint","",1,[[["formatter",3]],["result",6]]],[11,"fmt","bytecode_verifier::verifier","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"as_module","","",21,[[],["compiledmodule",3]]],[11,"as_script","","",22,[[],["compiledscript",3]]]],"p":[[3,"BlockInvariant"],[4,"JoinResult"],[4,"BlockPostcondition"],[8,"AbstractDomain"],[8,"TransferFunctions"],[8,"AbstractInterpreter"],[3,"AcquiresVerifier"],[3,"DuplicationChecker"],[3,"CodeUnitVerifier"],[3,"ConstantsChecker"],[8,"ControlFlowGraph"],[3,"VMControlFlowGraph"],[3,"InstantiationLoopChecker"],[3,"InstructionConsistency"],[3,"Resolver"],[3,"ResourceTransitiveChecker"],[3,"SignatureChecker"],[3,"StackUsageVerifier"],[3,"RecursiveStructDefChecker"],[3,"StructDefGraphBuilder"],[3,"UnusedEntryChecker"],[3,"VerifiedModule"],[3,"VerifiedScript"]]},\
"bytecode_verifier_tests":{"doc":"","i":[],"p":[]},\
"channel":{"doc":"Provides an mpsc (multi-producer single-consumer) channel…","i":[[3,"WithEntryTimestamp","channel","Wrapper around a value with an entry timestamp It is used…",null,null],[3,"Sender","","Similar to `mpsc::Sender`, but with an `IntGauge`",null,null],[3,"Receiver","","Similar to `mpsc::Receiver`, but with an `IntGauge`",null,null],[5,"new","","Similar to `mpsc::channel`, `new` creates a pair of…",null,[[["intgauge",6]]]],[5,"new_with_timeout","","",null,[[["duration",3],["intgauge",6]]]],[5,"new_test","","",null,[[]]],[5,"new_test_with_timeout","","",null,[[["duration",3]]]],[0,"libra_channel","","libra_channel provides an mpsc channel which has two ends…",null,null],[3,"Sender","channel::libra_channel","The sending end of the libra_channel.",null,null],[3,"Receiver","","The receiving end of the libra_channel.",null,null],[4,"ElementStatus","","The status of an element inserted into a libra_channel. If…",null,null],[13,"Dequeued","","",0,null],[13,"Dropped","","",0,null],[5,"new","","Create a new Libra Channel and returns the two ends of the…",null,[[["option",4],["queuestyle",4],["intcountervec",6],["nonzerousize",3]]]],[11,"push","","This adds the message into the internal queue data…",1,[[],["result",6]]],[11,"push_with_feedback","","Same as `push`, but this function also accepts a…",1,[[["option",4],["sender",3]],["result",6]]],[11,"clear","","Removes all the previously sent transactions that have not…",2,[[]]],[0,"message_queues","channel","",null,null],[4,"QueueStyle","channel::message_queues","QueueStyle is an enum which can be used as a configuration…",null,null],[13,"LIFO","","",3,null],[13,"FIFO","","",3,null],[13,"KLAST","","",3,null],[7,"TEST_COUNTER","channel","",null,null],[11,"try_send","","",4,[[],[["senderror",3],["result",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"try_poll_next","","",6,[[["pin",3],["context",3]],[["poll",4],["option",4]]]],[11,"from","channel::libra_channel","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"try_poll_next","","",2,[[["pin",3],["context",3]],[["poll",4],["option",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","channel::message_queues","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"drop","channel::libra_channel","",1,[[]]],[11,"drop","","",2,[[]]],[11,"clone","","",1,[[]]],[11,"clone","channel::message_queues","",3,[[],["queuestyle",4]]],[11,"clone","channel","",4,[[]]],[11,"eq","channel::libra_channel","",0,[[["elementstatus",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","channel::message_queues","",3,[[["formatter",3]],["result",6]]],[11,"poll_ready","channel","",4,[[["context",3],["pin",3]],[["result",4],["poll",4]]]],[11,"start_send","","",4,[[["pin",3]],["result",4]]],[11,"poll_flush","","",4,[[["context",3],["pin",3]],[["result",4],["poll",4]]]],[11,"poll_close","","",4,[[["context",3],["pin",3]],[["result",4],["poll",4]]]],[11,"is_terminated","channel::libra_channel","",2,[[]]],[11,"is_terminated","channel","",6,[[]]],[11,"poll_next","channel::libra_channel","poll_next checks whether there is something ready for…",2,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","channel","",6,[[["context",3],["pin",3]],[["poll",4],["option",4]]]]],"p":[[4,"ElementStatus"],[3,"Sender"],[3,"Receiver"],[4,"QueueStyle"],[3,"Sender"],[3,"WithEntryTimestamp"],[3,"Receiver"]]},\
"cli":{"doc":"Libra Client","i":[[3,"AccountData","cli","Struct used to store data for each created account. We…",null,null],[12,"address","","Address of the account.",0,null],[12,"authentication_key","","Authentication key of the account.",0,null],[12,"key_pair","","(private_key, public_key) pair if the account is not…",0,null],[12,"sequence_number","","Latest sequence number maintained by client, it can be…",0,null],[12,"status","","Whether the account is initialized on chain, cached local…",0,null],[4,"AccountStatus","","Enum used to represent account status.",null,null],[13,"Local","","Account exists only in local cache, it is not persisted on…",1,null],[13,"Persisted","","Account is persisted on chain.",1,null],[13,"Unknown","","Not able to check account status, probably because client…",1,null],[0,"client_proxy","","Main instance of client holding corresponding information,…",null,null],[3,"AddressAndIndex","cli::client_proxy","Account data is stored in a map and referenced by an index.",null,null],[12,"address","","Address of the account.",2,null],[12,"index","","The account_ref_id of this account in client.",2,null],[3,"IndexAndSequence","","Used to return the sequence and sender account index…",null,null],[12,"account_index","","Index/key of the account in TestClient::accounts vector.",3,null],[12,"sequence_number","","Sequence number of the account.",3,null],[3,"ClientProxy","","Proxy handling CLI commands/inputs.",null,null],[12,"client","","client for admission control interface.",4,null],[12,"accounts","","Created accounts.",4,null],[12,"faucet_account","","Account used for mint operations.",4,null],[4,"AccountEntry","","Account is represented either as an entry into accounts…",null,null],[13,"Index","","Index into client.accounts",5,null],[13,"Address","","Address of the account",5,null],[11,"new","","Construct a new TestClient.",4,[[["string",3],["waypoint",3],["option",4]],["result",6]]],[11,"create_next_account","","Returns the account index that should be used by user to…",4,[[],[["result",6],["addressandindex",3]]]],[11,"latest_epoch_change_li","","Returns the ledger info corresonding to the latest epoch…",4,[[],[["ledgerinfowithsignatures",4],["option",4]]]],[11,"print_all_accounts","","Print index and address of all accounts.",4,[[]]],[11,"set_accounts","","Set the account of this client instance.",4,[[["accountdata",3],["vec",3]],[["addressandindex",3],["vec",3]]]],[11,"get_balances","","Get balance from validator for the account specified.",4,[[],[["result",6],["vec",3]]]],[11,"get_sequence_number","","Get the latest sequence number from validator for the…",4,[[],["result",6]]],[11,"add_currency","","Adds a currency to the sending account. Fails if that…",4,[[],["result",6]]],[11,"mint_coins","","Mints coins for the receiver specified.",4,[[],["result",6]]],[11,"enable_custom_script","","Allow executing arbitrary script in the network.",4,[[],["result",6]]],[11,"disable_custom_script","","Only allow executing predefined script in the Move…",4,[[],["result",6]]],[11,"upgrade_stdlib","","Only allow executing predefined script in the Move…",4,[[],["result",6]]],[11,"remove_validator","","Remove an existing validator from Validator Set.",4,[[],["result",6]]],[11,"add_validator","","Add a new validator to the Validator Set.",4,[[],["result",6]]],[11,"register_validator","","Register an account as validator candidate with…",4,[[],["result",6]]],[11,"wait_for_transaction","","Waits for the next transaction for a specific address and…",4,[[["accountaddress",3]],["result",6]]],[11,"transfer_coins_int","","Transfer num_coins from sender account to receiver. If…",4,[[["string",3],["option",4],["option",4],["accountaddress",3]],[["result",6],["indexandsequence",3]]]],[11,"prepare_transfer_coins","","Prepare a transfer transaction: return the unsigned raw…",4,[[["string",3],["option",4],["option",4],["accountaddress",3]],[["result",6],["rawtransaction",3]]]],[11,"transfer_coins","","Transfers coins from sender to receiver.",4,[[],[["result",6],["indexandsequence",3]]]],[11,"compile_program","","Compile Move program",4,[[],[["result",6],["vec",3]]]],[11,"submit_signed_transaction","","Submit a transaction to the network given the unsigned raw…",4,[[["ed25519publickey",3],["ed25519signature",3],["rawtransaction",3]],["result",6]]],[11,"publish_module","","Publish Move module",4,[[],["result",6]]],[11,"execute_script","","Execute custom script",4,[[],["result",6]]],[11,"get_latest_account_state","","Get the latest account state from validator.",4,[[],["result",6]]],[11,"get_latest_account_resources","","Get the latest annotated account resources from validator.",4,[[],["result",6]]],[11,"get_committed_txn_by_acc_seq","","Get committed txn by account and sequence number.",4,[[],[["result",6],["option",4]]]],[11,"get_committed_txn_by_range","","Get committed txn by account and sequence number",4,[[],[["vec",3],["result",6]]]],[11,"get_account_address_from_parameter","","Get account address and (if applicable) authentication key…",4,[[],["result",6]]],[11,"get_events_by_account_and_type","","Get events by account and event type with start sequence…",4,[[],["result",6]]],[11,"write_recovery","","Write mnemonic recover to the file specified.",4,[[],["result",6]]],[11,"recover_wallet_accounts","","Recover wallet accounts from command \'recover \' and return…",4,[[],[["result",6],["vec",3]]]],[11,"recover_accounts_in_wallet","","Recover accounts in wallets and sync state if…",4,[[],[["result",6],["vec",3]]]],[11,"insert_account_data","","Insert the account data to Client::accounts and return its…",4,[[["accountdata",3]],["addressandindex",3]]],[11,"test_validator_connection","","Test JSON RPC client connection with validator.",4,[[],[["blockmetadata",3],["result",6]]]],[11,"test_trusted_connection","","Test client\'s connection to validator with proof.",4,[[],["result",6]]],[11,"convert_to_scaled_representation","","Scale the number in `input` based on `scaling_factor` and…",4,[[],["result",6]]],[11,"convert_to_on_chain_represenation","","convert number of coins (main unit) given as string to its…",4,[[],["result",6]]],[0,"commands","cli","Command struct to interact with client.",null,null],[5,"report_error","cli::commands","Print the error and bump up error counter.",null,[[["error",3]]]],[5,"blocking_cmd","","Check whether a command is blocking.",null,[[]]],[5,"debug_format_cmd","","Check whether a command is debugging command.",null,[[]]],[5,"is_address","","Check whether the input string is a valid libra address.",null,[[]]],[5,"is_authentication_key","","Check whether the input string is a valid libra…",null,[[]]],[5,"get_commands","","Returns all the commands available, as well as the reverse…",null,[[]]],[5,"parse_cmd","","Parse a cmd string, the first element in the returned…",null,[[],["vec",3]]],[5,"print_subcommand_help","","Print the help message for all sub commands.",null,[[]]],[5,"subcommand_execute","","Execute sub command.",null,[[["vec",3],["clientproxy",3],["box",3]]]],[8,"Command","","Trait to perform client operations.",null,null],[10,"get_aliases","","all commands and aliases this command support.",6,[[],["vec",3]]],[11,"get_params_help","","string that describes params.",6,[[]]],[10,"get_description","","string that describes what the command does.",6,[[]]],[10,"execute","","code to execute.",6,[[["clientproxy",3]]]],[11,"keypair_as_string","cli","Serialize account keypair if exists.",0,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"from","cli::client_proxy","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"clone","cli","",1,[[],["accountstatus",4]]],[11,"eq","","",0,[[["accountdata",3]]]],[11,"ne","","",0,[[["accountdata",3]]]],[11,"eq","","",1,[[["accountstatus",4]]]],[11,"fmt","cli::client_proxy","",2,[[["formatter",3]],["result",6]]],[11,"fmt","cli","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","cli::client_proxy","",5,[[["formatter",3]],["result",6]]],[11,"serialize","cli","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]]],"p":[[3,"AccountData"],[4,"AccountStatus"],[3,"AddressAndIndex"],[3,"IndexAndSequence"],[3,"ClientProxy"],[4,"AccountEntry"],[8,"Command"]]},\
"cluster_test":{"doc":"","i":[[0,"atomic_histogram","cluster_test","",null,null],[3,"AtomicHistogramAccumulator","cluster_test::atomic_histogram","",null,null],[3,"AtomicHistogramSnapshot","","",null,null],[11,"new","","",0,[[],["atomichistogramaccumulator",3]]],[11,"snapshot","","",0,[[],["atomichistogramsnapshot",3]]],[11,"record_data_point","","",0,[[]]],[11,"percentile","","",1,[[]]],[0,"aws","cluster_test","",null,null],[5,"set_asg_size","cluster_test::aws","set_asg_size sets the size of the given autoscaling group",null,[[]]],[0,"cluster","cluster_test","",null,null],[3,"Cluster","cluster_test::cluster","",null,null],[11,"from_host_port","","",2,[[["vec",3]]]],[11,"new","","",2,[[["vec",3],["instance",3]]]],[11,"random_validator_instance","","",2,[[],["instance",3]]],[11,"validator_instances","","",2,[[]]],[11,"fullnode_instances","","",2,[[]]],[11,"all_instances","","",2,[[]]],[11,"into_validator_instances","","",2,[[],[["vec",3],["instance",3]]]],[11,"into_fullnode_instances","","",2,[[],[["vec",3],["instance",3]]]],[11,"mint_key_pair","","",2,[[],["keypair",3]]],[11,"get_validator_instance","","",2,[[],[["option",4],["instance",3]]]],[11,"split_n_validators_random","","Splits this cluster into two",2,[[]]],[11,"split_n_fullnodes_random","","",2,[[]]],[11,"validator_sub_cluster","","",2,[[["string",3],["vec",3]],["cluster",3]]],[0,"cluster_swarm","cluster_test","",null,null],[0,"cluster_swarm_kube","cluster_test::cluster_swarm","",null,null],[3,"ClusterSwarmKube","cluster_test::cluster_swarm::cluster_swarm_kube","",null,null],[11,"new","","",3,[[]]],[11,"get_workspace","","",3,[[]]],[11,"run","","",3,[[["string",3]]]],[11,"upsert_node","","",3,[[["instanceconfig",4]]]],[11,"delete_node","","",3,[[["instanceconfig",4]]]],[8,"ClusterSwarm","cluster_test::cluster_swarm","",null,null],[10,"remove_all_network_effects","","",4,[[],[["pin",3],["box",3]]]],[10,"spawn_new_instance","","Spawns a new instance.",4,[[["instanceconfig",4]],[["box",3],["pin",3]]]],[11,"spawn_validator_set","","Creates a set of validators with the given `image_tag`",4,[[["string",3],["vec",3]],[["box",3],["pin",3]]]],[11,"spawn_fullnode_set","","Creates a set of fullnodes with the given `image_tag`",4,[[["string",3],["vec",3]],[["box",3],["pin",3]]]],[11,"spawn_validator_and_fullnode_set","","Creates a set of validators and fullnodes with the given…",4,[[],[["pin",3],["box",3]]]],[10,"delete_all","","Deletes all validators and fullnodes in this cluster",4,[[],[["pin",3],["box",3]]]],[10,"get_grafana_baseurl","","",4,[[],[["box",3],["pin",3]]]],[0,"experiments","cluster_test","",null,null],[3,"PacketLossRandomValidators","cluster_test::experiments","",null,null],[3,"PacketLossRandomValidatorsParams","","",null,null],[3,"PerformanceBenchmark","","",null,null],[3,"PerformanceBenchmarkParams","","",null,null],[12,"percent_nodes_down","","",5,null],[12,"trace","","",5,null],[12,"duration","","",5,null],[3,"PerformanceBenchmarkThreeRegionSimulation","","",null,null],[3,"PerformanceBenchmarkThreeRegionSimulationParams","","",null,null],[3,"RebootRandomValidators","","",null,null],[3,"RebootRandomValidatorsParams","","",null,null],[12,"count","","",6,null],[3,"RecoveryTime","","",null,null],[3,"RecoveryTimeParams","","",null,null],[12,"num_accounts_to_mint","","",7,null],[3,"CpuFlamegraph","","",null,null],[3,"CpuFlamegraphParams","","",null,null],[12,"duration_secs","","",8,null],[3,"Context","","",null,null],[12,"tx_emitter","","",9,null],[12,"trace_tail","","",9,null],[12,"prometheus","","",9,null],[12,"cluster","","",9,null],[12,"report","","",9,null],[12,"global_emit_job_request","","",9,null],[12,"emit_to_validator","","",9,null],[12,"cluster_swarm","","",9,null],[12,"current_tag","","Current docker image tag used by this run",9,null],[5,"get_experiment","","Given an experiment name and its flags, it constructs an…",null,[[["cluster",3]],[["experiment",8],["box",3]]]],[11,"new_nodes_down","","",5,[[]]],[8,"Experiment","","",null,null],[11,"affected_validators","","",10,[[],[["hashset",3],["string",3]]]],[10,"run","","",10,[[["context",3]],[["box",3],["pin",3]]]],[10,"deadline","","",10,[[],["duration",3]]],[8,"ExperimentParam","","",null,null],[16,"E","","",11,null],[10,"build","","",11,[[["cluster",3]]]],[11,"new","","",9,[[["txemitter",3],["suitereport",3],["cluster",3],["option",4],["clusterswarmkube",3],["tracetail",3],["prometheus",3]]]],[0,"github","cluster_test","",null,null],[3,"CommitInfo","cluster_test::github","",null,null],[12,"sha","","",12,null],[12,"commit","","",12,null],[3,"GitCommitInfo","","",null,null],[12,"author","","",13,null],[12,"message","","",13,null],[3,"Author","","",null,null],[12,"name","","",14,null],[12,"email","","",14,null],[3,"GitHub","","",null,null],[11,"new","","",15,[[],["github",3]]],[11,"get_commits","","repo in format owner/repo_name sha can be long or short…",15,[[],[["result",6],["vec",3]]]],[0,"health","cluster_test","",null,null],[3,"CommitHistoryHealthCheck","cluster_test::health","Verifies that commit history produced by validators is…",null,null],[3,"DebugPortLogWorker","","",null,null],[3,"LivenessHealthCheck","","",null,null],[3,"LogTail","","",null,null],[12,"event_receiver","","",16,null],[12,"pending_messages","","",16,null],[3,"TraceTail","","",null,null],[12,"trace_receiver","","",17,null],[12,"trace_enabled","","",17,null],[3,"Commit","","",null,null],[3,"ValidatorEvent","","",null,null],[3,"HealthCheckRunner","","",null,null],[3,"HealthCheckContext","","",null,null],[3,"HealthCheckError","","",null,null],[12,"validator","","",18,null],[12,"message","","",18,null],[4,"Event","","",null,null],[13,"Commit","","",19,null],[13,"ConsensusStarted","","",19,null],[4,"PrintFailures","","",null,null],[13,"None","","",20,null],[13,"UnexpectedOnly","","",20,null],[13,"All","","",20,null],[11,"new","","",21,[[]]],[11,"spawn_new","","",22,[[["cluster",3]]]],[11,"run","","",22,[[]]],[11,"new","","",23,[[["cluster",3]]]],[11,"recv_all_until_deadline","","",16,[[["instant",3]],[["vec",3],["validatorevent",3]]]],[11,"recv_all","","",16,[[],[["vec",3],["validatorevent",3]]]],[11,"capture_trace","","",17,[[["duration",3]]]],[8,"HealthCheck","","",null,null],[10,"on_event","","Verify specific event",24,[[["validatorevent",3],["healthcheckcontext",3]]]],[11,"verify","","Periodic verification (happens even if when no events…",24,[[["healthcheckcontext",3]]]],[11,"invalidate","","Optionally marks validator as failed, requiring waiting…",24,[[]]],[11,"clear","","Clean is invoked when cluster is wiped This means that…",24,[[]]],[10,"name","","",24,[[]]],[11,"new","","",25,[[["box",3],["vec",3],["cluster",3]]]],[11,"new_all","","",25,[[["cluster",3]]]],[11,"run","","Takes a list of affected_validators. If there are…",25,[[["printfailures",4],["hashset",3]],[["result",6],["vec",3]]]],[11,"invalidate","","",25,[[]]],[11,"clear","","",25,[[]]],[11,"new","","",26,[[]]],[11,"now","","",26,[[],["duration",3]]],[11,"report_failure","","",26,[[["string",3]]]],[0,"instance","cluster_test","",null,null],[3,"VaultConfig","cluster_test::instance","",null,null],[12,"index","","",27,null],[3,"LSRConfig","","",null,null],[12,"index","","",28,null],[12,"num_validators","","",28,null],[12,"image_tag","","",28,null],[12,"lsr_backend","","",28,null],[3,"ValidatorConfig","","",null,null],[12,"index","","",29,null],[12,"num_validators","","",29,null],[12,"num_fullnodes","","",29,null],[12,"enable_lsr","","",29,null],[12,"image_tag","","",29,null],[12,"config_overrides","","",29,null],[3,"FullnodeConfig","","",null,null],[12,"fullnode_index","","",30,null],[12,"num_fullnodes_per_validator","","",30,null],[12,"validator_index","","",30,null],[12,"num_validators","","",30,null],[12,"image_tag","","",30,null],[12,"config_overrides","","",30,null],[3,"Instance","","",null,null],[4,"InstanceConfig","","",null,null],[13,"Validator","","",31,null],[13,"Fullnode","","",31,null],[13,"LSR","","",31,null],[13,"Vault","","",31,null],[5,"instancelist_to_set","","",null,[[],[["hashset",3],["string",3]]]],[11,"new","","",32,[[["string",3],["option",4],["client",3]],["instance",3]]],[11,"new_k8s","","",32,[[["string",3],["client",3],["clusterswarmkube",3],["instanceconfig",4]],["instance",3]]],[11,"counter","","",32,[[],["result",6]]],[11,"try_json_rpc","","",32,[[]]],[11,"peer_name","","",32,[[],["string",3]]],[11,"validator_index","","",32,[[],["string",3]]],[11,"ip","","",32,[[],["string",3]]],[11,"ac_port","","",32,[[]]],[11,"json_rpc_url","","",32,[[],["url",3]]],[11,"debug_interface_port","","",32,[[],["option",4]]],[11,"json_rpc_client","","",32,[[],["jsonrpcasyncclient",3]]],[11,"stop","","",32,[[]]],[11,"start","","Node must be stopped first",32,[[]]],[11,"util_cmd","","Runs command on the same host in separate utility…",32,[[["string",3]]]],[0,"prometheus","cluster_test","",null,null],[3,"Prometheus","cluster_test::prometheus","",null,null],[3,"MatrixResponse","","",null,null],[3,"TimeSeries","","",null,null],[11,"new","","",33,[[["string",3]]]],[11,"link_to_dashboard","","",33,[[["duration",3]],["string",3]]],[11,"query_range_avg","","",33,[[["string",3],["duration",3]],["result",6]]],[11,"avg","","",34,[[],["option",4]]],[11,"get","","",35,[[]]],[11,"avg","","",35,[[],["option",4]]],[0,"report","cluster_test","",null,null],[3,"SuiteReport","cluster_test::report","",null,null],[3,"ReportedMetric","","",null,null],[12,"experiment","","",36,null],[12,"metric","","",36,null],[12,"value","","",36,null],[11,"new","","",37,[[]]],[11,"report_metric","","",37,[[["tostring",8]]]],[11,"report_text","","",37,[[["string",3]]]],[0,"slack","cluster_test","",null,null],[3,"SlackClient","cluster_test::slack","",null,null],[11,"new","","",38,[[]]],[11,"send_message","","",38,[[["url",3]],["result",6]]],[0,"stats","cluster_test","",null,null],[5,"avg_txns_per_block","cluster_test::stats","",null,[[["duration",3],["prometheus",3]],["result",6]]],[0,"suite","cluster_test","",null,null],[3,"ExperimentSuite","cluster_test::suite","",null,null],[12,"experiments","","",39,null],[11,"new_pre_release","","",39,[[["cluster",3]]]],[11,"new_perf_suite","","",39,[[["cluster",3]]]],[0,"tx_emitter","cluster_test","",null,null],[3,"TxEmitter","cluster_test::tx_emitter","",null,null],[3,"EmitJob","","",null,null],[3,"TxStats","","",null,null],[12,"submitted","","",40,null],[12,"committed","","",40,null],[12,"expired","","",40,null],[12,"latency","","",40,null],[12,"latency_buckets","","",40,null],[3,"TxStatsRate","","",null,null],[12,"submitted","","",41,null],[12,"committed","","",41,null],[12,"expired","","",41,null],[12,"latency","","",41,null],[12,"p99_latency","","",41,null],[3,"EmitThreadParams","","",null,null],[12,"wait_millis","","",42,null],[12,"wait_committed","","",42,null],[3,"EmitJobRequest","","",null,null],[12,"instances","","",43,null],[12,"accounts_per_client","","",43,null],[12,"workers_per_ac","","",43,null],[12,"thread_params","","",43,null],[3,"AccountData","","",null,null],[12,"address","","",44,null],[12,"key_pair","","",44,null],[12,"sequence_number","","",44,null],[11,"for_instances","","",43,[[["vec",3],["instance",3],["option",4]]]],[11,"new","","",45,[[["cluster",3]]]],[11,"clear","","",45,[[]]],[11,"submit_single_transaction","","",45,[[["accountdata",3],["instance",3]]]],[11,"start_job","","",45,[[["emitjobrequest",3]]]],[11,"load_faucet_account","","",45,[[["instance",3]]]],[11,"mint_accounts","","",45,[[["emitjobrequest",3]]]],[11,"peek_job_stats","","",45,[[["emitjob",3]],["txstats",3]]],[11,"stop_job","","",45,[[["emitjob",3]]]],[11,"emit_txn_for","","",45,[[["emitjobrequest",3],["duration",3]]]],[11,"query_sequence_numbers","","",45,[[["instance",3],["accountaddress",3]]]],[11,"auth_key_prefix","","",44,[[],["vec",3]]],[11,"rate","","",40,[[["duration",3]],["txstatsrate",3]]],[0,"util","cluster_test","",null,null],[5,"unix_timestamp_now","cluster_test::util","",null,[[],["duration",3]]],[11,"from","cluster_test::atomic_histogram","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","cluster_test::cluster","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","cluster_test::cluster_swarm::cluster_swarm_kube","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","cluster_test::experiments","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_string","","",46,[[],["string",3]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_string","","",48,[[],["string",3]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_string","","",51,[[],["string",3]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_string","","",52,[[],["string",3]]],[11,"borrow","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_string","","",53,[[],["string",3]]],[11,"borrow","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","cluster_test::github","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"initialize","","",15,[[]]],[11,"from","cluster_test::health","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"initialize","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"clear","","",26,[[]]],[11,"initialize","","",26,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","cluster_test::instance","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"equivalent","","",27,[[]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"equivalent","","",28,[[]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"equivalent","","",29,[[]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"equivalent","","",30,[[]]],[11,"vzip","","",30,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"to_string","","",32,[[],["string",3]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"equivalent","","",31,[[]]],[11,"vzip","","",31,[[]]],[11,"from","cluster_test::prometheus","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","cluster_test::report","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"test_only_hash","","",37,[[],["hashvalue",3]]],[11,"clear","","",37,[[]]],[11,"initialize","","",37,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"test_only_hash","","",36,[[],["hashvalue",3]]],[11,"from","cluster_test::slack","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"clear","","",38,[[]]],[11,"initialize","","",38,[[]]],[11,"from","cluster_test::suite","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","cluster_test::tx_emitter","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_string","","",40,[[],["string",3]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"clear","","",40,[[]]],[11,"initialize","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_string","","",41,[[],["string",3]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"clear","","",41,[[]]],[11,"initialize","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"clear","","",42,[[]]],[11,"initialize","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"build","cluster_test::experiments","",8,[[["cluster",3]]]],[11,"build","","",47,[[["cluster",3]]]],[11,"build","","",5,[[["cluster",3]]]],[11,"build","","",50,[[["cluster",3]]]],[11,"build","","",6,[[["cluster",3]]]],[11,"build","","",7,[[["cluster",3]]]],[11,"on_event","cluster_test::health","",21,[[["validatorevent",3],["healthcheckcontext",3]]]],[11,"clear","","",21,[[]]],[11,"name","","",21,[[]]],[11,"on_event","","",23,[[["validatorevent",3],["healthcheckcontext",3]]]],[11,"verify","","",23,[[["healthcheckcontext",3]]]],[11,"invalidate","","",23,[[]]],[11,"name","","",23,[[]]],[11,"remove_all_network_effects","cluster_test::cluster_swarm::cluster_swarm_kube","",3,[[],[["pin",3],["box",3]]]],[11,"spawn_new_instance","","",3,[[["instanceconfig",4]],[["box",3],["pin",3]]]],[11,"delete_all","","",3,[[],[["pin",3],["box",3]]]],[11,"get_grafana_baseurl","","",3,[[],[["box",3],["pin",3]]]],[11,"affected_validators","cluster_test::experiments","",53,[[],[["hashset",3],["string",3]]]],[11,"run","","",53,[[["context",3]],[["pin",3],["box",3]]]],[11,"deadline","","",53,[[],["duration",3]]],[11,"run","","",46,[[["context",3]],[["box",3],["pin",3]]]],[11,"deadline","","",46,[[],["duration",3]]],[11,"affected_validators","","",48,[[],[["hashset",3],["string",3]]]],[11,"run","","",48,[[["context",3]],[["pin",3],["box",3]]]],[11,"deadline","","",48,[[],["duration",3]]],[11,"run","","",49,[[["context",3]],[["box",3],["pin",3]]]],[11,"deadline","","",49,[[],["duration",3]]],[11,"affected_validators","","",51,[[],[["hashset",3],["string",3]]]],[11,"run","","",51,[[["context",3]],[["box",3],["pin",3]]]],[11,"deadline","","",51,[[],["duration",3]]],[11,"affected_validators","","",52,[[],[["hashset",3],["string",3]]]],[11,"run","","",52,[[["context",3]],[["box",3],["pin",3]]]],[11,"deadline","","",52,[[],["duration",3]]],[11,"clone","cluster_test::cluster","",2,[[],["cluster",3]]],[11,"clone","cluster_test::cluster_swarm::cluster_swarm_kube","",3,[[],["clusterswarmkube",3]]],[11,"clone","cluster_test::health","",54,[[],["commit",3]]],[11,"clone","","",19,[[],["event",4]]],[11,"clone","","",55,[[],["validatorevent",3]]],[11,"clone","cluster_test::instance","",31,[[],["instanceconfig",4]]],[11,"clone","","",27,[[],["vaultconfig",3]]],[11,"clone","","",28,[[],["lsrconfig",3]]],[11,"clone","","",29,[[],["validatorconfig",3]]],[11,"clone","","",30,[[],["fullnodeconfig",3]]],[11,"clone","","",32,[[],["instance",3]]],[11,"clone","cluster_test::prometheus","",33,[[],["prometheus",3]]],[11,"clone","cluster_test::tx_emitter","",42,[[],["emitthreadparams",3]]],[11,"clone","","",43,[[],["emitjobrequest",3]]],[11,"clone","","",44,[[],["accountdata",3]]],[11,"default","cluster_test::atomic_histogram","",0,[[],["atomichistogramaccumulator",3]]],[11,"default","","",1,[[],["atomichistogramsnapshot",3]]],[11,"default","cluster_test::github","",15,[[]]],[11,"default","cluster_test::health","",21,[[],["commithistoryhealthcheck",3]]],[11,"default","","",26,[[]]],[11,"default","cluster_test::report","",37,[[],["suitereport",3]]],[11,"default","cluster_test::slack","",38,[[]]],[11,"default","cluster_test::tx_emitter","",40,[[],["txstats",3]]],[11,"default","","",41,[[],["txstatsrate",3]]],[11,"default","","",42,[[]]],[11,"eq","cluster_test::instance","",31,[[["instanceconfig",4]]]],[11,"ne","","",31,[[["instanceconfig",4]]]],[11,"eq","","",27,[[["vaultconfig",3]]]],[11,"ne","","",27,[[["vaultconfig",3]]]],[11,"eq","","",28,[[["lsrconfig",3]]]],[11,"ne","","",28,[[["lsrconfig",3]]]],[11,"eq","","",29,[[["validatorconfig",3]]]],[11,"ne","","",29,[[["validatorconfig",3]]]],[11,"eq","","",30,[[["fullnodeconfig",3]]]],[11,"ne","","",30,[[["fullnodeconfig",3]]]],[11,"fmt","cluster_test::atomic_histogram","",1,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::experiments","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::github","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::health","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::instance","",32,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::tx_emitter","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::experiments","",53,[[["formatter",3]],[["error",3],["result",6]]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],[["error",3],["result",6]]]],[11,"fmt","","",49,[[["formatter",3]],[["error",3],["result",6]]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::instance","",32,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::report","",37,[[["formatter",3]],["result",6]]],[11,"fmt","cluster_test::tx_emitter","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"hash","cluster_test::instance","",31,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"serialize","cluster_test::report","",37,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"deserialize","cluster_test::github","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"clap","cluster_test::experiments","",8,[[],["app",3]]],[11,"from_clap","","",8,[[["argmatches",3]]]],[11,"clap","","",47,[[],["app",3]]],[11,"from_clap","","",47,[[["argmatches",3]]]],[11,"clap","","",5,[[],["app",3]]],[11,"from_clap","","",5,[[["argmatches",3]]]],[11,"clap","","",50,[[],["app",3]]],[11,"from_clap","","",50,[[["argmatches",3]]]],[11,"clap","","",6,[[],["app",3]]],[11,"from_clap","","",6,[[["argmatches",3]]]],[11,"clap","","",7,[[],["app",3]]],[11,"from_clap","","",7,[[["argmatches",3]]]],[11,"augment_clap","","",8,[[["app",3]],["app",3]]],[11,"is_subcommand","","",8,[[]]],[11,"augment_clap","","",47,[[["app",3]],["app",3]]],[11,"is_subcommand","","",47,[[]]],[11,"augment_clap","","",5,[[["app",3]],["app",3]]],[11,"is_subcommand","","",5,[[]]],[11,"augment_clap","","",50,[[["app",3]],["app",3]]],[11,"is_subcommand","","",50,[[]]],[11,"augment_clap","","",6,[[["app",3]],["app",3]]],[11,"is_subcommand","","",6,[[]]],[11,"augment_clap","","",7,[[["app",3]],["app",3]]],[11,"is_subcommand","","",7,[[]]]],"p":[[3,"AtomicHistogramAccumulator"],[3,"AtomicHistogramSnapshot"],[3,"Cluster"],[3,"ClusterSwarmKube"],[8,"ClusterSwarm"],[3,"PerformanceBenchmarkParams"],[3,"RebootRandomValidatorsParams"],[3,"RecoveryTimeParams"],[3,"CpuFlamegraphParams"],[3,"Context"],[8,"Experiment"],[8,"ExperimentParam"],[3,"CommitInfo"],[3,"GitCommitInfo"],[3,"Author"],[3,"GitHub"],[3,"LogTail"],[3,"TraceTail"],[3,"HealthCheckError"],[4,"Event"],[4,"PrintFailures"],[3,"CommitHistoryHealthCheck"],[3,"DebugPortLogWorker"],[3,"LivenessHealthCheck"],[8,"HealthCheck"],[3,"HealthCheckRunner"],[3,"HealthCheckContext"],[3,"VaultConfig"],[3,"LSRConfig"],[3,"ValidatorConfig"],[3,"FullnodeConfig"],[4,"InstanceConfig"],[3,"Instance"],[3,"Prometheus"],[3,"MatrixResponse"],[3,"TimeSeries"],[3,"ReportedMetric"],[3,"SuiteReport"],[3,"SlackClient"],[3,"ExperimentSuite"],[3,"TxStats"],[3,"TxStatsRate"],[3,"EmitThreadParams"],[3,"EmitJobRequest"],[3,"AccountData"],[3,"TxEmitter"],[3,"PacketLossRandomValidators"],[3,"PacketLossRandomValidatorsParams"],[3,"PerformanceBenchmark"],[3,"PerformanceBenchmarkThreeRegionSimulation"],[3,"PerformanceBenchmarkThreeRegionSimulationParams"],[3,"RebootRandomValidators"],[3,"RecoveryTime"],[3,"CpuFlamegraph"],[3,"Commit"],[3,"ValidatorEvent"],[3,"EmitJob"]]},\
"compiled_stdlib":{"doc":"","i":[[4,"StdLibOptions","compiled_stdlib","An enum specifying whether the compiled stdlib/scripts…",null,null],[13,"Compiled","","",0,null],[13,"Fresh","","",0,null],[5,"stdlib_modules","","Returns a reference to the standard library. Depending…",null,[[["stdliboptions",4]]]],[5,"env_stdlib_modules","","Returns a reference to the standard library built by…",null,[[]]],[5,"use_compiled","","A predicate detailing whether the compiled versions of…",null,[[]]],[0,"transaction_scripts","","Rust representation of a Move transaction script that can…",null,null],[3,"CompiledBytes","compiled_stdlib::transaction_scripts","Bytes produced by compiling a Move source language script…",null,null],[4,"StdlibScript","","All of the Move transaction scripts that can be executed…",null,null],[13,"AddValidator","","",1,null],[13,"AddCurrencyToAccount","","",1,null],[13,"AddRecoveryRotationCapability","","",1,null],[13,"Burn","","",1,null],[13,"BurnTxnFees","","",1,null],[13,"CancelBurn","","",1,null],[13,"CreateChildVaspAccount","","",1,null],[13,"CreateDesignatedDealer","","",1,null],[13,"CreateParentVaspAccount","","",1,null],[13,"CreateRecoveryAddress","","",1,null],[13,"CreateValidatorAccount","","",1,null],[13,"EmptyScript","","",1,null],[13,"FreezeAccount","","",1,null],[13,"Mint","","",1,null],[13,"MintLbr","","",1,null],[13,"MintLbrToAddress","","",1,null],[13,"ModifyPublishingOption","","",1,null],[13,"PeerToPeerWithMetadata","","",1,null],[13,"Preburn","","",1,null],[13,"PublishSharedEd2551PublicKey","","",1,null],[13,"RegisterValidator","","",1,null],[13,"RemoveAssociationPrivilege","","",1,null],[13,"RemoveValidator","","",1,null],[13,"RotateAuthenticationKey","","",1,null],[13,"RotateAuthenticationKeyWithNonce","","",1,null],[13,"RotateAuthenticationKeyWithRecoveryAddress","","",1,null],[13,"RotateBaseUrl","","",1,null],[13,"RotateCompliancePublicKey","","",1,null],[13,"RotateValidatorConfig","","",1,null],[13,"RotateConsensusPubkey","","",1,null],[13,"RotateSharedEd2551PublicKey","","",1,null],[13,"TieredMint","","",1,null],[13,"UnfreezeAccount","","",1,null],[13,"UnmintLbr","","",1,null],[13,"UpdateLibraVersion","","",1,null],[13,"UpdateExchangeRate","","",1,null],[13,"UpdateMintingAbility","","",1,null],[11,"all","","Return a vector containing all of the standard library…",1,[[],["vec",3]]],[11,"whitelist","","Construct the whitelist of script hashes used to determine…",1,[[],["vec",3]]],[11,"name","","Return a lowercase-underscore style name for this script",1,[[],["string",3]]],[11,"is","","Return true if `code_bytes` is the bytecode of one of the…",1,[[]]],[11,"compiled_bytes","","Return the Move bytecode produced by compiling this…",1,[[],["compiledbytes",3]]],[11,"hash","","Return the sha3-256 hash of the compiled script bytes",1,[[],["hashvalue",3]]],[11,"hash","","Return the sha3-256 hash of the script bytes",2,[[],["hashvalue",3]]],[11,"into_vec","","Convert this newtype wrapper into a vector of bytes",2,[[],["vec",3]]],[17,"NO_USE_COMPILED","compiled_stdlib","",null,null],[17,"COMPILED_STDLIB_BYTES","","The compiled library needs to be included in the Rust…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","compiled_stdlib::transaction_scripts","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"clone","","",1,[[],["stdlibscript",4]]],[11,"clone","","",2,[[],["compiledbytes",3]]],[11,"eq","","",1,[[["stdlibscript",4]]]],[11,"eq","compiled_stdlib","",0,[[["stdliboptions",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","compiled_stdlib::transaction_scripts","",1,[[["formatter",3]],["result",6]]],[11,"try_from","","Return `Some(<script_name>)` if `code_bytes` is the…",1,[[],["result",6]]]],"p":[[4,"StdLibOptions"],[4,"StdlibScript"],[3,"CompiledBytes"]]},\
"compiler":{"doc":"","i":[[3,"Compiler","compiler","An API for the compiler. Supports setting custom options.",null,null],[12,"address","","The address used as the sender for the compiler.",0,null],[12,"skip_stdlib_deps","","Skip stdlib dependencies if true.",0,null],[12,"extra_deps","","Extra dependencies to compile with.",0,null],[0,"util","","",null,null],[5,"do_compile_module","compiler::util","",null,[[["path",3],["accountaddress",3]]]],[11,"into_compiled_script_and_source_map","compiler","Compiles into a `CompiledScript` where the bytecode hasn\'t…",0,[[],["result",6]]],[11,"into_script_blob","","Compiles the script into a serialized form.",0,[[],[["result",6],["vec",3]]]],[11,"into_compiled_module","","Compiles the module.",0,[[],[["compiledmodule",3],["result",6]]]],[11,"into_module_blob","","Compiles the module into a serialized form.",0,[[],[["result",6],["vec",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"clone","","",0,[[],["compiler",3]]],[11,"default","","",0,[[],["compiler",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"Compiler"]]},\
"config_builder":{"doc":"","i":[[3,"FullNodeConfig","config_builder","",null,null],[12,"advertised_address","","",0,null],[12,"bootstrap","","",0,null],[12,"full_node_index","","",0,null],[12,"full_node_seed","","",0,null],[12,"num_full_nodes","","",0,null],[12,"genesis","","",0,null],[12,"listen_address","","",0,null],[12,"mutual_authentication","","",0,null],[3,"KeyManagerConfig","","",null,null],[12,"rotation_period_secs","","",1,null],[12,"sleep_period_secs","","",1,null],[12,"txn_expiration_secs","","",1,null],[12,"json_rpc_endpoint","","",1,null],[12,"vault_host","","",1,null],[12,"vault_namespace","","",1,null],[12,"vault_token","","",1,null],[12,"template","","",1,null],[3,"SwarmConfig","","",null,null],[12,"config_files","","",2,null],[12,"faucet_key_path","","",2,null],[12,"waypoint","","",2,null],[3,"ValidatorConfig","","",null,null],[12,"advertised_address","","",3,null],[12,"build_waypoint","","",3,null],[12,"bootstrap","","",3,null],[12,"node_index","","",3,null],[12,"listen_address","","",3,null],[12,"num_nodes","","",3,null],[12,"num_nodes_in_genesis","","",3,null],[12,"safety_rules_addr","","",3,null],[12,"safety_rules_backend","","",3,null],[12,"safety_rules_host","","",3,null],[12,"safety_rules_namespace","","",3,null],[12,"safety_rules_token","","",3,null],[12,"seed","","",3,null],[12,"template","","",3,null],[4,"Error","","",null,null],[13,"IndexError","","",4,null],[12,"index","config_builder::Error","",5,null],[12,"nodes","","",5,null],[13,"InvalidSafetyRulesBackend","config_builder","",4,null],[13,"MissingConfigs","","",4,null],[12,"found","config_builder::Error","",6,null],[13,"MissingFullNodeNetwork","config_builder","",4,null],[13,"MissingNetworkKeyPairs","","",4,null],[13,"MissingSafetyRulesHost","","",4,null],[13,"MissingSafetyRulesToken","","",4,null],[13,"MissingValidatorNetwork","","",4,null],[13,"NoConfigs","","",4,null],[13,"NonZeroNetwork","","",4,null],[5,"test_config","","",null,[[]]],[11,"new","","",0,[[]]],[11,"num_validator_nodes","","",0,[[]]],[11,"validator_seed","","",0,[[]]],[11,"template","","",0,[[["nodeconfig",3]]]],[11,"build","","",0,[[],[["nodeconfig",3],["result",6]]]],[11,"extend_validator","","",0,[[["nodeconfig",3]],["result",6]]],[11,"extend","","",0,[[["nodeconfig",3]],["result",6]]],[11,"new","","",1,[[]]],[11,"build","","",1,[[],[["kmconfig",3],["result",6]]]],[11,"build","","",2,[[["pathbuf",3]],["result",6]]],[11,"new","","",3,[[]]],[11,"build","","",3,[[],[["nodeconfig",3],["result",6]]]],[11,"build_set","","",3,[[],[["result",6],["vec",3]]]],[11,"build_faucet_client","","",3,[[],["result",6]]],[11,"build_common","","",3,[[],["result",6]]],[11,"build_faucet_key","","",3,[[]]],[8,"BuildSwarm","","",null,null],[10,"build_swarm","","Generate the configs for a swarm",7,[[],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"build_swarm","","",0,[[],["result",6]]],[11,"build_swarm","","",3,[[],["result",6]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",3,[[]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]]],"p":[[3,"FullNodeConfig"],[3,"KeyManagerConfig"],[3,"SwarmConfig"],[3,"ValidatorConfig"],[4,"Error"],[13,"IndexError"],[13,"MissingConfigs"],[8,"BuildSwarm"]]},\
"consensus":{"doc":"Consensus for the Libra Core blockchain","i":[[5,"gen_consensus_reconfig_subscription","consensus","Creates consensus\'s subscription to reconfiguration…",null,[[]]],[0,"consensus_provider","","LibraBFT implementation",null,null],[5,"start_consensus","consensus::consensus_provider","Helper function to start consensus based on configuration…",null,[[["statesyncclient",3],["receiver",3],["consensusnetworkevents",6],["arc",3],["consensusnetworksender",3],["nodeconfig",3],["arc",3],["sender",3],["consensusrequest",4],["dbreader",8],["onchainconfigpayload",3]],["runtime",3]]],[0,"network_interface","consensus","LibraNet interface. Interface between Consensus and…",null,null],[3,"ConsensusNetworkSender","consensus::network_interface","The interface from Consensus to Networking layer.",null,null],[4,"ConsensusMsg","","Network type for consensus",null,null],[13,"BlockRetrievalRequest","","RPC to get a chain of block of the given length starting…",0,null],[13,"BlockRetrievalResponse","","Carries the returned blocks and the retrieval status.",0,null],[13,"EpochRetrievalRequest","","Request to get a EpochChangeProof from current_epoch to…",0,null],[13,"ProposalMsg","","ProposalMsg contains the required information for the…",0,null],[13,"SyncInfo","","This struct describes basic synchronization metadata.",0,null],[13,"EpochChangeProof","","A vector of LedgerInfo with contiguous increasing epoch…",0,null],[13,"VoteMsg","","VoteMsg is the struct that is ultimately sent by the voter…",0,null],[5,"add_to_network","","Create a new Sender that only sends for the…",null,[[["networkbuilder",3]]]],[6,"ConsensusNetworkEvents","","The interface from Network to Consensus layer.",null,null],[11,"new","","Returns a Sender that only sends for the…",1,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"send_to","","Send a single message to the destination peer using the…",1,[[["peerid",3],["consensusmsg",4]],[["networkerror",3],["result",4]]]],[11,"send_to_many","","Send a single message to the destination peers using the…",1,[[["consensusmsg",4]],[["networkerror",3],["result",4]]]],[11,"send_rpc","","Send a RPC to the destination peer using the…",1,[[["duration",3],["peerid",3],["consensusmsg",4]]]],[0,"round_manager_fuzzing","consensus","",null,null],[5,"generate_corpus_proposal","consensus::round_manager_fuzzing","",null,[[],["vec",3]]],[5,"fuzz_proposal","","",null,[[]]],[11,"from","consensus::network_interface","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["consensusmsg",4]]],[11,"clone","","",1,[[],["consensusnetworksender",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]]],"p":[[4,"ConsensusMsg"],[3,"ConsensusNetworkSender"]]},\
"consensus_types":{"doc":"","i":[[0,"block","consensus_types","",null,null],[3,"Block","consensus_types::block","Block has the core data of a consensus block that should…",null,null],[0,"block_test_utils","","",null,null],[5,"new_proposal","consensus_types::block::block_test_utils","This strategy is a swiss-army tool to produce a low-level…",null,[[["hashvalue",3],["quorumcert",3]]]],[5,"genesis_strategy","","This produces the genesis block",null,[[]]],[5,"unmoored_block","","This produces an unmoored block, with arbitrary parent &…",null,[[]]],[5,"leaf_strategy","","Offers the genesis block.",null,[[]]],[5,"fake_id","","This produces a block with an invalid id (and therefore…",null,[[]]],[5,"some_round","","This produces a round that is often higher than the…",null,[[["round",6]]]],[5,"block_forest_and_its_keys","","This returns keys and a block forest created from them",null,[[]]],[5,"get_current_timestamp","","",null,[[],["duration",3]]],[5,"placeholder_ledger_info","","",null,[[],["ledgerinfo",3]]],[5,"gen_test_certificate","","",null,[[["blockinfo",3],["vec",3],["option",4],["validatorsigner",3]],["quorumcert",3]]],[5,"placeholder_certificate_for_block","","",null,[[["vec",3],["hashvalue",3],["validatorsigner",3]],["quorumcert",3]]],[5,"certificate_for_genesis","","",null,[[],["quorumcert",3]]],[5,"random_payload","","",null,[[],["payload",6]]],[11,"author","consensus_types::block","",0,[[],[["option",4],["author",6]]]],[11,"epoch","","",0,[[]]],[11,"id","","",0,[[],["hashvalue",3]]],[11,"parent_id","","",0,[[],["hashvalue",3]]],[11,"payload","","",0,[[],[["option",4],["payload",6]]]],[11,"quorum_cert","","",0,[[],["quorumcert",3]]],[11,"round","","",0,[[],["round",6]]],[11,"signature","","",0,[[],[["ed25519signature",3],["option",4]]]],[11,"timestamp_usecs","","",0,[[]]],[11,"gen_block_info","","",0,[[["option",4],["hashvalue",3],["epochstate",3],["version",6]],["blockinfo",3]]],[11,"block_data","","",0,[[],["blockdata",3]]],[11,"is_genesis_block","","",0,[[]]],[11,"is_nil_block","","",0,[[]]],[11,"make_genesis_block","","",0,[[]]],[11,"make_genesis_block_from_ledger_info","","Construct new genesis block for next epoch…",0,[[["ledgerinfo",3]]]],[11,"new_nil","","The NIL blocks are special: they\'re not carrying any real…",0,[[["round",6],["quorumcert",3]]]],[11,"new_proposal","","",0,[[["payload",6],["quorumcert",3],["round",6],["validatorsigner",3]]]],[11,"new_proposal_from_block_data","","",0,[[["blockdata",3],["validatorsigner",3]]]],[11,"validate_signatures","","Verifies that the proposal and the QC are correctly…",0,[[["validatorverifier",3]],["result",6]]],[11,"verify_well_formed","","Makes sure that the proposal makes sense, independently of…",0,[[],["result",6]]],[0,"block_data","consensus_types","",null,null],[3,"BlockData","consensus_types::block_data","Block has the core data of a consensus block that should…",null,null],[3,"BlockDataHasher","","",null,null],[4,"BlockType","","",null,null],[13,"Proposal","","",1,null],[12,"payload","consensus_types::block_data::BlockType","T of the block (e.g. one or more transaction(s)",2,null],[12,"author","","Author of the block that can be validated by the author\'s…",2,null],[13,"NilBlock","consensus_types::block_data","NIL blocks don\'t have authors or signatures: they\'re…",1,null],[13,"Genesis","","A genesis block is the first committed block in any epoch…",1,null],[11,"author","","",3,[[],[["option",4],["author",6]]]],[11,"block_type","","",3,[[],["blocktype",4]]],[11,"epoch","","",3,[[]]],[11,"parent_id","","",3,[[],["hashvalue",3]]],[11,"payload","","",3,[[],[["option",4],["payload",6]]]],[11,"round","","",3,[[],["round",6]]],[11,"timestamp_usecs","","",3,[[]]],[11,"quorum_cert","","",3,[[],["quorumcert",3]]],[11,"is_genesis_block","","",3,[[]]],[11,"is_nil_block","","",3,[[]]],[11,"new_genesis_from_ledger_info","","",3,[[["ledgerinfo",3]]]],[11,"new_genesis","","",3,[[["quorumcert",3]]]],[11,"new_nil","","",3,[[["round",6],["quorumcert",3]]]],[11,"new_proposal","","",3,[[["payload",6],["quorumcert",3],["round",6],["author",6]]]],[0,"block_retrieval","consensus_types","",null,null],[3,"BlockRetrievalRequest","consensus_types::block_retrieval","RPC to get a chain of block of the given length starting…",null,null],[3,"BlockRetrievalResponse","","Carries the returned blocks and the retrieval status.",null,null],[4,"BlockRetrievalStatus","","",null,null],[13,"Succeeded","","",4,null],[13,"IdNotFound","","",4,null],[13,"NotEnoughBlocks","","",4,null],[11,"new","","",5,[[["hashvalue",3]]]],[11,"block_id","","",5,[[],["hashvalue",3]]],[11,"num_blocks","","",5,[[]]],[11,"new","","",6,[[["block",3],["vec",3],["blockretrievalstatus",4]]]],[11,"status","","",6,[[],["blockretrievalstatus",4]]],[11,"blocks","","",6,[[],["vec",3]]],[11,"verify","","",6,[[["hashvalue",3],["validatorverifier",3]],["result",6]]],[0,"common","consensus_types","",null,null],[6,"Round","consensus_types::common","The round of a block is a consensus-internal counter,…",null,null],[6,"Author","","Author refers to the author\'s account address",null,null],[6,"Payload","","The payload in block.",null,null],[0,"epoch_retrieval","consensus_types","",null,null],[3,"EpochRetrievalRequest","consensus_types::epoch_retrieval","Request to get a EpochChangeProof from current_epoch to…",null,null],[12,"start_epoch","","",7,null],[12,"end_epoch","","",7,null],[0,"executed_block","consensus_types","",null,null],[3,"ExecutedBlock","consensus_types::executed_block","ExecutedBlocks are managed in a speculative tree, the…",null,null],[11,"new","","",8,[[["statecomputeresult",3],["block",3]]]],[11,"block","","",8,[[],["block",3]]],[11,"epoch","","",8,[[]]],[11,"id","","",8,[[],["hashvalue",3]]],[11,"payload","","",8,[[],[["option",4],["payload",6]]]],[11,"parent_id","","",8,[[],["hashvalue",3]]],[11,"quorum_cert","","",8,[[],["quorumcert",3]]],[11,"round","","",8,[[],["round",6]]],[11,"timestamp_usecs","","",8,[[]]],[11,"compute_result","","",8,[[],["statecomputeresult",3]]],[11,"block_info","","",8,[[],["blockinfo",3]]],[0,"proposal_msg","consensus_types","",null,null],[3,"ProposalMsg","consensus_types::proposal_msg","ProposalMsg contains the required information for the…",null,null],[11,"new","","Creates a new proposal.",9,[[["block",3],["syncinfo",3]]]],[11,"epoch","","",9,[[]]],[11,"verify_well_formed","","Verifies that the ProposalMsg is well-formed.",9,[[],["result",6]]],[11,"verify","","",9,[[["validatorverifier",3]],["result",6]]],[11,"proposal","","",9,[[],["block",3]]],[11,"take_proposal","","",9,[[],["block",3]]],[11,"sync_info","","",9,[[],["syncinfo",3]]],[11,"round","","",9,[[],["round",6]]],[11,"proposer","","",9,[[],["author",6]]],[0,"quorum_cert","consensus_types","",null,null],[3,"QuorumCert","consensus_types::quorum_cert","",null,null],[11,"new","","",10,[[["votedata",3],["ledgerinfowithsignatures",4]]]],[11,"vote_data","","",10,[[],["votedata",3]]],[11,"certified_block","","",10,[[],["blockinfo",3]]],[11,"parent_block","","",10,[[],["blockinfo",3]]],[11,"ledger_info","","",10,[[],["ledgerinfowithsignatures",4]]],[11,"commit_info","","",10,[[],["blockinfo",3]]],[11,"ends_epoch","","If the QC commits reconfiguration and starts a new epoch",10,[[]]],[11,"certificate_for_genesis_from_ledger_info","","QuorumCert for the genesis block deterministically…",10,[[["hashvalue",3],["ledgerinfo",3]],["quorumcert",3]]],[11,"verify","","",10,[[["validatorverifier",3]],["result",6]]],[0,"sync_info","consensus_types","",null,null],[3,"SyncInfo","consensus_types::sync_info","This struct describes basic synchronization metadata.",null,null],[11,"new","","",11,[[["timeoutcertificate",3],["option",4],["quorumcert",3]]]],[11,"highest_quorum_cert","","Highest quorum certificate",11,[[],["quorumcert",3]]],[11,"highest_commit_cert","","Highest ledger info",11,[[],["quorumcert",3]]],[11,"highest_timeout_certificate","","Highest timeout certificate if available",11,[[],[["timeoutcertificate",3],["option",4]]]],[11,"highest_certified_round","","",11,[[],["round",6]]],[11,"highest_timeout_round","","",11,[[],["round",6]]],[11,"highest_commit_round","","",11,[[],["round",6]]],[11,"highest_round","","The highest round the SyncInfo carries.",11,[[],["round",6]]],[11,"verify","","",11,[[["validatorverifier",3]],["result",6]]],[11,"epoch","","",11,[[]]],[11,"has_newer_certificates","","",11,[[["syncinfo",3]]]],[0,"timeout","consensus_types","",null,null],[3,"Timeout","consensus_types::timeout","This structure contains all the information necessary to…",null,null],[3,"TimeoutHasher","","",null,null],[11,"new","","",12,[[["round",6]]]],[11,"epoch","","",12,[[]]],[11,"round","","",12,[[],["round",6]]],[11,"sign","","",12,[[["validatorsigner",3]],["ed25519signature",3]]],[0,"timeout_certificate","consensus_types","",null,null],[3,"TimeoutCertificate","consensus_types::timeout_certificate","TimeoutCertificate is a proof that 2f+1 participants in…",null,null],[11,"new","","Creates new TimeoutCertificate",13,[[["timeout",3]]]],[11,"verify","","Verifies the signatures for the round",13,[[["validatorverifier",3]],["result",6]]],[11,"epoch","","Returns the epoch of the timeout certificate",13,[[]]],[11,"round","","Returns the round of the timeout certificate",13,[[],["round",6]]],[11,"signatures","","Returns the signatures certifying the round",13,[[],["btreemap",3]]],[11,"add_signature","","",13,[[["ed25519signature",3],["author",6]]]],[11,"remove_signature","","",13,[[["author",6]]]],[0,"vote","consensus_types","",null,null],[3,"Vote","consensus_types::vote","Vote is the struct that is ultimately sent by the voter in…",null,null],[11,"new","","Generates a new Vote corresponding to the \\\"fast-vote\\\" path…",14,[[["validatorsigner",3],["ledgerinfo",3],["votedata",3],["author",6]]]],[11,"add_timeout_signature","","Generates a round signature, which can then be used for…",14,[[["ed25519signature",3]]]],[11,"vote_data","","",14,[[],["votedata",3]]],[11,"author","","Return the author of the vote",14,[[],["author",6]]],[11,"ledger_info","","Return the LedgerInfo associated with this vote",14,[[],["ledgerinfo",3]]],[11,"signature","","Return the signature of the vote",14,[[],["ed25519signature",3]]],[11,"timeout","","Returns the hash of the data represent by a timeout proposal",14,[[],["timeout",3]]],[11,"epoch","","Return the epoch of the vote",14,[[]]],[11,"timeout_signature","","Returns the signature for the…",14,[[],[["ed25519signature",3],["option",4]]]],[11,"is_timeout","","The vote message is considered a timeout vote message if…",14,[[]]],[11,"verify","","Verifies that the consensus data hash of LedgerInfo…",14,[[["validatorverifier",3]],["result",6]]],[0,"vote_data","consensus_types","",null,null],[3,"VoteData","consensus_types::vote_data","VoteData keeps the information about the block, and its…",null,null],[3,"VoteDataHasher","","",null,null],[11,"new","","",15,[[["blockinfo",3]]]],[11,"parent","","Contains all the block information needed for voting for…",15,[[],["blockinfo",3]]],[11,"proposed","","Contains all the block information for the parent for the…",15,[[],["blockinfo",3]]],[11,"verify","","",15,[[],["result",6]]],[0,"vote_msg","consensus_types","",null,null],[3,"VoteMsg","consensus_types::vote_msg","VoteMsg is the struct that is ultimately sent by the voter…",null,null],[11,"new","","",16,[[["vote",3],["syncinfo",3]]]],[11,"vote","","Container for actual voting material",16,[[],["vote",3]]],[11,"sync_info","","SyncInfo of the given vote message",16,[[],["syncinfo",3]]],[11,"epoch","","",16,[[]]],[11,"proposed_block_id","","",16,[[],["hashvalue",3]]],[11,"verify","","",16,[[["validatorverifier",3]],["result",6]]],[0,"vote_proposal","consensus_types","",null,null],[3,"VoteProposal","consensus_types::vote_proposal","This structure contains all the information needed by…",null,null],[11,"new","","",17,[[["option",4],["accumulatorextensionproof",3],["epochstate",3],["block",3],["transactionaccumulatorhasher",3]]]],[11,"accumulator_extension_proof","","",17,[[],["accumulatorextensionproof",3]]],[11,"block","","",17,[[],["block",3]]],[11,"next_epoch_state","","",17,[[],[["epochstate",3],["option",4]]]],[11,"from","consensus_types::block","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","consensus_types::block_data","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"clear","","",18,[[]]],[11,"initialize","","",18,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"from","consensus_types::block_retrieval","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","consensus_types::epoch_retrieval","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","consensus_types::executed_block","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","consensus_types::proposal_msg","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"from","consensus_types::quorum_cert","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"from","consensus_types::sync_info","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"test_only_hash","","",11,[[],["hashvalue",3]]],[11,"vzip","","",11,[[]]],[11,"from","consensus_types::timeout","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"test_only_hash","","",12,[[],["hashvalue",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"clear","","",19,[[]]],[11,"initialize","","",19,[[]]],[11,"from","consensus_types::timeout_certificate","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"test_only_hash","","",13,[[],["hashvalue",3]]],[11,"vzip","","",13,[[]]],[11,"from","consensus_types::vote","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"test_only_hash","","",14,[[],["hashvalue",3]]],[11,"vzip","","",14,[[]]],[11,"from","consensus_types::vote_data","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"test_only_hash","","",15,[[],["hashvalue",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"initialize","","",20,[[]]],[11,"from","consensus_types::vote_msg","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"test_only_hash","","",16,[[],["hashvalue",3]]],[11,"vzip","","",16,[[]]],[11,"from","consensus_types::vote_proposal","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"test_only_hash","","",17,[[],["hashvalue",3]]],[11,"vzip","","",17,[[]]],[11,"clone","consensus_types::block","",0,[[],["block",3]]],[11,"clone","consensus_types::block_data","",1,[[],["blocktype",4]]],[11,"clone","","",3,[[],["blockdata",3]]],[11,"clone","","",18,[[],["blockdatahasher",3]]],[11,"clone","consensus_types::block_retrieval","",5,[[],["blockretrievalrequest",3]]],[11,"clone","","",4,[[],["blockretrievalstatus",4]]],[11,"clone","","",6,[[],["blockretrievalresponse",3]]],[11,"clone","consensus_types::epoch_retrieval","",7,[[],["epochretrievalrequest",3]]],[11,"clone","consensus_types::executed_block","",8,[[],["executedblock",3]]],[11,"clone","consensus_types::proposal_msg","",9,[[],["proposalmsg",3]]],[11,"clone","consensus_types::quorum_cert","",10,[[],["quorumcert",3]]],[11,"clone","consensus_types::sync_info","",11,[[],["syncinfo",3]]],[11,"clone","consensus_types::timeout","",12,[[],["timeout",3]]],[11,"clone","","",19,[[],["timeouthasher",3]]],[11,"clone","consensus_types::timeout_certificate","",13,[[],["timeoutcertificate",3]]],[11,"clone","consensus_types::vote","",14,[[],["vote",3]]],[11,"clone","consensus_types::vote_data","",15,[[],["votedata",3]]],[11,"clone","","",20,[[],["votedatahasher",3]]],[11,"clone","consensus_types::vote_msg","",16,[[],["votemsg",3]]],[11,"clone","consensus_types::vote_proposal","",17,[[],["voteproposal",3]]],[11,"default","consensus_types::block_data","",18,[[]]],[11,"default","consensus_types::timeout","",19,[[]]],[11,"default","consensus_types::vote_data","",20,[[]]],[11,"eq","consensus_types::block","",0,[[["block",3]]]],[11,"ne","","",0,[[["block",3]]]],[11,"eq","consensus_types::block_data","",1,[[["blocktype",4]]]],[11,"ne","","",1,[[["blocktype",4]]]],[11,"eq","","",3,[[["blockdata",3]]]],[11,"ne","","",3,[[["blockdata",3]]]],[11,"eq","consensus_types::block_retrieval","",5,[[["blockretrievalrequest",3]]]],[11,"ne","","",5,[[["blockretrievalrequest",3]]]],[11,"eq","","",4,[[["blockretrievalstatus",4]]]],[11,"eq","","",6,[[["blockretrievalresponse",3]]]],[11,"ne","","",6,[[["blockretrievalresponse",3]]]],[11,"eq","consensus_types::executed_block","",8,[[["executedblock",3]]]],[11,"ne","","",8,[[["executedblock",3]]]],[11,"eq","consensus_types::proposal_msg","",9,[[["proposalmsg",3]]]],[11,"ne","","",9,[[["proposalmsg",3]]]],[11,"eq","consensus_types::quorum_cert","",10,[[["quorumcert",3]]]],[11,"ne","","",10,[[["quorumcert",3]]]],[11,"eq","consensus_types::sync_info","",11,[[["syncinfo",3]]]],[11,"ne","","",11,[[["syncinfo",3]]]],[11,"eq","consensus_types::timeout","",12,[[["timeout",3]]]],[11,"ne","","",12,[[["timeout",3]]]],[11,"eq","consensus_types::timeout_certificate","",13,[[["timeoutcertificate",3]]]],[11,"ne","","",13,[[["timeoutcertificate",3]]]],[11,"eq","consensus_types::vote","",14,[[["vote",3]]]],[11,"ne","","",14,[[["vote",3]]]],[11,"eq","consensus_types::vote_data","",15,[[["votedata",3]]]],[11,"ne","","",15,[[["votedata",3]]]],[11,"eq","consensus_types::vote_msg","",16,[[["votemsg",3]]]],[11,"ne","","",16,[[["votemsg",3]]]],[11,"fmt","consensus_types::block","",0,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::block_data","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::block_retrieval","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::epoch_retrieval","",7,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::executed_block","",8,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::proposal_msg","",9,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::quorum_cert","",10,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::sync_info","",11,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::timeout","",12,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::timeout_certificate","",13,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote","",14,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote_data","",15,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote_msg","",16,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::block","",0,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::block_retrieval","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::executed_block","",8,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::proposal_msg","",9,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::quorum_cert","",10,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::sync_info","",11,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::timeout","",12,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::timeout_certificate","",13,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote","",14,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote_data","",15,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote_msg","",16,[[["formatter",3]],["result",6]]],[11,"fmt","consensus_types::vote_proposal","",17,[[["formatter",3]],["result",6]]],[11,"write","consensus_types::block_data","",18,[[],["result",6]]],[11,"flush","","",18,[[],["result",6]]],[11,"write","consensus_types::timeout","",19,[[],["result",6]]],[11,"flush","","",19,[[],["result",6]]],[11,"write","consensus_types::vote_data","",20,[[],["result",6]]],[11,"flush","","",20,[[],["result",6]]],[11,"hash","consensus_types::block_data","",3,[[],["hashvalue",3]]],[11,"hash","consensus_types::timeout","",12,[[],["hashvalue",3]]],[11,"hash","consensus_types::vote_data","",15,[[],["hashvalue",3]]],[11,"seed","consensus_types::block_data","",18,[[]]],[11,"update","","",18,[[]]],[11,"finish","","",18,[[],["hashvalue",3]]],[11,"seed","consensus_types::timeout","",19,[[]]],[11,"update","","",19,[[]]],[11,"finish","","",19,[[],["hashvalue",3]]],[11,"seed","consensus_types::vote_data","",20,[[]]],[11,"update","","",20,[[]]],[11,"finish","","",20,[[],["hashvalue",3]]],[11,"serialize","consensus_types::block","",0,[[],["result",4]]],[11,"serialize","consensus_types::block_data","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","consensus_types::block_retrieval","",5,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","consensus_types::epoch_retrieval","",7,[[],["result",4]]],[11,"serialize","consensus_types::proposal_msg","",9,[[],["result",4]]],[11,"serialize","consensus_types::quorum_cert","",10,[[],["result",4]]],[11,"serialize","consensus_types::sync_info","",11,[[],["result",4]]],[11,"serialize","consensus_types::timeout","",12,[[],["result",4]]],[11,"serialize","consensus_types::timeout_certificate","",13,[[],["result",4]]],[11,"serialize","consensus_types::vote","",14,[[],["result",4]]],[11,"serialize","consensus_types::vote_data","",15,[[],["result",4]]],[11,"serialize","consensus_types::vote_msg","",16,[[],["result",4]]],[11,"serialize","consensus_types::vote_proposal","",17,[[],["result",4]]],[11,"deserialize","consensus_types::block","",0,[[],["result",4]]],[11,"deserialize","consensus_types::block_data","",1,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","consensus_types::block_retrieval","",5,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","consensus_types::epoch_retrieval","",7,[[],["result",4]]],[11,"deserialize","consensus_types::proposal_msg","",9,[[],["result",4]]],[11,"deserialize","consensus_types::quorum_cert","",10,[[],["result",4]]],[11,"deserialize","consensus_types::sync_info","",11,[[],["result",4]]],[11,"deserialize","consensus_types::timeout","",12,[[],["result",4]]],[11,"deserialize","consensus_types::timeout_certificate","",13,[[],["result",4]]],[11,"deserialize","consensus_types::vote","",14,[[],["result",4]]],[11,"deserialize","consensus_types::vote_data","",15,[[],["result",4]]],[11,"deserialize","consensus_types::vote_msg","",16,[[],["result",4]]],[11,"deserialize","consensus_types::vote_proposal","",17,[[],["result",4]]]],"p":[[3,"Block"],[4,"BlockType"],[13,"Proposal"],[3,"BlockData"],[4,"BlockRetrievalStatus"],[3,"BlockRetrievalRequest"],[3,"BlockRetrievalResponse"],[3,"EpochRetrievalRequest"],[3,"ExecutedBlock"],[3,"ProposalMsg"],[3,"QuorumCert"],[3,"SyncInfo"],[3,"Timeout"],[3,"TimeoutCertificate"],[3,"Vote"],[3,"VoteData"],[3,"VoteMsg"],[3,"VoteProposal"],[3,"BlockDataHasher"],[3,"TimeoutHasher"],[3,"VoteDataHasher"]]},\
"crash_handler":{"doc":"","i":[[3,"CrashInfo","crash_handler","",null,null],[5,"setup_panic_handler","","Invoke to ensure process exits on a thread panic.",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]]],"p":[[3,"CrashInfo"]]},\
"datatest_stable":{"doc":"`datatest-stable` is a very simple test harness intended…","i":[[3,"Requirements","datatest_stable","",null,null],[5,"runner","","",null,[[]]],[11,"new","","",0,[[["string",3]]]],[0,"utils","","",null,null],[5,"iterate_directory","datatest_stable::utils","Helper function to iterate through all the files in the…",null,[[["path",3]]]],[5,"derive_test_name","","",null,[[["path",3]],["string",3]]],[6,"Result","datatest_stable","",null,null],[14,"harness","","`datatest-stable` test harness entry point. Should be…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]]],"p":[[3,"Requirements"]]},\
"debug_interface":{"doc":"","i":[[3,"NodeDebugClient","debug_interface","Implement default utility client for NodeDebugInterface",null,null],[3,"AsyncNodeDebugClient","","Implement default utility client for AsyncNodeDebugInterface",null,null],[0,"json_log","","",null,null],[3,"JsonLogEntry","debug_interface::json_log","",null,null],[12,"name","","",0,null],[12,"timestamp","","",0,null],[12,"json","","",0,null],[5,"send_json_log","","Sends event to event stream.",null,[[["jsonlogentry",3]]]],[5,"pop_last_entries","","Get up to MAX_EVENTS_IN_QUEUE last events and clears the…",null,[[],[["jsonlogentry",3],["vec",3]]]],[11,"new","","",0,[[["value",4]]]],[0,"libra_trace","debug_interface","",null,null],[3,"TraceBlockGuard","debug_interface::libra_trace","",null,null],[5,"random_node","","",null,[[],[["string",3],["option",4]]]],[5,"trace_node","","",null,[[]]],[17,"TRACE_EVENT","","",null,null],[17,"TRACE_EDGE","","",null,null],[11,"new_entered","","",1,[[["string",3]],["traceblockguard",3]]],[0,"node_debug_service","debug_interface","Debug interface to access information in a specific node.",null,null],[3,"NodeDebugService","debug_interface::node_debug_service","",null,null],[11,"new","","",2,[[["socketaddr",4]]]],[0,"prelude","debug_interface","",null,null],[11,"new","","Create NodeDebugInterfaceClient from a valid socket address.",3,[[["asref",8]]]],[11,"get_node_metric","","",3,[[["asref",8]],[["result",6],["option",4]]]],[11,"get_node_metrics","","",3,[[],[["hashmap",3],["result",6]]]],[11,"get_events","","",3,[[],[["vec",3],["result",6]]]],[11,"new","","Create AsyncNodeDebugInterface from a valid socket address.",4,[[["asref",8],["client",3]]]],[11,"get_node_metric","","",4,[[["asref",8]]]],[11,"get_node_metrics","","",4,[[]]],[11,"get_events","","",4,[[]]],[14,"event","","Writes event to event stream Example: event!(\\\"committed\\\",…",null,null],[14,"trace_event","","",null,null],[14,"trace_code_block","","",null,null],[14,"end_trace","","",null,null],[14,"trace_edge","","",null,null],[14,"format_node","","",null,null],[14,"__trace_fmt_gen","","",null,null],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","debug_interface::json_log","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","debug_interface::libra_trace","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","debug_interface::node_debug_service","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"drop","debug_interface::libra_trace","",1,[[]]],[11,"fmt","debug_interface::node_debug_service","",2,[[["formatter",3]],["result",6]]],[11,"serialize","debug_interface::json_log","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"JsonLogEntry"],[3,"TraceBlockGuard"],[3,"NodeDebugService"],[3,"NodeDebugClient"],[3,"AsyncNodeDebugClient"]]},\
"disassembler":{"doc":"","i":[[0,"disassembler","disassembler","",null,null],[3,"DisassemblerOptions","disassembler::disassembler","Holds the various options that we support while…",null,null],[12,"only_public","","Only print public functions",0,null],[12,"print_code","","Print the bytecode for the instructions within the function.",0,null],[12,"print_basic_blocks","","Print the basic blocks of the bytecode.",0,null],[12,"print_locals","","Print the locals inside each function body.",0,null],[3,"Disassembler","","",null,null],[11,"new","","",0,[[]]],[11,"new","","",1,[[["disassembleroptions",3],["sourcemapping",3]]]],[11,"add_coverage_map","","",1,[[["coveragemap",3]]]],[11,"disassemble_function_def","","",1,[[["functiondefinitionindex",3]],[["string",3],["result",6]]]],[11,"disassemble_struct_def","","",1,[[["structdefinitionindex",3]],[["string",3],["result",6]]]],[11,"disassemble","","",1,[[],[["string",3],["result",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"default","","",0,[[],["disassembleroptions",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"DisassemblerOptions"],[3,"Disassembler"]]},\
"docgen":{"doc":"","i":[[0,"docgen","docgen","",null,null],[3,"DocgenOptions","docgen::docgen","Options passed into the documentation generator.",null,null],[12,"section_level_start","","The level where we start sectioning. Often markdown…",0,null],[12,"include_private_fun","","Whether to include private functions in the generated docs.",0,null],[12,"include_specs","","Whether to include specifications in the generated docs.",0,null],[12,"specs_inlined","","Whether to put specifications in the same section as a…",0,null],[12,"include_impl","","Whether to include Move implementations.",0,null],[12,"toc_depth","","Max depth to which sections are displayed in…",0,null],[12,"collapsed_sections","","Whether to use collapsed sections () for impl and specs",0,null],[12,"output_directory","","In which directory to store output.",0,null],[12,"doc_path","","In which directories to look for references.",0,null],[3,"Docgen","","The documentation generator.",null,null],[11,"new","","Creates a new documentation generator.",1,[[["globalenv",3],["docgenoptions",3]]]],[11,"into_result","","Returns the result of documentation generation, a vector…",1,[[],["vec",3]]],[11,"gen","","Generate documentation for all modules in the environment…",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clone","","",0,[[],["docgenoptions",3]]],[11,"default","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"DocgenOptions"],[3,"Docgen"]]},\
"execution_correctness":{"doc":"","i":[[3,"ExecutionCorrectnessManager","execution_correctness","",null,null],[3,"Process","","",null,null],[11,"new","","",0,[[["nodeconfig",3]]]],[11,"new_local","","",0,[[["socketaddr",4]]]],[11,"new_process","","",0,[[["socketaddr",4]]]],[11,"new_serializer","","",0,[[["socketaddr",4]]]],[11,"new_spawned_process","","",0,[[["nodeconfig",3]]]],[11,"new_thread","","",0,[[["socketaddr",4]]]],[11,"client","","",0,[[],[["blockexecutor",8],["box",3]]]],[11,"new","","",1,[[["nodeconfig",3]]]],[11,"start","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]]],"p":[[3,"ExecutionCorrectnessManager"],[3,"Process"]]},\
"executor":{"doc":"","i":[[3,"Executor","executor","`Executor` implements all functionalities the execution…",null,null],[0,"db_bootstrapper","","",null,null],[3,"GenesisCommitter","executor::db_bootstrapper","",null,null],[5,"bootstrap_db_if_empty","","",null,[[["dbreaderwriter",3],["transaction",4]],[["result",6],["option",4]]]],[5,"calculate_genesis","","",null,[[["dbreaderwriter",3],["transaction",4],["treestate",3]],[["result",6],["genesiscommitter",3]]]],[11,"new","","",0,[[["ledgerinfowithsignatures",4],["executor",3]],["result",6]]],[11,"waypoint","","",0,[[],["waypoint",3]]],[11,"commit","","",0,[[],["result",6]]],[11,"committed_block_id","executor","",1,[[],["hashvalue",3]]],[11,"new","","Constructs an `Executor`.",1,[[["dbreaderwriter",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","executor::db_bootstrapper","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"execute_and_commit_chunk","executor","",1,[[["transactionlistwithproof",3],["ledgerinfowithsignatures",4],["option",4]],[["result",6],["vec",3]]]],[11,"committed_block_id","","",1,[[],[["hashvalue",3],["error",4],["result",6]]]],[11,"reset","","",1,[[],[["result",6],["error",4]]]],[11,"execute_block","","",1,[[["hashvalue",3]],[["result",6],["statecomputeresult",3],["error",4]]]],[11,"commit_blocks","","",1,[[["vec",3],["hashvalue",3],["ledgerinfowithsignatures",4]],[["result",6],["error",4]]]]],"p":[[3,"GenesisCommitter"],[3,"Executor"]]},\
"executor_benchmark":{"doc":"","i":[[5,"run_benchmark","executor_benchmark","Runs the benchmark with given parameters.",null,[[["option",4],["pathbuf",3]]]]],"p":[]},\
"executor_test_helpers":{"doc":"","i":[[5,"gen_block_id","executor_test_helpers","",null,[[],["hashvalue",3]]],[5,"gen_ledger_info_with_sigs","","",null,[[["validatorsigner",3],["vec",3],["hashvalue",3],["statecomputeresult",3]],["ledgerinfowithsignatures",4]]],[5,"extract_signer","","",null,[[["nodeconfig",3]],["validatorsigner",3]]],[5,"gen_block_metadata","","",null,[[["accountaddress",3]],["blockmetadata",3]]],[5,"get_test_signed_transaction","","",null,[[["accountaddress",3],["option",4],["script",3],["ed25519publickey",3],["ed25519privatekey",3]],["transaction",4]]]],"p":[]},\
"executor_types":{"doc":"","i":[[3,"StateComputeResult","executor_types","A structure that summarizes the result of the execution…",null,null],[3,"TransactionData","","The entire set of data associated with a transaction. In…",null,null],[3,"ProcessedVMOutput","","The output of Processing the vm output of a series of…",null,null],[3,"ExecutedTrees","","A wrapper of the in-memory state sparse merkle tree and…",null,null],[3,"ProofReader","","",null,null],[4,"Error","","Different reasons for proposal rejection",null,null],[13,"BlockNotFound","","",0,null],[13,"InternalError","","",0,null],[12,"error","executor_types::Error","",1,null],[13,"SerializationError","executor_types","",0,null],[8,"ChunkExecutor","","",null,null],[10,"execute_and_commit_chunk","","Verifies the transactions based on the provided proofs and…",2,[[["ledgerinfowithsignatures",4],["option",4],["transactionlistwithproof",3]],[["vec",3],["result",6]]]],[8,"BlockExecutor","","",null,null],[10,"committed_block_id","","Get the latest committed block id",3,[[],[["result",6],["error",4],["hashvalue",3]]]],[10,"reset","","Reset the internal state including cache with newly…",3,[[],[["result",6],["error",4]]]],[10,"execute_block","","Executes a block.",3,[[["hashvalue",3]],[["statecomputeresult",3],["result",6],["error",4]]]],[10,"commit_blocks","","Saves eligible blocks to persistent storage. If we have…",3,[[["vec",3],["ledgerinfowithsignatures",4],["hashvalue",3]],[["error",4],["result",6]]]],[11,"new","","",4,[[["option",4],["vec",3],["hashvalue",3],["vec",3],["epochstate",3],["transactionstatus",4]]]],[11,"version","","",4,[[],["version",6]]],[11,"root_hash","","",4,[[],["hashvalue",3]]],[11,"compute_status","","",4,[[],["vec",3]]],[11,"epoch_state","","",4,[[],["option",4]]],[11,"transaction_info_hashes","","",4,[[],["vec",3]]],[11,"num_leaves","","",4,[[]]],[11,"frozen_subtree_roots","","",4,[[],["vec",3]]],[11,"has_reconfiguration","","",4,[[]]],[11,"new","","",5,[[["hashmap",3],["accountstateblob",3],["contractevent",4],["inmemoryaccumulator",3],["sparsemerkletree",3],["option",4],["arc",3],["hashvalue",3],["accountaddress",3],["transactionstatus",4],["arc",3],["vec",3]]]],[11,"account_blobs","","",5,[[],["hashmap",3]]],[11,"events","","",5,[[]]],[11,"status","","",5,[[],["transactionstatus",4]]],[11,"state_root_hash","","",5,[[],["hashvalue",3]]],[11,"event_root_hash","","",5,[[],["hashvalue",3]]],[11,"gas_used","","",5,[[]]],[11,"prune_state_tree","","",5,[[]]],[11,"txn_info_hash","","",5,[[],[["option",4],["hashvalue",3]]]],[11,"new","","",6,[[["option",4],["executedtrees",3],["vec",3],["epochstate",3],["transactiondata",3]]]],[11,"transaction_data","","",6,[[]]],[11,"executed_trees","","",6,[[],["executedtrees",3]]],[11,"accu_root","","",6,[[],["hashvalue",3]]],[11,"version","","",6,[[],[["version",6],["option",4]]]],[11,"epoch_state","","",6,[[],["option",4]]],[11,"state_compute_result","","",6,[[],["statecomputeresult",3]]],[11,"new_copy","","",7,[[["sparsemerkletree",3],["arc",3],["arc",3],["inmemoryaccumulator",3]]]],[11,"state_tree","","",7,[[],["arc",3]]],[11,"txn_accumulator","","",7,[[],["arc",3]]],[11,"version","","",7,[[],[["version",6],["option",4]]]],[11,"state_id","","",7,[[],["hashvalue",3]]],[11,"state_root","","",7,[[],["hashvalue",3]]],[11,"new","","",7,[[["vec",3],["hashvalue",3]],["executedtrees",3]]],[11,"new_empty","","",7,[[],["executedtrees",3]]],[11,"new","","",8,[[["hashmap",3],["sparsemerkleproof",3],["hashvalue",3]]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"initialize","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["error",4]]]],[11,"from","","",0,[[["error",4]]]],[11,"from","","",7,[[["treestate",3]]]],[11,"clone","","",4,[[],["statecomputeresult",3]]],[11,"clone","","",5,[[],["transactiondata",3]]],[11,"clone","","",6,[[],["processedvmoutput",3]]],[11,"clone","","",7,[[],["executedtrees",3]]],[11,"default","","",4,[[],["statecomputeresult",3]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"eq","","",4,[[["statecomputeresult",3]]]],[11,"ne","","",4,[[["statecomputeresult",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"get_proof","","",8,[[["hashvalue",3]],[["sparsemerkleproof",3],["option",4]]]]],"p":[[4,"Error"],[13,"InternalError"],[8,"ChunkExecutor"],[8,"BlockExecutor"],[3,"StateComputeResult"],[3,"TransactionData"],[3,"ProcessedVMOutput"],[3,"ExecutedTrees"],[3,"ProofReader"]]},\
"functional_tests":{"doc":"","i":[[0,"checker","functional_tests","",null,null],[0,"directives","functional_tests::checker","",null,null],[4,"Directive","functional_tests::checker::directives","Specification of an expected text pattern in the output.",null,null],[13,"Check","","",0,null],[13,"Not","","",0,null],[11,"is_positive","","Returns if the directive is a positive pattern.",0,[[]]],[11,"is_negative","","Returns if the directive is a negative pattern.",0,[[]]],[11,"pattern_str","","Returns the pattern of the directive.",0,[[]]],[11,"parse_line","","Parses the line and extracts one or more directives from it.",0,[[],[["result",6],["vec",3]]]],[0,"matcher","functional_tests::checker","This module implements a matcher that checks if an…",null,null],[3,"Match","functional_tests::checker::matcher","A single match consisting of the index of the log entry,…",null,null],[12,"pat_id","","",1,null],[12,"entry_id","","",1,null],[12,"start","","",1,null],[12,"end","","",1,null],[3,"MatchResult","","The result of matching the directives against the…",null,null],[12,"status","","",2,null],[12,"text","","",2,null],[12,"matches","","",2,null],[4,"MatchError","","A match error.",null,null],[13,"NegativeMatch","","",3,null],[13,"UnmatchedDirectives","","",3,null],[13,"UnmatchedErrors","","",3,null],[4,"MatchStatus","","The status of a match. Can be either success or failure…",null,null],[13,"Success","","",4,null],[13,"Failure","","",4,null],[5,"match_output","","Matches the directives against the evaluation log.",null,[[["evaluationlog",3]],["matchresult",3]]],[11,"is_success","","",4,[[]]],[11,"is_failure","","",4,[[]]],[11,"is_success","","",2,[[]]],[11,"is_failure","","",2,[[]]],[0,"common","functional_tests","",null,null],[3,"Sp","functional_tests::common","Wrapper of an inner object with start and end source…",null,null],[12,"inner","","",5,null],[12,"start","","",5,null],[12,"end","","",5,null],[3,"LineSp","","Wrapper of an inner object with line, start and end source…",null,null],[12,"inner","","",6,null],[12,"line","","",6,null],[12,"start","","",6,null],[12,"end","","",6,null],[5,"strip","","Checks if `s` starts with `prefix`. If yes, returns a…",null,[[],["option",4]]],[11,"new","","",5,[[]]],[11,"into_inner","","",5,[[]]],[11,"as_inner","","",5,[[]]],[11,"map","","",5,[[],["sp",3]]],[11,"into_line_sp","","",5,[[],["linesp",3]]],[11,"new","","",6,[[]]],[11,"as_inner","","",6,[[]]],[11,"map","","",6,[[],["linesp",3]]],[0,"compiler","functional_tests","",null,null],[4,"ScriptOrModule","functional_tests::compiler","",null,null],[13,"Script","","",7,null],[13,"Module","","",7,null],[8,"Compiler","","",null,null],[10,"compile","","Compile a transaction script or module.",8,[[["accountaddress",3],["fnmut",8]],[["scriptormodule",4],["result",6]]]],[10,"use_compiled_genesis","","",8,[[]]],[0,"config","functional_tests","",null,null],[0,"block_metadata","functional_tests::config","",null,null],[4,"Proposer","functional_tests::config::block_metadata","",null,null],[13,"Account","","",9,null],[13,"Address","","",9,null],[4,"Entry","","",null,null],[13,"Proposer","","",10,null],[13,"Timestamp","","",10,null],[5,"is_new_block","","Checks whether a line denotes the start of a new…",null,[[]]],[5,"build_block_metadata","","",null,[[["globalconfig",3]],[["blockmetadata",3],["result",6]]]],[11,"try_parse","","",10,[[],[["result",6],["option",4]]]],[0,"global","functional_tests::config","",null,null],[3,"Balance","functional_tests::config::global","",null,null],[12,"amount","","",11,null],[12,"currency_code","","",11,null],[3,"AccountDefinition","","Struct that specifies the initial setup of an account.",null,null],[12,"name","","Name of the account. The name is case insensitive.",12,null],[12,"balance","","The initial balance of the account.",12,null],[12,"sequence_number","","The initial sequence number of the account.",12,null],[12,"role","","Special role this account has in the system (if any)",12,null],[12,"account_type_specifier","","Specifier on what type of account this is. Default is VASP.",12,null],[3,"Config","","A table of options either shared by all transactions or…",null,null],[12,"accounts","","A map from account names to account data",13,null],[12,"genesis_accounts","","",13,null],[12,"validator_accounts","","The validator set after genesis",13,null],[4,"Role","","",null,null],[13,"Validator","","Means that the account is a current validator; its address…",14,null],[4,"Entry","","A raw entry extracted from the input. Used to build the…",null,null],[13,"AccountDefinition","","Defines an account that can be used in tests.",15,null],[11,"is_validator","","",15,[[]]],[11,"build","","",13,[[],["result",6]]],[11,"get_account_for_name","","",13,[[],[["account",3],["result",6]]]],[0,"transaction","functional_tests::config","",null,null],[3,"Config","functional_tests::config::transaction","A table of options specific to one transaction, fine…",null,null],[12,"disabled_stages","","",16,null],[12,"sender","","",16,null],[12,"ty_args","","",16,null],[12,"args","","",16,null],[12,"max_gas","","",16,null],[12,"gas_price","","",16,null],[12,"gas_currency_code","","",16,null],[12,"sequence_number","","",16,null],[12,"expiration_time","","",16,null],[4,"Argument","","A partially parsed transaction argument.",null,null],[13,"AddressOf","","",17,null],[13,"SelfContained","","",17,null],[4,"Entry","","A raw entry extracted from the input. Used to build a…",null,null],[13,"DisableStages","","",18,null],[13,"Sender","","",18,null],[13,"TypeArguments","","",18,null],[13,"Arguments","","",18,null],[13,"MaxGas","","",18,null],[13,"GasPrice","","",18,null],[13,"GasCurrencyCode","","",18,null],[13,"SequenceNumber","","",18,null],[13,"ExpirationTime","","",18,null],[5,"is_new_transaction","","Checks whether a line denotes the start of a new…",null,[[]]],[11,"try_parse","","",18,[[],[["result",6],["option",4]]]],[11,"build","","Builds a transaction config table from raw entries.",16,[[["globalconfig",3]],["result",6]]],[11,"is_stage_disabled","","",16,[[["stage",4]]]],[0,"errors","functional_tests","",null,null],[14,"anyhow","functional_tests::errors","Construct an ad-hoc error from a string.",null,null],[14,"bail","","Return early with an error.",null,null],[14,"format_err","","Construct an ad-hoc error from a string.",null,null],[3,"Error","","The `Error` type, a wrapper around a dynamic error type.",null,null],[6,"Result","","`Result<T, Error>`",null,null],[4,"ErrorKind","","Defines all errors in this crate.",null,null],[13,"VMExecutionFailure","","",19,null],[13,"DiscardedTransaction","","",19,null],[13,"CheckerFailure","","",19,null],[13,"VerificationError","","",19,null],[13,"Other","","",19,null],[0,"evaluator","functional_tests","",null,null],[3,"Transaction","functional_tests::evaluator","A transaction to be evaluated by the testing infra.…",null,null],[12,"config","","",20,null],[12,"input","","",20,null],[3,"EvaluationLog","","A log consisting of outputs from all stages and the final…",null,null],[12,"outputs","","",21,null],[4,"Command","","Commands that drives the operation of LibraVM. Such as: 1.…",null,null],[13,"Transaction","","",22,null],[13,"BlockMetadata","","",22,null],[4,"Stage","","Indicates one step in the pipeline the given move…",null,null],[13,"Compiler","","",23,null],[13,"Verifier","","",23,null],[13,"Serializer","","",23,null],[13,"Runtime","","",23,null],[4,"Status","","Evaluation status: success or failure.",null,null],[13,"Success","","",24,null],[13,"Failure","","",24,null],[4,"OutputType","","",null,null],[13,"CompiledModule","","",25,null],[13,"CompiledScript","","",25,null],[13,"CompilerLog","","",25,null],[13,"TransactionOutput","","",25,null],[4,"EvaluationOutput","","An entry in the `EvaluationLog`.",null,null],[13,"Transaction","","",26,null],[13,"Stage","","",26,null],[13,"Output","","",26,null],[13,"Error","","",26,null],[13,"Status","","",26,null],[5,"verify_script","","Verify a script with its dependencies.",null,[[["compiledscript",3]],[["vmstatus",3],["result",4],["verifiedscript",3]]]],[5,"verify_module","","Verify a module with its dependencies.",null,[[["compiledmodule",3]],[["vmstatus",3],["verifiedmodule",3],["result",4]]]],[5,"eval_block_metadata","","",null,[[["fakeexecutor",3],["blockmetadata",3],["evaluationlog",3]],[["status",4],["result",6]]]],[5,"eval","","Feeds all given transactions through the pipeline and…",null,[[["compiler",8],["globalconfig",3]],[["result",6],["evaluationlog",3]]]],[6,"TransactionId","","",null,null],[11,"to_check_string","","",25,[[],["string",3]]],[11,"is_error","","",26,[[]]],[11,"new","","",21,[[]]],[11,"get_failed_transactions","","",21,[[],["vec",3]]],[11,"append","","",21,[[["evaluationoutput",4]]]],[0,"preprocessor","functional_tests","",null,null],[3,"RawTransactionInput","functional_tests::preprocessor","",null,null],[12,"config_entries","","",27,null],[12,"text","","",27,null],[4,"RawCommand","","",null,null],[13,"Transaction","","",28,null],[13,"BlockMetadata","","",28,null],[5,"substitute_addresses","","Substitutes the placeholders (account names in double…",null,[[["globalconfig",3]],["string",3]]],[5,"extract_global_config","","",null,[[],[["globalconfig",3],["result",6]]]],[5,"split_input","","Parses the input string into three parts: a global config,…",null,[[["globalconfig",3]],["result",6]]],[5,"build_transactions","","",null,[[["globalconfig",3]],[["result",6],["vec",3]]]],[0,"testsuite","functional_tests","",null,null],[5,"functional_tests","functional_tests::testsuite","",null,[[["path",3],["compiler",8]],["result",6]]],[17,"PRETTY","","",null,null],[11,"from","functional_tests::checker::directives","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","functional_tests::checker::matcher","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","functional_tests::common","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"encode_hex","","",5,[[]]],[11,"encode_hex_upper","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"encode_hex","","",6,[[]]],[11,"encode_hex_upper","","",6,[[]]],[11,"from","functional_tests::compiler","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","functional_tests::config::block_metadata","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","functional_tests::config::global","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","functional_tests::config::transaction","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","functional_tests::errors","",29,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","functional_tests::evaluator","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"initialize","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"equivalent","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"equivalent","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","functional_tests::preprocessor","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"fmt","functional_tests::errors","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"drop","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","","",29,[[],["error",3]]],[11,"deref_mut","","",29,[[]]],[11,"as_ref","","",29,[[],["error",8]]],[11,"as_ref","","",29,[[],["error",8]]],[11,"as_ref","functional_tests::checker::directives","",0,[[],["directive",4]]],[11,"as_ref","functional_tests::common","",5,[[]]],[11,"as_ref","","",6,[[]]],[11,"clone","functional_tests::config::global","",11,[[],["balance",3]]],[11,"clone","functional_tests::errors","",19,[[],["errorkind",4]]],[11,"clone","functional_tests::evaluator","",23,[[],["stage",4]]],[11,"clone","","",24,[[],["status",4]]],[11,"clone","","",25,[[],["outputtype",4]]],[11,"default","","",21,[[],["evaluationlog",3]]],[11,"cmp","","",23,[[["stage",4]],["ordering",4]]],[11,"eq","functional_tests::checker::directives","",0,[[["directive",4]]]],[11,"ne","","",0,[[["directive",4]]]],[11,"eq","functional_tests::evaluator","",23,[[["stage",4]]]],[11,"eq","","",24,[[["status",4]]]],[11,"partial_cmp","","",23,[[["stage",4]],[["option",4],["ordering",4]]]],[11,"fmt","functional_tests::checker::directives","",0,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::checker::matcher","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::common","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::config::block_metadata","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::config::global","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::config::transaction","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::errors","",19,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::evaluator","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::errors","",19,[[["formatter",3]],["result",6]]],[11,"fmt","functional_tests::evaluator","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"from_str","functional_tests::config::block_metadata","",10,[[],["result",6]]],[11,"from_str","functional_tests::config::global","",11,[[],["result",6]]],[11,"from_str","","",14,[[],["result",6]]],[11,"from_str","","",15,[[],["result",6]]],[11,"from_str","functional_tests::config::transaction","",18,[[],["result",6]]],[11,"from_str","functional_tests::evaluator","",23,[[],["result",6]]],[11,"new","functional_tests::errors","Create a new error object from any error type.",29,[[],["error",3]]],[11,"msg","","Create a new error object from a printable error message.",29,[[],["error",3]]],[11,"context","","Wrap the error value with additional context.",29,[[],["error",3]]],[11,"backtrace","","Get the backtrace for this Error.",29,[[],["backtrace",3]]],[11,"chain","","An iterator of the chain of source errors contained by…",29,[[],["chain",3]]],[11,"root_cause","","The lowest level cause of this error — this error\'s…",29,[[],["error",8]]],[11,"is","","Returns true if `E` is the type held by this error object.",29,[[]]],[11,"downcast","","Attempt to downcast the error object to a concrete type.",29,[[],[["result",4],["error",3]]]],[11,"downcast_ref","","Downcast this error object by reference.",29,[[],["option",4]]],[11,"downcast_mut","","Downcast this error object by mutable reference.",29,[[],["option",4]]]],"p":[[4,"Directive"],[3,"Match"],[3,"MatchResult"],[4,"MatchError"],[4,"MatchStatus"],[3,"Sp"],[3,"LineSp"],[4,"ScriptOrModule"],[8,"Compiler"],[4,"Proposer"],[4,"Entry"],[3,"Balance"],[3,"AccountDefinition"],[3,"Config"],[4,"Role"],[4,"Entry"],[3,"Config"],[4,"Argument"],[4,"Entry"],[4,"ErrorKind"],[3,"Transaction"],[3,"EvaluationLog"],[4,"Command"],[4,"Stage"],[4,"Status"],[4,"OutputType"],[4,"EvaluationOutput"],[3,"RawTransactionInput"],[4,"RawCommand"],[3,"Error"]]},\
"futures_semaphore":{"doc":"`Semaphore` holds a set of permits. Permits are used to…","i":[[3,"Semaphore","futures_semaphore","A futures-aware semaphore.",null,null],[3,"Permit","","A permit acquired from a semaphore, allowing access to a…",null,null],[11,"new","","Create a new semaphore with `capacity` number of available…",0,[[]]],[11,"capacity","","",0,[[]]],[11,"available_permits","","",0,[[]]],[11,"is_idle","","",0,[[]]],[11,"is_full","","",0,[[]]],[11,"add_permits","","",0,[[]]],[11,"acquire","","Acquire an available permit from the semaphore.",0,[[]]],[11,"into_permit","","Acquire an available permit from an owned semaphore.",0,[[]]],[11,"try_acquire","","Try to acquire an available permit from the semaphore. If…",0,[[],[["permit",3],["option",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"drop","","",1,[[]]],[11,"clone","","",0,[[],["semaphore",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[3,"Semaphore"],[3,"Permit"]]},\
"generate_format":{"doc":"How and where to record the Serde format of interesting…","i":[[4,"Corpus","generate_format","A corpus of Rust types to trace, and optionally record on…",null,null],[13,"Libra","","",0,null],[13,"Consensus","","",0,null],[13,"Network","","",0,null],[13,"MoveABI","","",0,null],[11,"variants","","",0,[[]]],[11,"values","","All corpuses.",0,[[],[["vec",3],["corpus",4]]]],[11,"get_registry","","Compute the registry of formats.",0,[[],["registry",6]]],[11,"output_file","","Where to record this corpus on disk.",0,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["corpus",4]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[],["result",4]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_subcommand","","",0,[[],["option",4]]],[11,"is_subcommand","","",0,[[]]]],"p":[[4,"Corpus"]]},\
"generate_key":{"doc":"","i":[[5,"generate_key","generate_key","",null,[[],["ed25519privatekey",3]]],[5,"generate_and_save_key","","",null,[[["asref",8],["path",3]],["ed25519privatekey",3]]],[5,"save_key","","",null,[[["asref",8],["ed25519privatekey",3],["path",3]],["ed25519privatekey",3]]],[5,"load_key","","",null,[[["asref",8],["path",3]],["ed25519privatekey",3]]]],"p":[]},\
"invalid_mutations":{"doc":"","i":[[0,"bounds","invalid_mutations","",null,null],[3,"ApplyCodeUnitBoundsContext","invalid_mutations::bounds","",null,null],[3,"CodeUnitBoundsMutation","","Represents a single mutation onto a code unit to make it…",null,null],[3,"OutOfBoundsMutation","","Represents a single mutation to a `CompiledModule` to…",null,null],[3,"ApplyOutOfBoundsContext","","",null,null],[4,"PointerKind","","Represents the number of pointers that exist out from a…",null,null],[13,"One","","Exactly one pointer out with this index kind as its…",0,null],[13,"Optional","","Zero or one pointer out with this index kind as its…",0,null],[13,"Star","","Zero or more pointers out with this index kind as its…",0,null],[11,"strategy","","",1,[[]]],[11,"new","","",2,[[["compiledmodulemut",3],["codeunitboundsmutation",3],["vec",3]]]],[11,"apply","","",2,[[],[["vec",3],["vmstatus",3]]]],[7,"VALID_POINTER_SRCS","","",null,null],[11,"pointers_from","","A list of what pointers (indexes) exist out from a…",0,[[["indexkind",4]]]],[11,"to_index_kind","","",0,[[],["indexkind",4]]],[11,"strategy","","",3,[[]]],[11,"new","","",4,[[["vec",3],["outofboundsmutation",3],["compiledmodule",3]]]],[11,"apply","","",4,[[]]],[0,"signature","invalid_mutations","",null,null],[3,"SignatureRefMutation","invalid_mutations::signature","",null,null],[3,"FieldRefMutation","","Context for applying a list of `FieldRefMutation` instances.",null,null],[11,"new","","",5,[[["compiledmodulemut",3],["vec",3]]]],[11,"apply","","",5,[[]]],[11,"new","","",6,[[["compiledmodulemut",3],["vec",3]]]],[11,"apply","","",6,[[]]],[11,"from","invalid_mutations::bounds","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","invalid_mutations::signature","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"as_ref","invalid_mutations::bounds","",1,[[],["propindex",3]]],[11,"as_ref","","",3,[[],["propindex",3]]],[11,"clone","","",0,[[],["pointerkind",4]]],[11,"eq","","",0,[[["pointerkind",4]]]],[11,"ne","","",0,[[["pointerkind",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]]],"p":[[4,"PointerKind"],[3,"CodeUnitBoundsMutation"],[3,"ApplyCodeUnitBoundsContext"],[3,"OutOfBoundsMutation"],[3,"ApplyOutOfBoundsContext"],[3,"SignatureRefMutation"],[3,"FieldRefMutation"]]},\
"ir_to_bytecode":{"doc":"","i":[[0,"compiler","ir_to_bytecode","",null,null],[5,"compile_script","ir_to_bytecode::compiler","Compile a transaction script.",null,[[["script",3],["accountaddress",3],["option",4]],["result",6]]],[5,"compile_module","","Compile a module.",null,[[["moduledefinition",3],["accountaddress",3]],["result",6]]],[0,"errors","ir_to_bytecode","",null,null],[4,"InternalCompilerError","ir_to_bytecode::errors","",null,null],[13,"BoundsCheckErrors","","",0,null],[0,"parser","ir_to_bytecode","",null,null],[5,"is_permitted_printable_char","ir_to_bytecode::parser","Determine if a character is an allowed eye-visible…",null,[[]]],[5,"is_permitted_newline_char","","Determine if a character is a permitted newline character.",null,[[]]],[5,"is_permitted_char","","Determine if a character is permitted character.",null,[[]]],[5,"parse_script_or_module","","Given the raw input of a file, creates a `ScriptOrModule`…",null,[[],[["scriptormodule",4],["result",6]]]],[5,"parse_script","","Given the raw input of a file, creates a `Script` struct…",null,[[],[["script",3],["result",6]]]],[5,"parse_module","","Given the raw input of a file, creates a single…",null,[[],[["result",6],["moduledefinition",3]]]],[5,"parse_cmd_","","Given the raw input of a file, creates a single `Cmd_`…",null,[[["accountaddress",3]],[["cmd_",4],["result",6]]]],[11,"from","ir_to_bytecode::errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["internalcompilererror",4]]],[11,"cmp","","",0,[[["internalcompilererror",4]],["ordering",4]]],[11,"eq","","",0,[[["internalcompilererror",4]]]],[11,"ne","","",0,[[["internalcompilererror",4]]]],[11,"partial_cmp","","",0,[[["internalcompilererror",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["internalcompilererror",4]]]],[11,"le","","",0,[[["internalcompilererror",4]]]],[11,"gt","","",0,[[["internalcompilererror",4]]]],[11,"ge","","",0,[[["internalcompilererror",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"InternalCompilerError"]]},\
"ir_to_bytecode_syntax":{"doc":"Grammar ## Identifiers `text f ∈ FieldName //…","i":[[0,"syntax","ir_to_bytecode_syntax","",null,null],[4,"ParseError","ir_to_bytecode_syntax::syntax","",null,null],[13,"InvalidToken","","",0,null],[12,"location","ir_to_bytecode_syntax::syntax::ParseError","",1,null],[13,"User","ir_to_bytecode_syntax::syntax","",0,null],[12,"error","ir_to_bytecode_syntax::syntax::ParseError","",2,null],[5,"parse_cmd_string","ir_to_bytecode_syntax::syntax","",null,[[],[["parseerror",4],["result",4],["cmd_",4]]]],[5,"parse_module_string","","",null,[[],[["moduledefinition",3],["result",4],["parseerror",4]]]],[5,"parse_script_string","","",null,[[],[["result",4],["script",3],["parseerror",4]]]],[5,"parse_script_or_module_string","","",null,[[],[["scriptormodule",4],["result",4],["parseerror",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",0,[[["error",3]]]],[11,"clone","","",0,[[],["parseerror",4]]],[11,"cmp","","",0,[[["parseerror",4]],["ordering",4]]],[11,"eq","","",0,[[["parseerror",4]]]],[11,"ne","","",0,[[["parseerror",4]]]],[11,"partial_cmp","","",0,[[["parseerror",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["parseerror",4]]]],[11,"le","","",0,[[["parseerror",4]]]],[11,"gt","","",0,[[["parseerror",4]]]],[11,"ge","","",0,[[["parseerror",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"ParseError"],[13,"InvalidToken"],[13,"User"]]},\
"jellyfish_merkle":{"doc":"This module implements [`JellyfishMerkleTree`] backed by…","i":[[3,"StaleNodeIndex","jellyfish_merkle","Indicates a node becomes stale since `stale_since_version`.",null,null],[12,"stale_since_version","","The version since when the node is overwritten and becomes…",0,null],[12,"node_key","","The `NodeKey` identifying the node associated with this…",0,null],[3,"TreeUpdateBatch","","This is a wrapper of `NodeBatch`, `StaleNodeIndexBatch`…",null,null],[12,"node_batch","","",1,null],[12,"stale_node_index_batch","","",1,null],[12,"num_new_leaves","","",1,null],[12,"num_stale_leaves","","",1,null],[3,"JellyfishMerkleTree","","The Jellyfish Merkle tree data structure. See [`crate`]…",null,null],[0,"iterator","","This module implements `JellyfishMerkleIterator`.…",null,null],[3,"JellyfishMerkleIterator","jellyfish_merkle::iterator","The `JellyfishMerkleIterator` implementation.",null,null],[11,"new","","Constructs a new iterator. This puts the internal state in…",2,[[["hashvalue",3],["arc",3],["version",6]],["result",6]]],[0,"node_type","jellyfish_merkle","Node types of `JellyfishMerkleTree`",null,null],[3,"NodeKey","jellyfish_merkle::node_type","The unique key of each node.",null,null],[3,"Child","","Each child of [`InternalNode`] encapsulates a nibble…",null,null],[12,"hash","","",3,null],[12,"version","","",3,null],[12,"is_leaf","","",3,null],[3,"InternalNode","","Represents a 4-level subtree with 16 children at the…",null,null],[3,"LeafNode","","Represents an account.",null,null],[4,"Node","","The concrete node type of `JellyfishMerkleTree`.",null,null],[13,"Null","","Represents `null`.",4,null],[13,"Internal","","A wrapper of [`InternalNode`].",4,null],[13,"Leaf","","A wrapper of [`LeafNode`].",4,null],[4,"NodeDecodeError","","Error thrown when a [`Node`] fails to be deserialized out…",null,null],[13,"EmptyInput","","Input is empty.",5,null],[13,"UnknownTag","","The first byte of the input is not a known tag…",5,null],[12,"unknown_tag","jellyfish_merkle::node_type::NodeDecodeError","",6,null],[13,"NoChildren","jellyfish_merkle::node_type","No children found in internal node",5,null],[13,"ExtraLeaves","","Extra leaf bits set",5,null],[12,"existing","jellyfish_merkle::node_type::NodeDecodeError","",7,null],[12,"leaves","","",7,null],[11,"new","jellyfish_merkle::node_type","Creates a new `NodeKey`.",8,[[["version",6],["nibblepath",3]]]],[11,"new_empty_path","","A shortcut to generate a node key consisting of a version…",8,[[["version",6]]]],[11,"version","","Gets the version.",8,[[],["version",6]]],[11,"nibble_path","","Gets the nibble path.",8,[[],["nibblepath",3]]],[11,"gen_child_node_key","","Generates a child node key based on this node key.",8,[[["nibble",3],["version",6]]]],[11,"gen_parent_node_key","","Generates parent node key at the same version based on…",8,[[]]],[11,"set_version","","Sets the version to the given version.",8,[[["version",6]]]],[11,"encode","","Serializes to bytes for physical storage enforcing the…",8,[[],[["result",6],["vec",3]]]],[11,"decode","","Recovers from serialized bytes in physical storage.",8,[[],[["nodekey",3],["result",6]]]],[11,"new","","",3,[[["hashvalue",3],["version",6]]]],[11,"new","","Creates a new Internal node.",9,[[["hashmap",3],["nibble",3],["child",3]]]],[11,"hash","","",9,[[],["hashvalue",3]]],[11,"serialize","","",9,[[["vec",3]],["result",6]]],[11,"deserialize","","",9,[[],["result",6]]],[11,"child","","Gets the `n`-th child.",9,[[["nibble",3]],[["option",4],["child",3]]]],[11,"generate_bitmaps","","Generates `existence_bitmap` and `leaf_bitmap` as a pair…",9,[[]]],[11,"get_child_with_siblings","","Gets the child and its corresponding siblings that are…",9,[[["nibble",3],["nodekey",3]]]],[11,"new","","Creates a new leaf node.",10,[[["hashvalue",3],["accountstateblob",3]]]],[11,"account_key","","Gets the account key, the hashed account address.",10,[[],["hashvalue",3]]],[11,"blob","","Gets the associated blob itself.",10,[[],["accountstateblob",3]]],[11,"hash","","",10,[[],["hashvalue",3]]],[11,"new_null","","Creates the `Null` variant.",4,[[]]],[11,"new_internal","","Creates the `Internal` variant.",4,[[["hashmap",3],["nibble",3],["child",3]]]],[11,"new_leaf","","Creates the `Leaf` variant.",4,[[["hashvalue",3],["accountstateblob",3]]]],[11,"is_leaf","","Returns `true` if the node is a leaf node.",4,[[]]],[11,"encode","","Serializes to bytes for physical storage.",4,[[],[["result",6],["vec",3]]]],[11,"hash","","Computes the hash of nodes.",4,[[],["hashvalue",3]]],[11,"decode","","Recovers from serialized bytes in physical storage.",4,[[],[["node",4],["result",6]]]],[0,"restore","jellyfish_merkle","This module implements the functionality to restore a…",null,null],[3,"JellyfishMerkleRestore","jellyfish_merkle::restore","",null,null],[11,"new","","",11,[[["hashvalue",3],["version",6]],["result",6]]],[11,"add_chunk","","Restores a chunk of accounts. This function will verify…",11,[[["sparsemerklerangeproof",3],["vec",3]],["result",6]]],[11,"finish","","Finishes the restoration process. This tells the code that…",11,[[],["result",6]]],[6,"NodeBatch","jellyfish_merkle","Node batch that will be written into db atomically with…",null,null],[6,"StaleNodeIndexBatch","","`StaleNodeIndex` batch that will be written into db…",null,null],[17,"ROOT_NIBBLE_HEIGHT","","The hardcoded maximum height of a [`JellyfishMerkleTree`]…",null,null],[8,"TreeReader","","`TreeReader` defines the interface between…",null,null],[11,"get_node","","Gets node given a node key. Returns error if the node does…",12,[[["nodekey",3]],[["node",4],["result",6]]]],[10,"get_node_option","","Gets node given a node key. Returns `None` if the node…",12,[[["nodekey",3]],[["option",4],["result",6]]]],[10,"get_rightmost_leaf","","Gets the rightmost leaf. Note that this assumes we are in…",12,[[],[["option",4],["result",6]]]],[8,"TreeWriter","","",null,null],[10,"write_node_batch","","Writes a node batch into storage.",13,[[["nodebatch",6]],["result",6]]],[11,"new","","Creates a `JellyfishMerkleTree` backed by the given…",14,[[]]],[11,"put_blob_sets","","Returns the new nodes and account state blobs in a batch…",14,[[["version",6],["vec",3],["vec",3]],["result",6]]],[11,"get_with_proof","","Returns the account state blob (if applicable) and the…",14,[[["hashvalue",3],["version",6]],["result",6]]],[11,"get_range_proof","","Gets the proof that shows a list of keys up to…",14,[[["hashvalue",3],["version",6]],[["sparsemerklerangeproof",3],["result",6]]]],[11,"get_root_hash","","",14,[[["version",6]],[["result",6],["hashvalue",3]]]],[11,"get_root_hash_option","","",14,[[["version",6]],[["result",6],["option",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","jellyfish_merkle::iterator","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","jellyfish_merkle::node_type","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","jellyfish_merkle::restore","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","jellyfish_merkle::node_type","",4,[[["internalnode",3]]]],[11,"from","","",4,[[["leafnode",3]]]],[11,"next","jellyfish_merkle::iterator","",2,[[],["option",4]]],[11,"clone","jellyfish_merkle::node_type","",8,[[],["nodekey",3]]],[11,"clone","","",3,[[],["child",3]]],[11,"clone","","",9,[[],["internalnode",3]]],[11,"clone","","",10,[[],["leafnode",3]]],[11,"clone","","",4,[[],["node",4]]],[11,"clone","jellyfish_merkle","",0,[[],["stalenodeindex",3]]],[11,"clone","","",1,[[],["treeupdatebatch",3]]],[11,"default","","",1,[[],["treeupdatebatch",3]]],[11,"cmp","jellyfish_merkle::node_type","",8,[[["nodekey",3]],["ordering",4]]],[11,"cmp","jellyfish_merkle","",0,[[["stalenodeindex",3]],["ordering",4]]],[11,"eq","jellyfish_merkle::node_type","",8,[[["nodekey",3]]]],[11,"ne","","",8,[[["nodekey",3]]]],[11,"eq","","",3,[[["child",3]]]],[11,"ne","","",3,[[["child",3]]]],[11,"eq","","",9,[[["internalnode",3]]]],[11,"ne","","",9,[[["internalnode",3]]]],[11,"eq","","",10,[[["leafnode",3]]]],[11,"ne","","",10,[[["leafnode",3]]]],[11,"eq","","",4,[[["node",4]]]],[11,"ne","","",4,[[["node",4]]]],[11,"eq","","",5,[[["nodedecodeerror",4]]]],[11,"ne","","",5,[[["nodedecodeerror",4]]]],[11,"eq","jellyfish_merkle","",0,[[["stalenodeindex",3]]]],[11,"ne","","",0,[[["stalenodeindex",3]]]],[11,"eq","","",1,[[["treeupdatebatch",3]]]],[11,"ne","","",1,[[["treeupdatebatch",3]]]],[11,"partial_cmp","jellyfish_merkle::node_type","",8,[[["nodekey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["nodekey",3]]]],[11,"le","","",8,[[["nodekey",3]]]],[11,"gt","","",8,[[["nodekey",3]]]],[11,"ge","","",8,[[["nodekey",3]]]],[11,"partial_cmp","jellyfish_merkle","",0,[[["stalenodeindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["stalenodeindex",3]]]],[11,"le","","",0,[[["stalenodeindex",3]]]],[11,"gt","","",0,[[["stalenodeindex",3]]]],[11,"ge","","",0,[[["stalenodeindex",3]]]],[11,"fmt","jellyfish_merkle::node_type","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","jellyfish_merkle","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","jellyfish_merkle::node_type","",5,[[["formatter",3]],["result",6]]],[11,"hash","","",8,[[]]],[11,"hash","jellyfish_merkle","",0,[[]]],[11,"serialize","jellyfish_merkle::node_type","",10,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"arbitrary_with","","",8,[[]]],[11,"arbitrary_with","","",3,[[]]],[11,"arbitrary_with","","",9,[[]]],[11,"arbitrary_with","jellyfish_merkle","",0,[[]]]],"p":[[3,"StaleNodeIndex"],[3,"TreeUpdateBatch"],[3,"JellyfishMerkleIterator"],[3,"Child"],[4,"Node"],[4,"NodeDecodeError"],[13,"UnknownTag"],[13,"ExtraLeaves"],[3,"NodeKey"],[3,"InternalNode"],[3,"LeafNode"],[3,"JellyfishMerkleRestore"],[8,"TreeReader"],[8,"TreeWriter"],[3,"JellyfishMerkleTree"]]},\
"language_benchmarks":{"doc":"","i":[[0,"move_vm","language_benchmarks","",null,null],[5,"bench","language_benchmarks::move_vm","Entry point for the bench, provide a function name to…",null,[[["criterion",3]]]],[0,"transactions","language_benchmarks","",null,null],[3,"TransactionBencher","language_benchmarks::transactions","Benchmarking support for transactions.",null,null],[18,"DEFAULT_NUM_ACCOUNTS","","The number of accounts created by default.",0,null],[18,"DEFAULT_NUM_TRANSACTIONS","","The number of transactions created by default.",0,null],[11,"new","","Creates a new transaction bencher with default settings.",0,[[]]],[11,"num_accounts","","Sets a custom number of accounts.",0,[[]]],[11,"num_transactions","","Sets a custom number of transactions.",0,[[]]],[11,"bench","","Runs the bencher.",0,[[["bencher",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["transactionbencher",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"TransactionBencher"]]},\
"language_e2e_tests":{"doc":"Test infrastructure for the Libra VM.","i":[[5,"assert_status_eq","language_e2e_tests","",null,[[["vmstatus",3]]]],[5,"transaction_status_eq","","",null,[[["transactionstatus",4]]]],[0,"account","","Test infrastructure for modeling Libra accounts.",null,null],[3,"Account","language_e2e_tests::account","Details about a Libra account.",null,null],[12,"privkey","","The current private key for this account.",0,null],[12,"pubkey","","The current public key for this account.",0,null],[3,"Balance","","Struct that represents an account balance resource for…",null,null],[3,"AccountRole","","Struct that represents an account type for testing.",null,null],[3,"EventHandleGenerator","","Struct that represents the event generator resource stored…",null,null],[3,"AccountData","","Represents an account along with initial state about it.",null,null],[3,"WithdrawCapability","","",null,null],[3,"KeyRotationCapability","","",null,null],[4,"AccountRoleSpecifier","","",null,null],[13,"AssocRoot","","",1,null],[13,"TreasuryCompliance","","",1,null],[13,"DesignatedDealer","","",1,null],[13,"Validator","","",1,null],[13,"ValidatorOperator","","",1,null],[13,"ParentVASP","","",1,null],[13,"ChildVASP","","",1,null],[13,"Unhosted","","",1,null],[5,"lbr_currency_code","","",null,[[],["identifier",3]]],[5,"coin1_currency_code","","",null,[[],["identifier",3]]],[5,"coin2_currency_code","","",null,[[],["identifier",3]]],[17,"DEFAULT_EXPIRATION_TIME","","",null,null],[11,"new","","Creates a new account in memory.",0,[[]]],[11,"with_keypair","","Creates a new account with the given keypair.",0,[[["ed25519privatekey",3],["ed25519publickey",3]]]],[11,"new_genesis_account","","Creates a new account in memory representing an account…",0,[[["accountaddress",3]]]],[11,"new_association","","Creates a new account representing the association in…",0,[[]]],[11,"new_blessed_tc","","Creates a new account representing treasury compliance in…",0,[[]]],[11,"address","","Returns the address of the account. This is a hash of the…",0,[[],["accountaddress",3]]],[11,"make_account_access_path","","Returns the AccessPath that describes the Account resource…",0,[[],["accesspath",3]]],[11,"make_event_generator_access_path","","Returns the AccessPath that describes the…",0,[[],["accesspath",3]]],[11,"make_balance_access_path","","Returns the AccessPath that describes the Account balance…",0,[[["identifier",3]],["accesspath",3]]],[11,"make_access_path","","",0,[[["structtag",3]],["accesspath",3]]],[11,"rotate_key","","Changes the keys for this account to the provided ones.",0,[[["ed25519privatekey",3],["ed25519publickey",3]]]],[11,"auth_key","","Computes the authentication key for this account, as…",0,[[],["vec",3]]],[11,"auth_key_prefix","","Return the first 16 bytes of the account\'s auth key",0,[[],["vec",3]]],[11,"create_user_txn","","Returns a [`SignedTransaction`] with a payload and this…",0,[[["transactionpayload",4],["string",3]],["signedtransaction",3]]],[11,"create_raw_user_txn","","",0,[[["accountaddress",3],["transactionpayload",4],["string",3]],["rawtransaction",3]]],[11,"create_signed_txn_with_args","","Returns a [`SignedTransaction`] with the arguments defined…",0,[[["vec",3],["typetag",4],["vec",3],["transactionargument",4],["string",3],["vec",3]],["signedtransaction",3]]],[11,"create_raw_txn_with_args","","",0,[[["vec",3],["vec",3],["vec",3],["transactionargument",4],["accountaddress",3],["string",3],["typetag",4]],["rawtransaction",3]]],[11,"create_signed_txn_with_args_and_sender","","Returns a [`SignedTransaction`] with the arguments defined…",0,[[["vec",3],["vec",3],["vec",3],["transactionargument",4],["accountaddress",3],["string",3],["typetag",4]],["signedtransaction",3]]],[11,"create_raw_txn_with_args_and_sender","","",0,[[["vec",3],["vec",3],["vec",3],["transactionargument",4],["accountaddress",3],["string",3],["typetag",4]],["rawtransaction",3]]],[11,"create_signed_txn_impl","","Returns a [`SignedTransaction`] with the arguments defined…",0,[[["accountaddress",3],["transactionpayload",4],["string",3]],["signedtransaction",3]]],[11,"signed_script_txn","","Create a transaction containing `script` signed by…",0,[[["script",3]],["signedtransaction",3]]],[11,"create_raw_txn_impl","","",0,[[["accountaddress",3],["transactionpayload",4],["string",3]],["rawtransaction",3]]],[11,"new","","Create a new balance with amount `balance`",2,[[]]],[11,"coin","","Retrieve the balance inside of this",2,[[]]],[11,"to_value","","Returns the Move Value for the account balance",2,[[],["value",3]]],[11,"type_","","Returns the value layout for the account balance",2,[[],["fatstructtype",3]]],[11,"id","","",1,[[]]],[11,"new","","Create a new AccountRole testing account.",3,[[["accountaddress",3],["accountrolespecifier",4]]]],[11,"account_specifier","","",3,[[],["accountrolespecifier",4]]],[11,"new","","",4,[[["accountaddress",3]]]],[11,"new_with_event_count","","",4,[[["accountaddress",3]]]],[11,"to_value","","",4,[[],["value",3]]],[11,"type_","","",4,[[],["fatstructtype",3]]],[11,"new","","Creates a new `AccountData` with a new account.",5,[[]]],[11,"new_assoc_root","","",5,[[]]],[11,"new_unhosted","","",5,[[]]],[11,"with_account","","Creates a new `AccountData` with the provided account.",5,[[["identifier",3],["accountrolespecifier",4],["account",3]]]],[11,"with_keypair","","Creates a new `AccountData` with the provided account.",5,[[["identifier",3],["accountrolespecifier",4],["ed25519privatekey",3],["ed25519publickey",3]]]],[11,"with_account_and_event_counts","","Creates a new `AccountData` with custom parameters.",5,[[["identifier",3],["accountrolespecifier",4],["account",3]]]],[11,"add_balance_currency","","Adds the balance held by this account to the one…",5,[[["identifier",3]]]],[11,"rotate_key","","Changes the keys for this account to the provided ones.",5,[[["ed25519privatekey",3],["ed25519publickey",3]]]],[11,"sent_payment_event_type","","",5,[[],["fatstructtype",3]]],[11,"received_payment_event_type","","",5,[[],["fatstructtype",3]]],[11,"event_handle_type","","",5,[[["fattype",4]],["fatstructtype",3]]],[11,"type_","","Returns the (Move value) layout of the…",5,[[],["fatstructtype",3]]],[11,"account_role","","Returns whether the underlying account is an an empty…",5,[[],["accountrolespecifier",4]]],[11,"to_value","","Creates and returns the top-level resources to be…",5,[[]]],[11,"make_account_access_path","","Returns the AccessPath that describes the Account resource…",5,[[],["accesspath",3]]],[11,"make_balance_access_path","","Returns the AccessPath that describes the Account balance…",5,[[["identifier",3]],["accesspath",3]]],[11,"make_event_generator_access_path","","Returns the AccessPath that describes the…",5,[[],["accesspath",3]]],[11,"to_writeset","","Creates a writeset that contains the account data and can…",5,[[],["writeset",3]]],[11,"address","","Returns the address of the account. This is a hash of the…",5,[[],["accountaddress",3]]],[11,"account","","Returns the underlying [`Account`] instance.",5,[[],["account",3]]],[11,"into_account","","Converts this data into an `Account` instance.",5,[[],["account",3]]],[11,"balance","","Returns the initial balance.",5,[[["identstr",3]]]],[11,"sequence_number","","Returns the initial sequence number.",5,[[]]],[11,"sent_events_key","","Returns the unique key for this sent events stream.",5,[[]]],[11,"sent_events_count","","Returns the initial sent events count.",5,[[]]],[11,"received_events_key","","Returns the unique key for this received events stream.",5,[[]]],[11,"received_events_count","","Returns the initial received events count.",5,[[]]],[11,"new","","",6,[[["accountaddress",3]]]],[11,"type_","","",6,[[],["fatstructtype",3]]],[11,"value","","",6,[[],["value",3]]],[11,"new","","",7,[[["accountaddress",3]]]],[11,"type_","","",7,[[],["fatstructtype",3]]],[11,"value","","",7,[[],["value",3]]],[0,"account_universe","language_e2e_tests","A model to test properties of common Libra transactions.",null,null],[3,"SequenceNumberMismatchGen","language_e2e_tests::account_universe","Represents a sequence number mismatch transaction",null,null],[3,"InsufficientBalanceGen","","Represents a insufficient balance transaction",null,null],[3,"InvalidAuthkeyGen","","Represents a authkey mismatch transaction",null,null],[3,"CreateAccountGen","","Represents a create-account transaction performed in the…",null,null],[3,"CreateExistingAccountGen","","Represents a create-account transaction in the account…",null,null],[3,"P2PTransferGen","","Represents a peer-to-peer transaction performed in the…",null,null],[3,"RotateKeyGen","","Represents a rotate-key transaction performed in the…",null,null],[3,"AccountUniverseGen","","A set of accounts which can be used to construct an…",null,null],[3,"AccountUniverse","","A set of accounts that has been set up and can now be used…",null,null],[3,"AccountPairGen","","Allows pairs of accounts to be uniformly randomly selected…",null,null],[3,"AccountPair","","Mutable references to a pair of distinct accounts picked…",null,null],[12,"idx_1","","The index of the first account picked.",8,null],[12,"idx_2","","The index of the second account picked.",8,null],[12,"account_1","","A mutable reference to the first account picked.",8,null],[12,"account_2","","A mutable reference to the second account picked.",8,null],[3,"AccountCurrent","","Represents the current state of account in a universe,…",null,null],[4,"AccountPickStyle","","Determines the sampling algorithm used to pick accounts…",null,null],[13,"Unlimited","","An account may be picked as many times as possible.",9,null],[13,"Limited","","An account may only be picked these many times.",9,null],[5,"bad_txn_strategy","","",null,[[]]],[5,"create_account_strategy","","",null,[[]]],[5,"p2p_strategy","","",null,[[]]],[5,"txn_one_account_result","","Computes the result for running a transfer out of one…",null,[[["accountcurrent",3]]]],[5,"log_balance_strategy","","Returns a [`Strategy`] that provides a variety of balances…",null,[[]]],[5,"all_transactions_strategy","","A strategy that returns a random transaction.",null,[[]]],[5,"run_and_assert_gas_cost_stability","","Run these transactions and make sure that they all cost…",null,[[["accountuniversegen",3],["vec",3]],[["testcaseerror",4],["result",4]]]],[5,"run_and_assert_universe","","Run these transactions and verify the expected output.",null,[[["accountuniversegen",3],["vec",3]],[["testcaseerror",4],["result",4]]]],[5,"assert_accounts_match","","Verify that the account information in the universe…",null,[[["fakeexecutor",3],["accountuniverse",3]],[["testcaseerror",4],["result",4]]]],[11,"strategy","","Returns a [`Strategy`] that generates a universe of…",10,[[]]],[11,"success_strategy","","Returns a [`Strategy`] that generates a universe of…",10,[[]]],[11,"set_pick_style","","Sets the pick style used by this account universe.",10,[[["accountpickstyle",4]]]],[11,"num_accounts","","Returns the number of accounts in this account universe.",10,[[]]],[11,"setup","","Returns an [`AccountUniverse`] with the initial state…",10,[[["fakeexecutor",3]],["accountuniverse",3]]],[11,"setup_gas_cost_stability","","Returns an [`AccountUniverse`] with the initial state…",10,[[["fakeexecutor",3]],["accountuniverse",3]]],[11,"num_accounts","","Returns the number of accounts currently in this universe.",11,[[]]],[11,"accounts","","Returns the accounts currently in this universe.",11,[[]]],[11,"add_account","","Adds an account to the universe so that future…",11,[[["accountdata",3]]]],[11,"pick","","Picks an account using the provided `Index` as a source of…",11,[[["index",3]]]],[11,"pick","","Picks two accounts uniformly randomly from this universe…",12,[[["accountuniverse",3]],["accountpair",3]]],[8,"AUTransactionGen","","Represents any sort of transaction that can be done in an…",null,null],[10,"apply","","Applies this transaction onto the universe, updating…",13,[[["accountuniverse",3]]]],[11,"arced","","Creates an arced version of this transaction, suitable for…",13,[[],[["arc",3],["autransactiongen",8]]]],[11,"account","","Returns the underlying account.",14,[[],["account",3]]],[11,"rotate_key","","Rotates the key in this account.",14,[[["ed25519privatekey",3],["ed25519publickey",3]]]],[11,"balance","","Returns the current balance for this account, assuming all…",14,[[]]],[11,"sequence_number","","Returns the current sequence number for this account,…",14,[[]]],[11,"sent_events_count","","Returns the current sent events count for this account,…",14,[[]]],[11,"received_events_count","","Returns the current received events count for this…",14,[[]]],[11,"create_account_gas_cost","","Returns the gas cost of a create-account transaction.",14,[[]]],[11,"create_account_low_balance_gas_cost","","Returns the gas cost of a create-account transaction where…",14,[[]]],[11,"create_existing_account_gas_cost","","Returns the gas cost of a create-account transaction where…",14,[[]]],[11,"peer_to_peer_gas_cost","","Returns the gas cost of a peer-to-peer transaction.",14,[[]]],[11,"peer_to_peer_too_low_gas_cost","","Returns the gas cost of a peer-to-peer transaction with an…",14,[[]]],[11,"peer_to_peer_new_receiver_gas_cost","","Returns the gas cost of a create-account transaction where…",14,[[]]],[11,"peer_to_peer_new_receiver_too_low_gas_cost","","Returns the gas cost of a create-account transaction where…",14,[[]]],[11,"rotate_key_gas_cost","","Returns the gas cost of a peer-to-peer transaction with an…",14,[[]]],[0,"common_transactions","language_e2e_tests","Support for encoding transactions for common situations.",null,null],[5,"add_validator_txn","language_e2e_tests::common_transactions","Returns a transaction to add a new validator",null,[[["account",3]],["signedtransaction",3]]],[5,"empty_txn","","",null,[[["account",3],["string",3]],["signedtransaction",3]]],[5,"create_account_txn","","Returns a transaction to create a new account with the…",null,[[["account",3]],["signedtransaction",3]]],[5,"create_validator_account_txn","","Returns a transaction to create a validator account with…",null,[[["account",3]],["signedtransaction",3]]],[5,"peer_to_peer_txn","","Returns a transaction to transfer coin from one account to…",null,[[["account",3]],["signedtransaction",3]]],[5,"register_validator_txn","","Returns a transaction to register the sender as a…",null,[[["account",3],["vec",3]],["signedtransaction",3]]],[5,"rotate_key_txn","","Returns a transaction to change the keys for the given…",null,[[["account",3],["vec",3]],["signedtransaction",3]]],[5,"raw_rotate_key_txn","","Returns a transaction to change the keys for the given…",null,[[["accountaddress",3],["vec",3]],["rawtransaction",3]]],[5,"rotate_consensus_pubkey_txn","","Returns a transaction to change the keys for the given…",null,[[["account",3],["vec",3]],["signedtransaction",3]]],[7,"CREATE_ACCOUNT_SCRIPT","","",null,null],[7,"EMPTY_SCRIPT","","",null,null],[0,"compile","language_e2e_tests","Support for compiling scripts and modules in tests.",null,null],[5,"compile_module_with_address","language_e2e_tests::compile","Compile the provided Move code into a blob which can be…",null,[[["accountaddress",3]],["transactionpayload",4]]],[5,"compile_script_with_address","","Compile the provided Move code into a blob which can be…",null,[[["verifiedmodule",3],["accountaddress",3],["vec",3]],["transactionpayload",4]]],[0,"data_store","language_e2e_tests","Support for mocking the Libra data store.",null,null],[3,"FakeDataStore","language_e2e_tests::data_store","An in-memory implementation of [`StateView`] and…",null,null],[7,"GENESIS_CHANGE_SET","","Dummy genesis ChangeSet for testing",null,null],[7,"GENESIS_CHANGE_SET_FRESH","","",null,null],[11,"new","","Creates a new `FakeDataStore` with the provided initial…",15,[[["hashmap",3],["vec",3],["accesspath",3]]]],[11,"add_write_set","","Adds a [`WriteSet`] to this data store.",15,[[["writeset",3]]]],[11,"set","","Sets a (key, value) pair within this data store.",15,[[["vec",3],["accesspath",3]],[["vec",3],["option",4]]]],[11,"remove","","Deletes a key from this data store.",15,[[["accesspath",3]],[["vec",3],["option",4]]]],[11,"add_account_data","","Adds an [`AccountData`] to this data store.",15,[[["accountdata",3]]]],[11,"add_module","","Adds a [`CompiledModule`] to this data store.",15,[[["moduleid",3],["compiledmodule",3]]]],[0,"execution_strategies","language_e2e_tests","",null,null],[0,"basic_strategy","language_e2e_tests::execution_strategies","",null,null],[3,"BasicStrategy","language_e2e_tests::execution_strategies::basic_strategy","",null,null],[3,"BasicExecutor","","",null,null],[11,"new","","",16,[[]]],[0,"guided_strategy","language_e2e_tests::execution_strategies","",null,null],[3,"PartitionedGuidedStrategy","language_e2e_tests::execution_strategies::guided_strategy","",null,null],[3,"UnPartitionedGuidedStrategy","","",null,null],[3,"GuidedExecutor","","",null,null],[4,"AnnotatedTransaction","","",null,null],[13,"Block","","",17,null],[13,"Txn","","",17,null],[11,"new","","",18,[[]]],[0,"multi_strategy","language_e2e_tests::execution_strategies","",null,null],[3,"MultiExecutor","language_e2e_tests::execution_strategies::multi_strategy","",null,null],[4,"MultiResult","","",null,null],[13,"NonMatchingOutput","","",19,null],[13,"OtherResult","","",19,null],[11,"new","","",20,[[]]],[11,"add_executor","","",20,[[]]],[0,"random_strategy","language_e2e_tests::execution_strategies","",null,null],[3,"RandomizedStrategy","language_e2e_tests::execution_strategies::random_strategy","",null,null],[3,"RandomExecutor","","",null,null],[11,"from_seed","","",21,[[]]],[11,"from_os_rng","","",21,[[]]],[11,"from_seed","","",22,[[]]],[11,"from_os_rng","","",22,[[]]],[0,"types","language_e2e_tests::execution_strategies","",null,null],[6,"Block","language_e2e_tests::execution_strategies::types","",null,null],[6,"ExecutorResult","","",null,null],[8,"Executor","","",null,null],[16,"Txn","","",23,null],[16,"BlockResult","","",23,null],[10,"execute_block","","",23,[[["block",6]],["executorresult",6]]],[8,"PartitionStrategy","","",null,null],[16,"Txn","","",24,null],[10,"partition","","",24,[[["block",6]],[["vec",3],["block",6]]]],[0,"executor","language_e2e_tests","Support for running the VM to execute and verify…",null,null],[3,"FakeExecutor","language_e2e_tests::executor","Provides an environment to run a VM instance.",null,null],[11,"from_genesis","","Creates an executor from a genesis [`WriteSet`].",25,[[["writeset",3]]]],[11,"from_genesis_file","","Creates an executor from the genesis file…",25,[[]]],[11,"from_fresh_genesis","","Creates an executor using the standard genesis.",25,[[]]],[11,"whitelist_genesis","","",25,[[]]],[11,"from_genesis_with_options","","Creates an executor from the genesis file…",25,[[["vmpublishingoption",4]]]],[11,"no_genesis","","Creates an executor in which no genesis state has been…",25,[[]]],[11,"custom_genesis","","Creates fresh genesis from the stdlib modules passed in.",25,[[["verifiedmodule",3],["option",4],["vmpublishingoption",4],["vec",3]]]],[11,"create_accounts","","Creates a number of [`Account`] instances all with the…",25,[[],[["account",3],["vec",3]]]],[11,"apply_write_set","","Applies a [`WriteSet`] to this executor\'s data store.",25,[[["writeset",3]]]],[11,"add_account_data","","Adds an account to this executor\'s data store.",25,[[["accountdata",3]]]],[11,"add_module","","Adds a module to this executor\'s data store.",25,[[["moduleid",3],["compiledmodule",3]]]],[11,"read_account_resource","","Reads the resource [`Value`] for an account from this…",25,[[["account",3]],[["accountresource",3],["option",4]]]],[11,"read_balance_resource","","Reads the balance resource value for an account from this…",25,[[["account",3],["identifier",3]],[["option",4],["balanceresource",3]]]],[11,"execute_block","","Executes the given block of transactions.",25,[[["vec",3],["signedtransaction",3]],[["vmstatus",3],["result",4],["vec",3]]]],[11,"execute_and_apply","","Executes the transaction as a singleton block and applies…",25,[[["signedtransaction",3]],["transactionoutput",3]]],[11,"execute_transaction_block","","",25,[[["vec",3],["transaction",4]],[["vmstatus",3],["result",4],["vec",3]]]],[11,"execute_transaction","","",25,[[["signedtransaction",3]],["transactionoutput",3]]],[11,"read_from_access_path","","Get the blob for the associated AccessPath",25,[[["accesspath",3]],[["vec",3],["option",4]]]],[11,"verify_transaction","","Verifies the given transaction by running it through the…",25,[[["signedtransaction",3]],["vmvalidatorresult",3]]],[11,"get_state_view","","",25,[[],["fakedatastore",3]]],[11,"new_block","","",25,[[]]],[0,"gas_costs","language_e2e_tests","Gas costs for common transactions.",null,null],[7,"CREATE_ACCOUNT_FIRST","language_e2e_tests::gas_costs","The gas cost of a first time create-account transaction.",null,null],[7,"CREATE_ACCOUNT_NEXT","","The gas cost of a create-account transaction.",null,null],[7,"CREATE_ACCOUNT_TOO_LOW_FIRST","","The gas cost of a create-account transaction where the…",null,null],[7,"CREATE_ACCOUNT_TOO_LOW_NEXT","","The gas cost of a create-account transaction where the…",null,null],[7,"CREATE_EXISTING_ACCOUNT_FIRST","","The gas cost of a create-account transaction where the…",null,null],[7,"CREATE_EXISTING_ACCOUNT_NEXT","","The gas cost of a create-account transaction where the…",null,null],[7,"PEER_TO_PEER","","The gas cost of a peer-to-peer transaction.",null,null],[7,"PEER_TO_PEER_TOO_LOW","","The gas cost of a peer-to-peer transaction with an…",null,null],[7,"PEER_TO_PEER_NEW_RECEIVER_FIRST","","The gas cost of a peer-to-peer transaction that creates a…",null,null],[7,"PEER_TO_PEER_NEW_RECEIVER_NEXT","","The gas cost of a peer-to-peer transaction that creates a…",null,null],[7,"PEER_TO_PEER_NEW_RECEIVER_TOO_LOW_FIRST","","The gas cost of a peer-to-peer transaction that tries to…",null,null],[7,"PEER_TO_PEER_NEW_RECEIVER_TOO_LOW_NEXT","","The gas cost of a peer-to-peer transaction that tries to…",null,null],[7,"ROTATE_KEY","","The gas cost of a rotate-key transaction.",null,null],[17,"TXN_RESERVED","","The gas each transaction is configured to reserve. If the…",null,null],[0,"keygen","language_e2e_tests","",null,null],[3,"KeyGen","language_e2e_tests::keygen","Ed25519 key generator.",null,null],[11,"from_seed","","Constructs a key generator with a specific seed.",26,[[]]],[11,"from_os_rng","","Constructs a key generator with a random seed. The random…",26,[[]]],[11,"generate_keypair","","Generate an Ed25519 key pair.",26,[[]]],[11,"strategy","language_e2e_tests::account","Returns a [`Strategy`] that creates `AccountData` instances.",5,[[]]],[14,"assert_prologue_parity","language_e2e_tests","",null,null],[14,"assert_prologue_disparity","","",null,null],[11,"from","language_e2e_tests::account","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"equivalent","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"equivalent","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"from","language_e2e_tests::account_universe","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"equivalent","","",14,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","language_e2e_tests::data_store","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"initialize","","",15,[[]]],[11,"from","language_e2e_tests::execution_strategies::basic_strategy","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"initialize","","",16,[[]]],[11,"from","language_e2e_tests::execution_strategies::guided_strategy","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","language_e2e_tests::execution_strategies::multi_strategy","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"initialize","","",20,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","language_e2e_tests::execution_strategies::random_strategy","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","language_e2e_tests::executor","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","language_e2e_tests::keygen","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"apply","language_e2e_tests::account_universe","",27,[[["accountuniverse",3]]]],[11,"apply","","",28,[[["accountuniverse",3]]]],[11,"apply","","",29,[[["accountuniverse",3]]]],[11,"apply","","",30,[[["accountuniverse",3]]]],[11,"apply","","",31,[[["accountuniverse",3]]]],[11,"apply","","",32,[[["accountuniverse",3]]]],[11,"apply","","",33,[[["accountuniverse",3]]]],[11,"execute_block","language_e2e_tests::execution_strategies::basic_strategy","",16,[[["block",6]],["executorresult",6]]],[11,"execute_block","language_e2e_tests::execution_strategies::guided_strategy","",18,[[["block",6]],["executorresult",6]]],[11,"execute_block","language_e2e_tests::execution_strategies::multi_strategy","",20,[[["block",6]],["executorresult",6]]],[11,"execute_block","language_e2e_tests::execution_strategies::random_strategy","",22,[[["block",6]],["executorresult",6]]],[11,"partition","language_e2e_tests::execution_strategies::basic_strategy","",34,[[["block",6]],[["vec",3],["block",6]]]],[11,"partition","language_e2e_tests::execution_strategies::guided_strategy","",35,[[["block",6]],[["vec",3],["block",6]]]],[11,"partition","","",36,[[["block",6]],[["vec",3],["block",6]]]],[11,"partition","language_e2e_tests::execution_strategies::random_strategy","",21,[[["block",6]],[["vec",3],["block",6]]]],[11,"clone","language_e2e_tests::account","",0,[[],["account",3]]],[11,"clone","","",2,[[],["balance",3]]],[11,"clone","","",1,[[],["accountrolespecifier",4]]],[11,"clone","","",3,[[],["accountrole",3]]],[11,"clone","","",4,[[],["eventhandlegenerator",3]]],[11,"clone","","",5,[[],["accountdata",3]]],[11,"clone","","",6,[[],["withdrawcapability",3]]],[11,"clone","","",7,[[],["keyrotationcapability",3]]],[11,"clone","language_e2e_tests::account_universe","",27,[[],["sequencenumbermismatchgen",3]]],[11,"clone","","",28,[[],["insufficientbalancegen",3]]],[11,"clone","","",29,[[],["invalidauthkeygen",3]]],[11,"clone","","",30,[[],["createaccountgen",3]]],[11,"clone","","",31,[[],["createexistingaccountgen",3]]],[11,"clone","","",32,[[],["p2ptransfergen",3]]],[11,"clone","","",33,[[],["rotatekeygen",3]]],[11,"clone","","",10,[[],["accountuniversegen",3]]],[11,"clone","","",11,[[],["accountuniverse",3]]],[11,"clone","","",12,[[],["accountpairgen",3]]],[11,"clone","","",9,[[],["accountpickstyle",4]]],[11,"clone","","",14,[[],["accountcurrent",3]]],[11,"clone","language_e2e_tests::execution_strategies::basic_strategy","",34,[[],["basicstrategy",3]]],[11,"clone","language_e2e_tests::execution_strategies::guided_strategy","",17,[[],["annotatedtransaction",4]]],[11,"clone","","",35,[[],["partitionedguidedstrategy",3]]],[11,"clone","","",36,[[],["unpartitionedguidedstrategy",3]]],[11,"clone","language_e2e_tests::execution_strategies::random_strategy","",21,[[],["randomizedstrategy",3]]],[11,"default","language_e2e_tests::account","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","language_e2e_tests::data_store","",15,[[],["fakedatastore",3]]],[11,"default","language_e2e_tests::execution_strategies::basic_strategy","",16,[[]]],[11,"default","language_e2e_tests::execution_strategies::multi_strategy","",20,[[]]],[11,"eq","language_e2e_tests::account","",0,[[["account",3]]]],[11,"ne","","",0,[[["account",3]]]],[11,"eq","","",2,[[["balance",3]]]],[11,"ne","","",2,[[["balance",3]]]],[11,"eq","","",1,[[["accountrolespecifier",4]]]],[11,"eq","","",3,[[["accountrole",3]]]],[11,"ne","","",3,[[["accountrole",3]]]],[11,"eq","","",4,[[["eventhandlegenerator",3]]]],[11,"ne","","",4,[[["eventhandlegenerator",3]]]],[11,"eq","","",5,[[["accountdata",3]]]],[11,"ne","","",5,[[["accountdata",3]]]],[11,"eq","","",6,[[["withdrawcapability",3]]]],[11,"ne","","",6,[[["withdrawcapability",3]]]],[11,"eq","","",7,[[["keyrotationcapability",3]]]],[11,"ne","","",7,[[["keyrotationcapability",3]]]],[11,"eq","language_e2e_tests::account_universe","",14,[[["accountcurrent",3]]]],[11,"ne","","",14,[[["accountcurrent",3]]]],[11,"eq","language_e2e_tests::execution_strategies::guided_strategy","",17,[[["annotatedtransaction",4]]]],[11,"ne","","",17,[[["annotatedtransaction",4]]]],[11,"fmt","language_e2e_tests::account","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::account_universe","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::data_store","",15,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::execution_strategies::basic_strategy","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::execution_strategies::guided_strategy","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::execution_strategies::multi_strategy","",19,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::execution_strategies::random_strategy","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::executor","",25,[[["formatter",3]],["result",6]]],[11,"fmt","language_e2e_tests::execution_strategies::multi_strategy","",19,[[["formatter",3]],["result",6]]],[11,"from_str","language_e2e_tests::account","",1,[[],["result",6]]],[11,"source","language_e2e_tests::execution_strategies::multi_strategy","",19,[[],[["option",4],["error",8]]]],[11,"arbitrary_with","language_e2e_tests::account_universe","",27,[[]]],[11,"arbitrary_with","","",28,[[]]],[11,"arbitrary_with","","",29,[[]]],[11,"arbitrary_with","","",30,[[]]],[11,"arbitrary_with","","",31,[[]]],[11,"arbitrary_with","","",32,[[]]],[11,"arbitrary_with","","",33,[[]]],[11,"arbitrary_with","","",12,[[]]],[11,"arbitrary_with","language_e2e_tests::account","",0,[[]]],[11,"get","language_e2e_tests::data_store","",15,[[["accesspath",3]],[["option",4],["result",6]]]],[11,"multi_get","","",15,[[],[["vec",3],["result",6]]]],[11,"is_genesis","","",15,[[]]],[11,"get","","",15,[[["accesspath",3]],[["vmresult",6],["option",4]]]]],"p":[[3,"Account"],[4,"AccountRoleSpecifier"],[3,"Balance"],[3,"AccountRole"],[3,"EventHandleGenerator"],[3,"AccountData"],[3,"WithdrawCapability"],[3,"KeyRotationCapability"],[3,"AccountPair"],[4,"AccountPickStyle"],[3,"AccountUniverseGen"],[3,"AccountUniverse"],[3,"AccountPairGen"],[8,"AUTransactionGen"],[3,"AccountCurrent"],[3,"FakeDataStore"],[3,"BasicExecutor"],[4,"AnnotatedTransaction"],[3,"GuidedExecutor"],[4,"MultiResult"],[3,"MultiExecutor"],[3,"RandomizedStrategy"],[3,"RandomExecutor"],[8,"Executor"],[8,"PartitionStrategy"],[3,"FakeExecutor"],[3,"KeyGen"],[3,"SequenceNumberMismatchGen"],[3,"InsufficientBalanceGen"],[3,"InvalidAuthkeyGen"],[3,"CreateAccountGen"],[3,"CreateExistingAccountGen"],[3,"P2PTransferGen"],[3,"RotateKeyGen"],[3,"BasicStrategy"],[3,"PartitionedGuidedStrategy"],[3,"UnPartitionedGuidedStrategy"]]},\
"libra_bitvec":{"doc":"This library defines a BitVec struct that represents a bit…","i":[[3,"BitVec","libra_bitvec","BitVec represents a bit vector that supports 4 operations:…",null,null],[11,"set","","Sets the bit at position @pos.",0,[[]]],[11,"is_set","","Checks if the bit at position @pos is set.",0,[[]]],[11,"count_ones","","Returns the number of set bits.",0,[[]]],[11,"last_set_bit","","Returns the index of the last set bit.",0,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",0,[[],["bitvec",3]]],[11,"default","","",0,[[],["bitvec",3]]],[11,"eq","","",0,[[["bitvec",3]]]],[11,"ne","","",0,[[["bitvec",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"bitand","","Returns a new BitVec that is a bitwise AND of two BitVecs.",0,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"BitVec"]]},\
"libra_canonical_serialization":{"doc":"Libra Canonical Serialization (LCS)","i":[[4,"Error","libra_canonical_serialization","",null,null],[13,"Eof","","",0,null],[13,"Io","","",0,null],[13,"ExceededMaxLen","","",0,null],[13,"ExpectedBoolean","","",0,null],[13,"ExpectedMapKey","","",0,null],[13,"ExpectedMapValue","","",0,null],[13,"NonCanonicalMap","","",0,null],[13,"ExpectedOption","","",0,null],[13,"Custom","","",0,null],[13,"MissingLen","","",0,null],[13,"NotSupported","","",0,null],[13,"RemainingInput","","",0,null],[13,"Utf8","","",0,null],[13,"NonCanonicalUleb128Encoding","","",0,null],[13,"IntegerOverflowDuringUleb128Decoding","","",0,null],[5,"from_bytes","","Deserializes a `&[u8]` into a type.",null,[[],["result",6]]],[5,"from_bytes_seed","","Perform a stateful deserialization from a `&[u8]` using…",null,[[],["result",6]]],[5,"is_human_readable","","",null,[[]]],[5,"serialize_into","","Same as `to_bytes` but write directly into an…",null,[[],["result",6]]],[5,"serialized_size","","Same as `to_bytes` but only return the size of the…",null,[[],["result",6]]],[5,"to_bytes","","Serialize the given data structure as a `Vec<u8>` of LCS.",null,[[],[["vec",3],["result",6]]]],[0,"test_helpers","","",null,null],[5,"assert_canonical_encode_decode","libra_canonical_serialization::test_helpers","",null,[[]]],[6,"Result","libra_canonical_serialization","",null,null],[17,"MAX_SEQUENCE_LENGTH","","Variable length sequences in LCS are limited to max length…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",0,[[["error",3]]]],[11,"clone","","",0,[[],["error",4]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"custom","","",0,[[["display",8]]]],[11,"custom","","",0,[[["display",8]]]]],"p":[[4,"Error"]]},\
"libra_config":{"doc":"","i":[[0,"config","libra_config","",null,null],[3,"AdmissionControlConfig","libra_config::config","",null,null],[12,"address","","",0,null],[12,"need_to_check_mempool_before_validation","","",0,null],[12,"max_concurrent_inbound_syncs","","",0,null],[12,"upstream_proxy_timeout","","",0,null],[3,"RpcConfig","","",null,null],[12,"address","","",1,null],[3,"ConsensusConfig","","",null,null],[12,"max_block_size","","",2,null],[12,"contiguous_rounds","","",2,null],[12,"max_pruned_blocks_in_mem","","",2,null],[12,"round_initial_timeout_ms","","",2,null],[12,"proposer_type","","",2,null],[12,"safety_rules","","",2,null],[3,"LeaderReputationConfig","","",null,null],[12,"active_weights","","",3,null],[12,"inactive_weights","","",3,null],[3,"DebugInterfaceConfig","","",null,null],[12,"admission_control_node_debug_port","","",4,null],[12,"metrics_server_port","","",4,null],[12,"public_metrics_server_port","","",4,null],[12,"address","","",4,null],[3,"ExecutionConfig","","",null,null],[12,"genesis","","",5,null],[12,"genesis_file_location","","",5,null],[12,"service","","",5,null],[3,"RemoteExecutionService","","",null,null],[12,"server_address","","",6,null],[3,"KeyManagerConfig","","",null,null],[12,"rotation_period_secs","","",7,null],[12,"sleep_period_secs","","",7,null],[12,"txn_expiration_secs","","",7,null],[12,"json_rpc_endpoint","","",7,null],[12,"logger","","",7,null],[12,"secure_backend","","",7,null],[3,"LoggerConfig","","",null,null],[12,"is_async","","",8,null],[12,"chan_size","","",8,null],[12,"level","","",8,null],[3,"MetricsConfig","","",null,null],[12,"collection_interval_ms","","",9,null],[12,"dir","","",9,null],[12,"enabled","","",9,null],[3,"MempoolConfig","","",null,null],[12,"broadcast_transactions","","",10,null],[12,"shared_mempool_tick_interval_ms","","",10,null],[12,"shared_mempool_backoff_interval_ms","","",10,null],[12,"shared_mempool_batch_size","","",10,null],[12,"shared_mempool_max_concurrent_inbound_syncs","","",10,null],[12,"shared_mempool_min_broadcast_recipient_count","","",10,null],[12,"max_broadcasts_per_peer","","",10,null],[12,"capacity","","",10,null],[12,"capacity_per_user","","",10,null],[12,"system_transaction_timeout_secs","","",10,null],[12,"system_transaction_gc_interval_ms","","",10,null],[3,"NetworkConfig","","",null,null],[12,"listen_address","","",11,null],[12,"connectivity_check_interval_ms","","",11,null],[12,"mutual_authentication","","",11,null],[12,"network_peers","","",11,null],[12,"network_peers_file","","",11,null],[12,"seed_peers","","",11,null],[12,"seed_peers_file","","",11,null],[12,"discovery_method","","",11,null],[12,"identity","","",11,null],[12,"network_id","","",11,null],[3,"SeedPeersConfig","","",null,null],[12,"seed_peers","","",12,null],[3,"NetworkPeersConfig","","",null,null],[12,"peers","","",13,null],[3,"GossipConfig","","",null,null],[12,"advertised_address","","",14,null],[12,"discovery_interval_ms","","",14,null],[3,"IdentityFromConfig","","The identity is stored within the config.",null,null],[12,"keypair","","",15,null],[12,"peer_id","","",15,null],[3,"IdentityFromStorage","","This represents an identity in a secure-storage as defined…",null,null],[12,"key_name","","",16,null],[12,"peer_id_name","","",16,null],[12,"backend","","",16,null],[3,"GitHubConfig","","",null,null],[12,"owner","","The owner or account that hosts a repository",17,null],[12,"repository","","The repository where storage will mount",17,null],[12,"token","","The authorization token for accessing the repository",17,null],[12,"namespace","","A namespace is an optional portion of the path to a key…",17,null],[3,"VaultConfig","","",null,null],[12,"ca_certificate","","Optional SSL Certificate for the vault host, this is…",18,null],[12,"namespace","","A namespace is an optional portion of the path to a key…",18,null],[12,"server","","Vault\'s URL, note: only HTTP is currently supported.",18,null],[12,"token","","The authorization token for accessing secrets",18,null],[3,"OnDiskStorageConfig","","",null,null],[12,"path","","",19,null],[12,"namespace","","A namespace is an optional portion of the path to a key…",19,null],[3,"TokenFromConfig","","",null,null],[3,"TokenFromDisk","","",null,null],[3,"StateSyncConfig","","",null,null],[12,"chunk_limit","","",20,null],[12,"tick_interval_ms","","",20,null],[12,"long_poll_timeout_ms","","",20,null],[12,"max_chunk_limit","","",20,null],[12,"max_timeout_ms","","",20,null],[12,"sync_request_timeout_ms","","",20,null],[3,"StorageConfig","","",null,null],[12,"address","","",21,null],[12,"backup_service_port","","",21,null],[12,"dir","","",21,null],[12,"grpc_max_receive_len","","",21,null],[12,"prune_window","","None disables pruning. The windows is in number of…",21,null],[3,"SafetyRulesConfig","","",null,null],[12,"backend","","",22,null],[12,"service","","",22,null],[3,"RemoteService","","",null,null],[12,"server_address","","",23,null],[3,"UpstreamConfig","","",null,null],[12,"primary_networks","","",24,null],[12,"upstream_peers","","",24,null],[12,"fallback_networks","","",24,null],[3,"PeerNetworkId","","Identifier of a node, represented as (network_id, peer_id)",null,null],[12,"0","","",25,null],[12,"1","","",25,null],[3,"TestConfig","","",null,null],[12,"auth_key","","",26,null],[12,"operator_keypair","","",26,null],[12,"consensus_keypair","","",26,null],[12,"initialize_storage","","",26,null],[12,"publishing_option","","",26,null],[3,"NodeConfig","","Config pulls in configuration information from the config…",null,null],[12,"admission_control","","",27,null],[12,"rpc","","",27,null],[12,"base","","",27,null],[12,"consensus","","",27,null],[12,"debug_interface","","",27,null],[12,"execution","","",27,null],[12,"full_node_networks","","",27,null],[12,"logger","","",27,null],[12,"metrics","","",27,null],[12,"mempool","","",27,null],[12,"state_sync","","",27,null],[12,"storage","","",27,null],[12,"test","","",27,null],[12,"upstream","","",27,null],[12,"validator_network","","",27,null],[3,"BaseConfig","","",null,null],[12,"role","","",28,null],[12,"waypoint","","",28,null],[3,"ParseRoleError","","",null,null],[3,"RootPath","","",null,null],[4,"ConsensusProposerType","","",null,null],[13,"FixedProposer","","",29,null],[13,"RotatingProposer","","",29,null],[13,"LeaderReputation","","",29,null],[4,"ExecutionCorrectnessService","","Defines how execution correctness should be run",null,null],[13,"Local","","This runs execution correctness in the same thread as…",30,null],[13,"Process","","This is the production, separate service approach",30,null],[13,"Serializer","","This runs safety rules in the same thread as event…",30,null],[13,"SpawnedProcess","","This instructs Consensus that this is an test model, where…",30,null],[13,"Thread","","This creates a separate thread to run execution…",30,null],[4,"DiscoveryMethod","","",null,null],[13,"Gossip","","",31,null],[13,"Onchain","","",31,null],[13,"None","","",31,null],[4,"Identity","","",null,null],[13,"FromConfig","","",32,null],[13,"FromStorage","","",32,null],[13,"None","","",32,null],[4,"SecureBackend","","",null,null],[13,"GitHub","","",33,null],[13,"InMemoryStorage","","",33,null],[13,"Vault","","",33,null],[13,"OnDiskStorage","","",33,null],[4,"Token","","Tokens can either be directly within this config or stored…",null,null],[13,"FromConfig","","",34,null],[13,"FromDisk","","This is an absolute path and not relative to data_dir",34,null],[4,"SafetyRulesService","","Defines how safety rules should be executed",null,null],[13,"Local","","This runs safety rules in the same thread as event processor",35,null],[13,"Process","","This is the production, separate service approach",35,null],[13,"Serializer","","This runs safety rules in the same thread as event…",35,null],[13,"SpawnedProcess","","This instructs Consensus that this is an test model, where…",35,null],[13,"Thread","","This creates a separate thread to run safety rules, it is…",35,null],[4,"WaypointConfig","","",null,null],[13,"FromConfig","","",36,null],[12,"waypoint","libra_config::config::WaypointConfig","",37,null],[13,"FromStorage","libra_config::config","",36,null],[12,"backend","libra_config::config::WaypointConfig","",38,null],[13,"None","libra_config::config","",36,null],[4,"RoleType","","",null,null],[13,"Validator","","",39,null],[13,"FullNode","","",39,null],[11,"randomize_ports","","",0,[[]]],[11,"randomize_ports","","",1,[[]]],[11,"set_data_dir","","",2,[[["pathbuf",3]]]],[11,"randomize_ports","","",4,[[]]],[11,"load","","",5,[[["rootpath",3]],["result",6]]],[11,"save","","",5,[[["rootpath",3]],["result",6]]],[11,"load","","Reads the key manager config file from the given…",7,[[["asref",8],["path",3]],["result",6]]],[11,"save","","Saves the key manager config file to the given output_path.",7,[[["asref",8],["path",3]],["result",6]]],[11,"set_data_dir","","",7,[[["pathbuf",3]]]],[11,"dir","","",9,[[],["pathbuf",3]]],[11,"set_data_dir","","",9,[[["pathbuf",3]]]],[11,"network_with_id","","",11,[[["networkid",4]],["networkconfig",3]]],[11,"clone_for_template","","This clones the underlying data except for the key so that…",11,[[]]],[11,"load","","",11,[[["roletype",4],["rootpath",3]],["result",6]]],[11,"save","","",11,[[["rootpath",3]],["result",6]]],[11,"random","","",11,[[["stdrng",3]]]],[11,"random_with_peer_id","","",11,[[["option",4],["stdrng",3],["peerid",3]]]],[11,"peer_id","","",11,[[],["peerid",3]]],[11,"verify_libranet_addrs","","Check that all seed peer addresses look like canonical…",12,[[],["result",6]]],[11,"gossip","","",31,[[["networkaddress",3]]]],[11,"advertised_address","","",31,[[],["networkaddress",3]]],[11,"from_config","","",32,[[["privatekey",3],["peerid",3]]]],[11,"from_storage","","",32,[[["string",3],["securebackend",4]]]],[11,"peer_id_from_config","","",32,[[],[["peerid",3],["option",4]]]],[11,"public_key_from_config","","",32,[[],[["option",4],["publickey",3]]]],[11,"ca_certificate","","",18,[[],[["string",3],["result",6]]]],[11,"new_config","","",34,[[["string",3]],["token",4]]],[11,"new_disk","","",34,[[["pathbuf",3]],["token",4]]],[11,"read_token","","",34,[[],[["string",3],["result",6]]]],[11,"path","","",19,[[],["pathbuf",3]]],[11,"set_data_dir","","",19,[[["pathbuf",3]]]],[11,"dir","","",21,[[],["pathbuf",3]]],[11,"set_data_dir","","",21,[[["pathbuf",3]]]],[11,"randomize_ports","","",21,[[]]],[11,"set_data_dir","","",22,[[["pathbuf",3]]]],[11,"is_upstream_peer","","Determines whether a node `peer_id` in network…",24,[[["peernetworkid",3]]]],[11,"is_primary_upstream_peer","","",24,[[["peernetworkid",3]]]],[11,"network_id","","",25,[[],["upstreamnetworkid",6]]],[11,"peer_id","","",25,[[],["peerid",3]]],[11,"random","","",25,[[]]],[11,"open_module","","",26,[[]]],[11,"new_with_temp_dir","","",26,[[]]],[11,"random_account_key","","",26,[[["stdrng",3]]]],[11,"random_consensus_key","","",26,[[["stdrng",3]]]],[11,"temp_dir","","",26,[[],[["path",3],["option",4]]]],[6,"UpstreamNetworkId","","In general, a network ID is a PeerId that this node uses…",null,null],[17,"DEFAULT_JSON_RPC_PORT","","",null,null],[17,"HANDSHAKE_VERSION","","Current supported protocol negotiation handshake version.",null,null],[8,"PersistableConfig","","",null,null],[11,"load_config","","",40,[[["asref",8],["path",3]],["result",6]]],[11,"save_config","","",40,[[["asref",8],["path",3]],["result",6]]],[11,"parse","","",40,[[],["result",6]]],[11,"waypoint_from_config","","",36,[[],[["waypoint",3],["option",4]]]],[11,"is_validator","","",39,[[]]],[11,"as_str","","",39,[[]]],[11,"data_dir","","",27,[[],["pathbuf",3]]],[11,"set_data_dir","","",27,[[["pathbuf",3]]]],[11,"clone_for_template","","This clones the underlying data except for the keys so…",27,[[]]],[11,"load","","Reads the config file and returns the configuration object…",27,[[["asref",8],["path",3]],["result",6]]],[11,"save","","",27,[[["asref",8],["path",3]],["result",6]]],[11,"randomize_ports","","",27,[[]]],[11,"random","","",27,[[]]],[11,"random_with_rng","","",27,[[["stdrng",3]]]],[11,"random_with_template","","",27,[[["stdrng",3]]]],[11,"new","","",41,[[["asref",8],["path",3]]]],[11,"new_path","","This function assumes that the path is already a directory",41,[[["asref",8],["path",3]]]],[11,"full_path","","This adds a full path when loading / storing if one is not…",41,[[["pathbuf",3]],["pathbuf",3]]],[0,"generator","libra_config","Convenience structs and functions for generating a random…",null,null],[3,"ValidatorSwarm","libra_config::generator","",null,null],[12,"nodes","","",42,null],[5,"validator_swarm","","",null,[[["nodeconfig",3]],["validatorswarm",3]]],[5,"validator_swarm_for_testing","","",null,[[],["validatorswarm",3]]],[5,"build_seed_peers","","Convenience function that builds a `SeedPeersConfig`…",null,[[["networkconfig",3],["networkaddress",3]],["seedpeersconfig",3]]],[0,"keys","libra_config","This file implements a KeyPair data structure.",null,null],[3,"KeyPair","libra_config::keys","A KeyPair has a private key that can only be taken once,…",null,null],[11,"load","","This transforms a private key into a keypair data structure.",43,[[]]],[11,"take_private","","Takes the key from the data structure, calling this…",43,[[],["option",4]]],[11,"public_key","","Returns the public key part. This always work, even after…",43,[[]]],[0,"network_id","libra_config","",null,null],[3,"NetworkContext","libra_config::network_id","A grouping of common information between all networking…",null,null],[3,"NetworkInfo","","",null,null],[4,"NetworkId","","A representation of the network being used in…",null,null],[13,"Validator","","",44,null],[13,"Public","","",44,null],[13,"Private","","",44,null],[11,"new","","",45,[[["roletype",4],["networkid",4],["peerid",3]],["networkcontext",3]]],[11,"network_id","","",45,[[],["networkid",4]]],[11,"peer_id","","",45,[[],["peerid",3]]],[11,"role","","",45,[[],["roletype",4]]],[11,"vfn_network","","Convenience function to specify the VFN network",44,[[],["networkid",4]]],[11,"private_network","","Creates a private network so we don\'t have to keep track…",44,[[],["networkid",4]]],[0,"utils","libra_config","",null,null],[5,"get_available_port","libra_config::utils","Return an ephemeral, available port. On unix systems, the…",null,[[]]],[5,"get_local_ip","","Extracts one local non-loopback IP address, if one exists.…",null,[[],[["option",4],["networkaddress",3]]]],[5,"get_available_port_in_multiaddr","","",null,[[],["networkaddress",3]]],[5,"serialize_ordered_map","","Serialize HashMaps as BTreeMaps for consistent ordering",null,[[["hashmap",3]],["result",4]]],[5,"get_genesis_txn","","",null,[[["nodeconfig",3]],[["result",6],["transaction",4]]]],[11,"from","libra_config::config","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"clear","","",2,[[]]],[11,"initialize","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"clear","","",4,[[]]],[11,"initialize","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"clear","","",5,[[]]],[11,"initialize","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"clear","","",7,[[]]],[11,"initialize","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"clear","","",8,[[]]],[11,"initialize","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"clear","","",9,[[]]],[11,"initialize","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"clear","","",10,[[]]],[11,"initialize","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"test_only_hash","","",11,[[],["hashvalue",3]]],[11,"clear","","",11,[[]]],[11,"initialize","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"test_only_hash","","",12,[[],["hashvalue",3]]],[11,"clear","","",12,[[]]],[11,"initialize","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"test_only_hash","","",13,[[],["hashvalue",3]]],[11,"clear","","",13,[[]]],[11,"initialize","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"test_only_hash","","",14,[[],["hashvalue",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"test_only_hash","","",15,[[],["hashvalue",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"test_only_hash","","",16,[[],["hashvalue",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"test_only_hash","","",17,[[],["hashvalue",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"test_only_hash","","",18,[[],["hashvalue",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"test_only_hash","","",19,[[],["hashvalue",3]]],[11,"clear","","",19,[[]]],[11,"initialize","","",19,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"test_only_hash","","",46,[[],["hashvalue",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"test_only_hash","","",47,[[],["hashvalue",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"test_only_hash","","",20,[[],["hashvalue",3]]],[11,"clear","","",20,[[]]],[11,"initialize","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"test_only_hash","","",21,[[],["hashvalue",3]]],[11,"clear","","",21,[[]]],[11,"initialize","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"test_only_hash","","",22,[[],["hashvalue",3]]],[11,"clear","","",22,[[]]],[11,"initialize","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"test_only_hash","","",23,[[],["hashvalue",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"test_only_hash","","",24,[[],["hashvalue",3]]],[11,"clear","","",24,[[]]],[11,"initialize","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"test_only_hash","","",25,[[],["hashvalue",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"test_only_hash","","",26,[[],["hashvalue",3]]],[11,"clear","","",26,[[]]],[11,"initialize","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"test_only_hash","","",27,[[],["hashvalue",3]]],[11,"clear","","",27,[[]]],[11,"initialize","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"test_only_hash","","",28,[[],["hashvalue",3]]],[11,"clear","","",28,[[]]],[11,"initialize","","",28,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_string","","",48,[[],["string",3]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"test_only_hash","","",29,[[],["hashvalue",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"test_only_hash","","",30,[[],["hashvalue",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"test_only_hash","","",31,[[],["hashvalue",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"test_only_hash","","",32,[[],["hashvalue",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"test_only_hash","","",33,[[],["hashvalue",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"test_only_hash","","",34,[[],["hashvalue",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"test_only_hash","","",35,[[],["hashvalue",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"test_only_hash","","",36,[[],["hashvalue",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"test_only_hash","","",39,[[],["hashvalue",3]]],[11,"from","libra_config::generator","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","libra_config::keys","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"test_only_hash","","",43,[[],["hashvalue",3]]],[11,"from","libra_config::network_id","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"test_only_hash","","",49,[[],["hashvalue",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"test_only_hash","","",44,[[],["hashvalue",3]]],[11,"clear","","",44,[[]]],[11,"initialize","","",44,[[]]],[11,"clone","libra_config::config","",0,[[],["admissioncontrolconfig",3]]],[11,"clone","","",1,[[],["rpcconfig",3]]],[11,"clone","","",2,[[],["consensusconfig",3]]],[11,"clone","","",29,[[],["consensusproposertype",4]]],[11,"clone","","",3,[[],["leaderreputationconfig",3]]],[11,"clone","","",4,[[],["debuginterfaceconfig",3]]],[11,"clone","","",5,[[],["executionconfig",3]]],[11,"clone","","",30,[[],["executioncorrectnessservice",4]]],[11,"clone","","",6,[[],["remoteexecutionservice",3]]],[11,"clone","","",7,[[],["keymanagerconfig",3]]],[11,"clone","","",8,[[],["loggerconfig",3]]],[11,"clone","","",9,[[],["metricsconfig",3]]],[11,"clone","","",10,[[],["mempoolconfig",3]]],[11,"clone","","",11,[[],["networkconfig",3]]],[11,"clone","","",12,[[],["seedpeersconfig",3]]],[11,"clone","","",13,[[],["networkpeersconfig",3]]],[11,"clone","","",31,[[],["discoverymethod",4]]],[11,"clone","","",14,[[],["gossipconfig",3]]],[11,"clone","","",32,[[],["identity",4]]],[11,"clone","","",15,[[],["identityfromconfig",3]]],[11,"clone","","",16,[[],["identityfromstorage",3]]],[11,"clone","","",33,[[],["securebackend",4]]],[11,"clone","","",17,[[],["githubconfig",3]]],[11,"clone","","",18,[[],["vaultconfig",3]]],[11,"clone","","",19,[[],["ondiskstorageconfig",3]]],[11,"clone","","",34,[[],["token",4]]],[11,"clone","","",46,[[],["tokenfromconfig",3]]],[11,"clone","","",47,[[],["tokenfromdisk",3]]],[11,"clone","","",20,[[],["statesyncconfig",3]]],[11,"clone","","",21,[[],["storageconfig",3]]],[11,"clone","","",22,[[],["safetyrulesconfig",3]]],[11,"clone","","",35,[[],["safetyrulesservice",4]]],[11,"clone","","",23,[[],["remoteservice",3]]],[11,"clone","","",24,[[],["upstreamconfig",3]]],[11,"clone","","",25,[[],["peernetworkid",3]]],[11,"clone","","",26,[[]]],[11,"clone","","",27,[[],["nodeconfig",3]]],[11,"clone","","",28,[[],["baseconfig",3]]],[11,"clone","","",36,[[],["waypointconfig",4]]],[11,"clone","","",39,[[],["roletype",4]]],[11,"clone","libra_config::keys","",43,[[],["keypair",3]]],[11,"clone","libra_config::network_id","",45,[[],["networkcontext",3]]],[11,"clone","","",49,[[],["networkinfo",3]]],[11,"clone","","",44,[[],["networkid",4]]],[11,"default","libra_config::config","",0,[[],["admissioncontrolconfig",3]]],[11,"default","","",1,[[],["rpcconfig",3]]],[11,"default","","",2,[[],["consensusconfig",3]]],[11,"default","","",4,[[],["debuginterfaceconfig",3]]],[11,"default","","",5,[[],["executionconfig",3]]],[11,"default","","",7,[[],["keymanagerconfig",3]]],[11,"default","","",8,[[],["loggerconfig",3]]],[11,"default","","",9,[[],["metricsconfig",3]]],[11,"default","","",10,[[],["mempoolconfig",3]]],[11,"default","","",11,[[]]],[11,"default","","",12,[[],["seedpeersconfig",3]]],[11,"default","","",13,[[],["networkpeersconfig",3]]],[11,"default","","",19,[[]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[],["storageconfig",3]]],[11,"default","","",22,[[]]],[11,"default","","",24,[[],["upstreamconfig",3]]],[11,"default","","",26,[[],["testconfig",3]]],[11,"default","","",27,[[],["nodeconfig",3]]],[11,"default","","",28,[[],["baseconfig",3]]],[11,"default","libra_config::network_id","",44,[[],["networkid",4]]],[11,"eq","libra_config::config","",0,[[["admissioncontrolconfig",3]]]],[11,"ne","","",0,[[["admissioncontrolconfig",3]]]],[11,"eq","","",1,[[["rpcconfig",3]]]],[11,"ne","","",1,[[["rpcconfig",3]]]],[11,"eq","","",2,[[["consensusconfig",3]]]],[11,"ne","","",2,[[["consensusconfig",3]]]],[11,"eq","","",29,[[["consensusproposertype",4]]]],[11,"ne","","",29,[[["consensusproposertype",4]]]],[11,"eq","","",3,[[["leaderreputationconfig",3]]]],[11,"ne","","",3,[[["leaderreputationconfig",3]]]],[11,"eq","","",4,[[["debuginterfaceconfig",3]]]],[11,"ne","","",4,[[["debuginterfaceconfig",3]]]],[11,"eq","","",5,[[["executionconfig",3]]]],[11,"ne","","",5,[[["executionconfig",3]]]],[11,"eq","","",30,[[["executioncorrectnessservice",4]]]],[11,"ne","","",30,[[["executioncorrectnessservice",4]]]],[11,"eq","","",6,[[["remoteexecutionservice",3]]]],[11,"ne","","",6,[[["remoteexecutionservice",3]]]],[11,"eq","","",7,[[["keymanagerconfig",3]]]],[11,"ne","","",7,[[["keymanagerconfig",3]]]],[11,"eq","","",8,[[["loggerconfig",3]]]],[11,"ne","","",8,[[["loggerconfig",3]]]],[11,"eq","","",9,[[["metricsconfig",3]]]],[11,"ne","","",9,[[["metricsconfig",3]]]],[11,"eq","","",10,[[["mempoolconfig",3]]]],[11,"ne","","",10,[[["mempoolconfig",3]]]],[11,"eq","","",11,[[["networkconfig",3]]]],[11,"ne","","",11,[[["networkconfig",3]]]],[11,"eq","","",12,[[["seedpeersconfig",3]]]],[11,"ne","","",12,[[["seedpeersconfig",3]]]],[11,"eq","","",13,[[["networkpeersconfig",3]]]],[11,"ne","","",13,[[["networkpeersconfig",3]]]],[11,"eq","","",31,[[["discoverymethod",4]]]],[11,"ne","","",31,[[["discoverymethod",4]]]],[11,"eq","","",14,[[["gossipconfig",3]]]],[11,"ne","","",14,[[["gossipconfig",3]]]],[11,"eq","","",32,[[["identity",4]]]],[11,"ne","","",32,[[["identity",4]]]],[11,"eq","","",15,[[["identityfromconfig",3]]]],[11,"ne","","",15,[[["identityfromconfig",3]]]],[11,"eq","","",16,[[["identityfromstorage",3]]]],[11,"ne","","",16,[[["identityfromstorage",3]]]],[11,"eq","","",33,[[["securebackend",4]]]],[11,"ne","","",33,[[["securebackend",4]]]],[11,"eq","","",17,[[["githubconfig",3]]]],[11,"ne","","",17,[[["githubconfig",3]]]],[11,"eq","","",18,[[["vaultconfig",3]]]],[11,"ne","","",18,[[["vaultconfig",3]]]],[11,"eq","","",19,[[["ondiskstorageconfig",3]]]],[11,"ne","","",19,[[["ondiskstorageconfig",3]]]],[11,"eq","","",34,[[["token",4]]]],[11,"ne","","",34,[[["token",4]]]],[11,"eq","","",46,[[["tokenfromconfig",3]]]],[11,"ne","","",46,[[["tokenfromconfig",3]]]],[11,"eq","","",47,[[["tokenfromdisk",3]]]],[11,"ne","","",47,[[["tokenfromdisk",3]]]],[11,"eq","","",20,[[["statesyncconfig",3]]]],[11,"ne","","",20,[[["statesyncconfig",3]]]],[11,"eq","","",21,[[["storageconfig",3]]]],[11,"ne","","",21,[[["storageconfig",3]]]],[11,"eq","","",22,[[["safetyrulesconfig",3]]]],[11,"ne","","",22,[[["safetyrulesconfig",3]]]],[11,"eq","","",35,[[["safetyrulesservice",4]]]],[11,"ne","","",35,[[["safetyrulesservice",4]]]],[11,"eq","","",23,[[["remoteservice",3]]]],[11,"ne","","",23,[[["remoteservice",3]]]],[11,"eq","","",24,[[["upstreamconfig",3]]]],[11,"ne","","",24,[[["upstreamconfig",3]]]],[11,"eq","","",25,[[["peernetworkid",3]]]],[11,"ne","","",25,[[["peernetworkid",3]]]],[11,"eq","","",26,[[]]],[11,"eq","","",27,[[["nodeconfig",3]]]],[11,"ne","","",27,[[["nodeconfig",3]]]],[11,"eq","","",28,[[["baseconfig",3]]]],[11,"ne","","",28,[[["baseconfig",3]]]],[11,"eq","","",36,[[["waypointconfig",4]]]],[11,"ne","","",36,[[["waypointconfig",4]]]],[11,"eq","","",39,[[["roletype",4]]]],[11,"eq","libra_config::keys","",43,[[["keypair",3]]]],[11,"ne","","",43,[[["keypair",3]]]],[11,"eq","libra_config::network_id","",45,[[["networkcontext",3]]]],[11,"ne","","",45,[[["networkcontext",3]]]],[11,"eq","","",49,[[["networkinfo",3]]]],[11,"ne","","",49,[[["networkinfo",3]]]],[11,"eq","","",44,[[["networkid",4]]]],[11,"ne","","",44,[[["networkid",4]]]],[11,"fmt","libra_config::config","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","libra_config::keys","",43,[[["formatter",3]],["result",6]]],[11,"fmt","libra_config::network_id","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","libra_config::config","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","libra_config::network_id","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"hash","libra_config::config","",25,[[]]],[11,"hash","libra_config::network_id","",49,[[]]],[11,"hash","","",44,[[]]],[11,"from_str","libra_config::config","",39,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",13,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",14,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",16,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",46,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",39,[[],["result",4]]],[11,"serialize","libra_config::keys","",43,[[],["result",4]]],[11,"serialize","libra_config::network_id","",49,[[],["result",4]]],[11,"serialize","","",44,[[],["result",4]]],[11,"deserialize","libra_config::config","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",29,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",13,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",14,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",16,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",46,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",35,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",36,[[],["result",4]]],[11,"deserialize","","",39,[[],["result",4]]],[11,"deserialize","libra_config::keys","",43,[[],[["keypair",3],["result",4]]]],[11,"deserialize","libra_config::network_id","",49,[[],["result",4]]],[11,"deserialize","","",44,[[],["result",4]]]],"p":[[3,"AdmissionControlConfig"],[3,"RpcConfig"],[3,"ConsensusConfig"],[3,"LeaderReputationConfig"],[3,"DebugInterfaceConfig"],[3,"ExecutionConfig"],[3,"RemoteExecutionService"],[3,"KeyManagerConfig"],[3,"LoggerConfig"],[3,"MetricsConfig"],[3,"MempoolConfig"],[3,"NetworkConfig"],[3,"SeedPeersConfig"],[3,"NetworkPeersConfig"],[3,"GossipConfig"],[3,"IdentityFromConfig"],[3,"IdentityFromStorage"],[3,"GitHubConfig"],[3,"VaultConfig"],[3,"OnDiskStorageConfig"],[3,"StateSyncConfig"],[3,"StorageConfig"],[3,"SafetyRulesConfig"],[3,"RemoteService"],[3,"UpstreamConfig"],[3,"PeerNetworkId"],[3,"TestConfig"],[3,"NodeConfig"],[3,"BaseConfig"],[4,"ConsensusProposerType"],[4,"ExecutionCorrectnessService"],[4,"DiscoveryMethod"],[4,"Identity"],[4,"SecureBackend"],[4,"Token"],[4,"SafetyRulesService"],[4,"WaypointConfig"],[13,"FromConfig"],[13,"FromStorage"],[4,"RoleType"],[8,"PersistableConfig"],[3,"RootPath"],[3,"ValidatorSwarm"],[3,"KeyPair"],[4,"NetworkId"],[3,"NetworkContext"],[3,"TokenFromConfig"],[3,"TokenFromDisk"],[3,"ParseRoleError"],[3,"NetworkInfo"]]},\
"libra_crypto":{"doc":"A library supplying various cryptographic primitives","i":[[0,"ed25519","libra_crypto","This module provides an API for the PureEdDSA signature…",null,null],[3,"Ed25519PrivateKey","libra_crypto::ed25519","An Ed25519 private key",null,null],[3,"Ed25519PublicKey","","An Ed25519 public key",null,null],[3,"Ed25519Signature","","An Ed25519 signature",null,null],[5,"keypair_strategy","","Produces a uniformly random ed25519 keypair from a seed",null,[[]]],[17,"ED25519_PRIVATE_KEY_LENGTH","","The length of the Ed25519PrivateKey",null,null],[17,"ED25519_PUBLIC_KEY_LENGTH","","The length of the Ed25519PublicKey",null,null],[17,"ED25519_SIGNATURE_LENGTH","","The length of the Ed25519Signature",null,null],[18,"LENGTH","","The length of the Ed25519PrivateKey",0,null],[11,"to_bytes","","Serialize an Ed25519PrivateKey.",0,[[]]],[11,"to_bytes","","Serialize an Ed25519PublicKey.",1,[[]]],[18,"LENGTH","","The length of the Ed25519Signature",2,null],[11,"to_bytes","","Serialize an Ed25519Signature.",2,[[]]],[11,"check_malleability","","Check for correct size and third-party based signature…",2,[[],[["result",4],["cryptomaterialerror",4]]]],[0,"error","libra_crypto","Rexport the error types needed for the various crypto traits",null,null],[14,"bail","libra_crypto::error","Return early with an error.",null,null],[3,"Error","","The `Error` type, a wrapper around a dynamic error type.",null,null],[0,"hash","libra_crypto","This module defines traits and implementations of…",null,null],[3,"HashValue","libra_crypto::hash","Output value of our hash function. Intentionally opaque…",null,null],[3,"HashValueBitIterator","","An iterator over `HashValue` that generates one bit for…",null,null],[3,"TransactionAccumulatorHasher","","The hasher used to compute the hash of an internal node in…",null,null],[3,"EventAccumulatorHasher","","The hasher used to compute the hash of an internal node in…",null,null],[3,"SparseMerkleInternalHasher","","The hasher used to compute the hash of an internal node in…",null,null],[3,"TestOnlyHasher","","The hasher used only for testing. It doesn\'t have a salt.",null,null],[7,"ACCUMULATOR_PLACEHOLDER_HASH","","Placeholder hash of `Accumulator`.",null,null],[7,"SPARSE_MERKLE_PLACEHOLDER_HASH","","Placeholder hash of `SparseMerkleTree`.",null,null],[7,"PRE_GENESIS_BLOCK_ID","","Block id reserved as the id of parent block of the genesis…",null,null],[7,"GENESIS_BLOCK_ID","","Genesis block id is used as a parent of the very first…",null,null],[8,"CryptoHash","","A type that can be cryptographically hashed to produce a…",null,null],[16,"Hasher","","The associated `Hasher` type which comes with a unique…",3,null],[10,"hash","","Hashes the object and produces a `HashValue`.",3,[[],["hashvalue",3]]],[8,"CryptoHasher","","A trait for representing the state of a cryptographic…",null,null],[10,"seed","","the seed used to initialize hashing `Self` before the…",4,[[]]],[10,"update","","Write bytes into the hasher.",4,[[]]],[10,"finish","","Finish constructing the [`HashValue`].",4,[[],["hashvalue",3]]],[8,"TestOnlyHash","","Provides a test_only_hash() method that can be used in…",null,null],[10,"test_only_hash","","Generates a hash used only for tests.",5,[[],["hashvalue",3]]],[18,"LENGTH","","The length of the hash in bytes.",6,null],[18,"LENGTH_IN_BITS","","The length of the hash in bits.",6,null],[18,"LENGTH_IN_NIBBLES","","The length of the hash in nibbles.",6,null],[11,"new","","Create a new [`HashValue`] from a byte array.",6,[[]]],[11,"from_slice","","Create from a slice (e.g. retrieved from storage).",6,[[],["result",6]]],[11,"to_vec","","Dumps into a vector.",6,[[],["vec",3]]],[11,"zero","","Creates a zero-initialized instance.",6,[[]]],[11,"random","","Create a cryptographically random instance.",6,[[]]],[11,"random_with_rng","","Creates a random instance with given rng. Useful in unit…",6,[[]]],[11,"sha3_256_of","","Convenience function that computes a `HashValue`…",6,[[]]],[11,"iter_bits","","Returns a `HashValueBitIterator` over all the bits that…",6,[[],["hashvaluebititerator",3]]],[11,"from_bit_iter","","Constructs a `HashValue` from an iterator of bits.",6,[[],["result",6]]],[11,"common_prefix_bits_len","","Returns the length of common prefix of `self` and `other`…",6,[[["hashvalue",3]]]],[11,"common_prefix_nibbles_len","","Returns the length of common prefix of `self` and `other`…",6,[[["hashvalue",3]]]],[11,"get_nibble","","Returns the `index`-th nibble.",6,[[],["nibble",3]]],[11,"short_str","","Returns first SHORT_STRING_LENGTH bytes as String in hex",6,[[],["string",3]]],[11,"to_hex","","Full hex representation of a given hash value.",6,[[],["string",3]]],[11,"from_hex","","Parse a given hex string to a hash value.",6,[[],["result",6]]],[0,"hkdf","libra_crypto","An implementation of HKDF, the HMAC-based…",null,null],[3,"Hkdf","libra_crypto::hkdf","Structure representing the HKDF, capable of HKDF-Extract…",null,null],[4,"HkdfError","","An error type for HKDF key derivation issues.",null,null],[13,"InvalidOutputLengthError","","HKDF expand output exceeds the maximum allowed or is zero.",7,null],[13,"NotSupportedHashFunctionError","","Hash function is not supported because its output is less…",7,null],[13,"WrongPseudorandomKeyError","","PRK on HKDF-Expand should not be less than the underlying…",7,null],[13,"MACKeyError","","HMAC key related error; unlikely to happen because every…",7,null],[11,"extract","","The RFC5869 HKDF-Extract operation.",8,[[["option",4]],[["vec",3],["result",4],["hkdferror",4]]]],[11,"expand","","The RFC5869 HKDF-Expand operation.",8,[[["option",4]],[["vec",3],["result",4],["hkdferror",4]]]],[11,"extract_then_expand","","HKDF Extract then Expand operation as a single step.",8,[[["option",4]],[["vec",3],["result",4],["hkdferror",4]]]],[0,"multi_ed25519","libra_crypto","This module provides an API for the accountable threshold…",null,null],[3,"MultiEd25519PrivateKey","libra_crypto::multi_ed25519","Vector of private keys in the multi-key Ed25519 structure…",null,null],[3,"MultiEd25519PublicKey","","Vector of public keys in the multi-key Ed25519 structure…",null,null],[3,"MultiEd25519Signature","","Vector of the multi-key signatures along with a 32bit [u8;…",null,null],[11,"new","","Construct a new MultiEd25519PrivateKey.",9,[[["vec",3],["ed25519privatekey",3]],[["cryptomaterialerror",4],["result",4]]]],[11,"to_bytes","","Serialize a MultiEd25519PrivateKey.",9,[[],["vec",3]]],[11,"new","","Construct a new MultiEd25519PublicKey. --- Rules --- a)…",10,[[["ed25519publickey",3],["vec",3]],[["cryptomaterialerror",4],["result",4]]]],[11,"public_keys","","Getter public_keys",10,[[],["vec",3]]],[11,"threshold","","Getter threshold",10,[[]]],[11,"to_bytes","","Serialize a MultiEd25519PublicKey.",10,[[],["vec",3]]],[11,"new","","This method will also sort signatures based on index.",11,[[["vec",3]],[["cryptomaterialerror",4],["result",4]]]],[11,"signatures","","Getter signatures.",11,[[],["vec",3]]],[11,"bitmap","","Getter bitmap.",11,[[]]],[11,"to_bytes","","Serialize a MultiEd25519Signature in the form of…",11,[[],["vec",3]]],[0,"noise","libra_crypto","Noise is a protocol framework which we use in Libra to…",null,null],[3,"NoiseConfig","libra_crypto::noise","A key holder structure used for both initiators and…",null,null],[3,"InitiatorHandshakeState","","Refer to the Noise protocol framework specification in…",null,null],[3,"ResponderHandshakeState","","Refer to the Noise protocol framework specification in…",null,null],[3,"NoiseSession","","A NoiseSession is produced after a successful Noise…",null,null],[4,"NoiseError","","A NoiseError enum represents the different types of error…",null,null],[13,"MsgTooShort","","the received message is too short to contain the expected…",12,null],[13,"Hkdf","","HKDF has failed (in practice there is no reason for HKDF…",12,null],[13,"Encrypt","","encryption has failed (in practice there is no reason for…",12,null],[13,"Decrypt","","could not decrypt the received data (most likely the data…",12,null],[13,"WrongPublicKeyReceived","","the public key received is of the wrong format",12,null],[13,"SessionClosed","","session was closed due to decrypt error",12,null],[13,"PayloadTooLarge","","the payload that we are trying to send is too large",12,null],[13,"ReceivedMsgTooLarge","","the message we received is too large",12,null],[13,"ResponseBufferTooSmall","","the response buffer passed as argument is too small",12,null],[5,"encrypted_len","","A handy const fn to get the expanded size of a plaintext…",null,[[]]],[5,"decrypted_len","","A handy const fn to get the size of a plaintext from a…",null,[[]]],[5,"handshake_init_msg_len","","A handy const fn to get the size of the first handshake…",null,[[]]],[5,"handshake_resp_msg_len","","A handy const fn to get the size of the second handshake…",null,[[]]],[17,"MAX_SIZE_NOISE_MSG","","A noise message cannot be larger than 65535 bytes as per…",null,null],[17,"AES_GCM_TAGLEN","","The authentication tag length of AES-GCM.",null,null],[11,"new","","A peer must create a NoiseConfig through this function…",13,[[["privatekey",3]]]],[11,"public_key","","Handy getter to access the configuration\'s public key",13,[[],["publickey",3]]],[11,"initiate_connection","","An initiator can use this function to initiate a handshake…",13,[[["publickey",3],["option",4]],[["result",4],["initiatorhandshakestate",3],["noiseerror",4]]]],[11,"finalize_connection","","A client can call this to finalize a connection, after…",13,[[["initiatorhandshakestate",3]],[["result",4],["noiseerror",4]]]],[11,"parse_client_init_message","","A responder can accept a connection by first parsing an…",13,[[],[["result",4],["noiseerror",4]]]],[11,"respond_to_client","","A responder can respond to an initiator by calling this…",13,[[["option",4],["responderhandshakestate",3]],[["noisesession",3],["result",4],["noiseerror",4]]]],[11,"respond_to_client_and_finalize","","This function is a one-call that replaces calling the two…",13,[[["option",4]],[["result",4],["noiseerror",4]]]],[11,"get_remote_static","","obtain remote static public key",14,[[],["publickey",3]]],[11,"write_message_in_place","","encrypts a message for the other peers (post-handshake)…",14,[[],[["vec",3],["noiseerror",4],["result",4]]]],[11,"read_message_in_place","","decrypts a message from the other peer (post-handshake)…",14,[[],[["result",4],["noiseerror",4]]]],[0,"test_utils","libra_crypto","Internal module containing convenience utility functions…",null,null],[3,"KeyPair","libra_crypto::test_utils","A keypair consisting of a private and public key",null,null],[12,"private_key","","the private key component",15,null],[12,"public_key","","the public key component",15,null],[5,"uniform_keypair_strategy","","Produces a uniformly random keypair from a seed",null,[[]]],[17,"TEST_SEED","","A deterministic seed for PRNGs related to keys",null,null],[0,"traits","libra_crypto","This module provides a generic set of traits for dealing…",null,null],[4,"CryptoMaterialError","libra_crypto::traits","An error type for key and signature validation issues, see…",null,null],[13,"SerializationError","","Struct to be signed does not serialize correctly.",16,null],[13,"DeserializationError","","Key or signature material does not deserialize correctly.",16,null],[13,"ValidationError","","Key or signature material deserializes, but is otherwise…",16,null],[13,"WrongLengthError","","Key, threshold or signature material does not have the…",16,null],[13,"CanonicalRepresentationError","","Part of the signature or key is not canonical resulting to…",16,null],[13,"SmallSubgroupError","","A curve point (i.e., a public key) lies on a small group.",16,null],[13,"PointNotOnCurveError","","A curve point (i.e., a public key) does not satisfy the…",16,null],[13,"BitVecError","","BitVec errors in accountable multi-sig schemes.",16,null],[8,"Length","","The serialized length of the data that enables macro…",null,null],[10,"length","","The serialized length of the data",17,[[]]],[8,"ValidCryptoMaterial","","Key or more generally crypto material with a notion of…",null,null],[10,"to_bytes","","Convert the valid crypto material to bytes.",18,[[],["vec",3]]],[8,"ValidCryptoMaterialStringExt","","An extension to to/from Strings for…",null,null],[11,"from_encoded_string","","When trying to convert from bytes, we simply decode the…",19,[[],[["cryptomaterialerror",4],["result",4]]]],[11,"to_encoded_string","","A function to encode into hex-string after serializing.",19,[[],[["string",3],["result",6]]]],[8,"PrivateKey","","A type family for key material that should remain secret…",null,null],[16,"PublicKeyMaterial","","We require public / private types to be coupled, i.e.…",20,null],[11,"public_key","","Returns the associated public key",20,[[]]],[8,"SigningKey","","A type family of valid keys that know how to sign.",null,null],[16,"VerifyingKeyMaterial","","The associated verifying key type for this signing key.",21,null],[16,"SignatureMaterial","","The associated signature type for this signing key.",21,null],[10,"sign_message","","Signs an input message, represented by its `HashValue`",21,[[["hashvalue",3]]]],[10,"sign","","Signs an object that has an distinct domain-separation…",21,[[],[["result",6],["cryptomaterialerror",4]]]],[10,"sign_arbitrary_message","","Signs a non-hash input message. For testing only.",21,[[]]],[11,"verifying_key","","Returns the associated verifying key",21,[[]]],[8,"PublicKey","","A type for key material that can be publicly shared, and…",null,null],[16,"PrivateKeyMaterial","","We require public / private types to be coupled, i.e.…",22,null],[8,"VerifyingKey","","A type family of public keys that are used for signing.",null,null],[16,"SigningKeyMaterial","","The associated signing key type for this verifying key.",23,null],[16,"SignatureMaterial","","The associated signature type for this verifying key.",23,null],[11,"verify_signature","","We provide the logical implementation which dispatches to…",23,[[["hashvalue",3]],["result",6]]],[11,"verify_struct_signature","","We provide the striaghtfoward implementation which…",23,[[],["result",6]]],[11,"batch_verify_signatures","","We provide the implementation which dispatches to the…",23,[[["vec",3],["hashvalue",3]],["result",6]]],[8,"Signature","","A type family for signature material that knows which…",null,null],[16,"VerifyingKeyMaterial","","The associated verifying key type for this signature.",24,null],[16,"SigningKeyMaterial","","The associated signing key type for this signature",24,null],[10,"verify","","The verification function.",24,[[["hashvalue",3]],["result",6]]],[10,"verify_struct_msg","","Verification for a struct we unabmiguously know how to…",24,[[],["result",6]]],[10,"verify_arbitrary_msg","","Native verification function.",24,[[],["result",6]]],[10,"to_bytes","","Convert the signature into a byte representation.",24,[[],["vec",3]]],[11,"batch_verify_signatures","","The implementer can override a batch verification…",24,[[["hashvalue",3],["vec",3]],["result",6]]],[8,"Uniform","","A type family for schemes which know how to generate key…",null,null],[10,"generate","","Generate key material from an RNG. This should generally…",25,[[]]],[11,"generate_for_testing","","Generate a random key using the shared TEST_SEED",25,[[]]],[8,"Genesis","","A type family with a by-convention notion of genesis…",null,null],[10,"genesis","","Produces the genesis private key.",26,[[]]],[0,"x25519","libra_crypto","An abstraction of x25519 elliptic curve keys required for…",null,null],[3,"PrivateKey","libra_crypto::x25519","This type should be used to deserialize a received private…",null,null],[3,"PublicKey","","This type should be used to deserialize a received public…",null,null],[5,"keypair_strategy","","Produces a uniformly random ed25519 keypair from a seed",null,[[]]],[17,"PRIVATE_KEY_SIZE","","Size of a X25519 private key",null,null],[17,"PUBLIC_KEY_SIZE","","Size of a X25519 public key",null,null],[17,"SHARED_SECRET_SIZE","","Size of a X25519 shared secret",null,null],[11,"public_key","","Obtain the public key part of a private key",27,[[],["publickey",3]]],[11,"diffie_hellman","","To perform a key exchange with another public key",27,[[["publickey",3]]]],[11,"from_ed25519_private_bytes","","Deserialize an X25119 PrivateKey given the sha512…",27,[[],[["result",4],["cryptomaterialerror",4]]]],[11,"as_slice","","Obtain a slice reference to the underlying bytearray",28,[[]]],[11,"from_ed25519_public_bytes","","Deserialize an X25119 PublicKey from its representation as…",28,[[],[["result",4],["cryptomaterialerror",4]]]],[11,"test_only_hash","libra_crypto::ed25519","",0,[[],["hashvalue",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","libra_crypto::error","",29,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"test_only_hash","libra_crypto::hash","",6,[[],["hashvalue",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"initialize","","",6,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"into_iter","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"initialize","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"initialize","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"clear","","",33,[[]]],[11,"initialize","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"initialize","","",34,[[]]],[11,"from","libra_crypto::hkdf","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"test_only_hash","libra_crypto::multi_ed25519","",9,[[],["hashvalue",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"test_only_hash","","",11,[[],["hashvalue",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","libra_crypto::noise","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"test_only_hash","libra_crypto::test_utils","",15,[[],["hashvalue",3]]],[11,"from","","",15,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","libra_crypto::traits","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"test_only_hash","libra_crypto::x25519","",27,[[],["hashvalue",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"test_only_hash","","",28,[[],["hashvalue",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"initialize","","",28,[[]]],[11,"fmt","libra_crypto::error","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"drop","","",29,[[]]],[11,"deref","","",29,[[]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","","",29,[[],["error",3]]],[11,"deref_mut","","",29,[[]]],[11,"as_ref","","",29,[[],["error",8]]],[11,"as_ref","","",29,[[],["error",8]]],[11,"seed","libra_crypto::hash","",31,[[]]],[11,"update","","",31,[[]]],[11,"finish","","",31,[[],["hashvalue",3]]],[11,"seed","","",32,[[]]],[11,"update","","",32,[[]]],[11,"finish","","",32,[[],["hashvalue",3]]],[11,"seed","","",33,[[]]],[11,"update","","",33,[[]]],[11,"finish","","",33,[[],["hashvalue",3]]],[11,"seed","","",34,[[]]],[11,"update","","",34,[[]]],[11,"finish","","",34,[[],["hashvalue",3]]],[11,"length","libra_crypto::ed25519","",0,[[]]],[11,"length","","",1,[[]]],[11,"length","","",2,[[]]],[11,"length","libra_crypto::multi_ed25519","",9,[[]]],[11,"length","","",10,[[]]],[11,"length","","",11,[[]]],[11,"to_bytes","libra_crypto::ed25519","",0,[[],["vec",3]]],[11,"to_bytes","","",1,[[],["vec",3]]],[11,"to_bytes","","",2,[[],["vec",3]]],[11,"to_bytes","libra_crypto::multi_ed25519","",9,[[],["vec",3]]],[11,"to_bytes","","",10,[[],["vec",3]]],[11,"to_bytes","","",11,[[],["vec",3]]],[11,"to_bytes","libra_crypto::x25519","",27,[[],["vec",3]]],[11,"to_bytes","","",28,[[],["vec",3]]],[11,"sign","libra_crypto::ed25519","",0,[[],[["ed25519signature",3],["result",6],["cryptomaterialerror",4]]]],[11,"sign_message","","",0,[[["hashvalue",3]],["ed25519signature",3]]],[11,"sign_arbitrary_message","","",0,[[],["ed25519signature",3]]],[11,"sign_message","libra_crypto::multi_ed25519","",9,[[["hashvalue",3]],["multied25519signature",3]]],[11,"sign","","",9,[[],[["cryptomaterialerror",4],["result",6],["multied25519signature",3]]]],[11,"sign_arbitrary_message","","",9,[[],["multied25519signature",3]]],[11,"verify","libra_crypto::ed25519","Checks that `self` is valid for `message` using…",2,[[["hashvalue",3],["ed25519publickey",3]],["result",6]]],[11,"verify_struct_msg","","",2,[[["ed25519publickey",3]],["result",6]]],[11,"verify_arbitrary_msg","","Checks that `self` is valid for an arbitrary &[u8]…",2,[[["ed25519publickey",3]],["result",6]]],[11,"to_bytes","","",2,[[],["vec",3]]],[11,"verify","libra_crypto::multi_ed25519","Checks that `self` is valid for `message` using…",11,[[["hashvalue",3],["multied25519publickey",3]],["result",6]]],[11,"verify_struct_msg","","",11,[[["multied25519publickey",3]],["result",6]]],[11,"verify_arbitrary_msg","","Checks that `self` is valid for an arbitrary &[u8]…",11,[[["multied25519publickey",3]],["result",6]]],[11,"to_bytes","","",11,[[],["vec",3]]],[11,"generate","libra_crypto::ed25519","",0,[[]]],[11,"generate","libra_crypto::multi_ed25519","",9,[[]]],[11,"generate","libra_crypto::test_utils","",15,[[]]],[11,"generate","libra_crypto::x25519","",27,[[]]],[11,"genesis","libra_crypto::ed25519","",0,[[]]],[11,"genesis","libra_crypto::multi_ed25519","",9,[[]]],[11,"as_ref","libra_crypto::hash","",6,[[]]],[11,"from","libra_crypto::ed25519","",1,[[["ed25519privatekey",3]]]],[11,"from","libra_crypto::multi_ed25519","",9,[[["ed25519privatekey",3]]]],[11,"from","","",10,[[["ed25519publickey",3]]]],[11,"from","","",10,[[["multied25519privatekey",3]]]],[11,"from","","",11,[[["ed25519signature",3]]]],[11,"from","libra_crypto::test_utils","",15,[[]]],[11,"from","libra_crypto::x25519","",27,[[]]],[11,"from","","",28,[[["privatekey",3]]]],[11,"from","","",28,[[]]],[11,"next_back","libra_crypto::hash","",30,[[],["option",4]]],[11,"next","","",30,[[],["option",4]]],[11,"size_hint","","",30,[[]]],[11,"clone","libra_crypto::ed25519","",0,[[]]],[11,"clone","","",1,[[],["ed25519publickey",3]]],[11,"clone","","",2,[[],["ed25519signature",3]]],[11,"clone","libra_crypto::hash","",6,[[],["hashvalue",3]]],[11,"clone","","",31,[[],["transactionaccumulatorhasher",3]]],[11,"clone","","",32,[[],["eventaccumulatorhasher",3]]],[11,"clone","","",33,[[],["sparsemerkleinternalhasher",3]]],[11,"clone","","",34,[[],["testonlyhasher",3]]],[11,"clone","libra_crypto::hkdf","",8,[[],["hkdf",3]]],[11,"clone","","",7,[[],["hkdferror",4]]],[11,"clone","libra_crypto::multi_ed25519","",10,[[],["multied25519publickey",3]]],[11,"clone","","",11,[[],["multied25519signature",3]]],[11,"clone","libra_crypto::test_utils","",15,[[],["keypair",3]]],[11,"clone","libra_crypto::traits","",16,[[],["cryptomaterialerror",4]]],[11,"clone","libra_crypto::x25519","",27,[[],["privatekey",3]]],[11,"clone","","",28,[[],["publickey",3]]],[11,"default","libra_crypto::hash","",6,[[]]],[11,"default","","",31,[[]]],[11,"default","","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","","",34,[[]]],[11,"default","libra_crypto::x25519","",28,[[],["publickey",3]]],[11,"cmp","libra_crypto::hash","",6,[[["hashvalue",3]],["ordering",4]]],[11,"cmp","libra_crypto::x25519","",28,[[["publickey",3]],["ordering",4]]],[11,"eq","libra_crypto::ed25519","",0,[[]]],[11,"eq","","",1,[[["ed25519publickey",3]]]],[11,"eq","","",2,[[["ed25519signature",3]]]],[11,"eq","libra_crypto::hash","",6,[[["hashvalue",3]]]],[11,"ne","","",6,[[["hashvalue",3]]]],[11,"eq","libra_crypto::hkdf","",7,[[["hkdferror",4]]]],[11,"eq","libra_crypto::multi_ed25519","",9,[[["multied25519privatekey",3]]]],[11,"ne","","",9,[[["multied25519privatekey",3]]]],[11,"eq","","",10,[[["multied25519publickey",3]]]],[11,"ne","","",10,[[["multied25519publickey",3]]]],[11,"eq","","",11,[[["multied25519signature",3]]]],[11,"ne","","",11,[[["multied25519signature",3]]]],[11,"eq","libra_crypto::test_utils","",15,[[["keypair",3]]]],[11,"ne","","",15,[[["keypair",3]]]],[11,"eq","libra_crypto::traits","",16,[[["cryptomaterialerror",4]]]],[11,"ne","","",16,[[["cryptomaterialerror",4]]]],[11,"eq","libra_crypto::x25519","",28,[[["publickey",3]]]],[11,"ne","","",28,[[["publickey",3]]]],[11,"eq","","",27,[[]]],[11,"partial_cmp","libra_crypto::hash","",6,[[["hashvalue",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["hashvalue",3]]]],[11,"le","","",6,[[["hashvalue",3]]]],[11,"gt","","",6,[[["hashvalue",3]]]],[11,"ge","","",6,[[["hashvalue",3]]]],[11,"partial_cmp","libra_crypto::x25519","",28,[[["publickey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["publickey",3]]]],[11,"le","","",28,[[["publickey",3]]]],[11,"gt","","",28,[[["publickey",3]]]],[11,"ge","","",28,[[["publickey",3]]]],[11,"fmt","libra_crypto::ed25519","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::hash","",6,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::hkdf","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::multi_ed25519","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::noise","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::test_utils","",15,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::traits","",16,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::x25519","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::ed25519","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::hash","",6,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::hkdf","",7,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::multi_ed25519","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::noise","",12,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::traits","",16,[[["formatter",3]],["result",6]]],[11,"fmt","libra_crypto::x25519","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"index","libra_crypto::hash","",6,[[]]],[11,"hash","libra_crypto::ed25519","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","libra_crypto::hash","",6,[[]]],[11,"hash","libra_crypto::multi_ed25519","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","libra_crypto::x25519","",28,[[]]],[11,"try_from","libra_crypto::ed25519","Deserialize an Ed25519PrivateKey. This method will also…",0,[[],[["result",4],["cryptomaterialerror",4],["ed25519privatekey",3]]]],[11,"try_from","","Deserialize an Ed25519PublicKey. This method will also…",1,[[],[["result",4],["ed25519publickey",3],["cryptomaterialerror",4]]]],[11,"try_from","","",2,[[],[["ed25519signature",3],["cryptomaterialerror",4],["result",4]]]],[11,"try_from","libra_crypto::multi_ed25519","Deserialize an Ed25519PrivateKey. This method will also…",9,[[],[["result",4],["multied25519privatekey",3],["cryptomaterialerror",4]]]],[11,"try_from","","Deserialize a MultiEd25519PublicKey. This method will also…",10,[[],[["cryptomaterialerror",4],["multied25519publickey",3],["result",4]]]],[11,"try_from","","Deserialize a MultiEd25519Signature. This method will also…",11,[[],[["result",4],["multied25519signature",3],["cryptomaterialerror",4]]]],[11,"try_from","libra_crypto::x25519","",27,[[],["result",4]]],[11,"try_from","","",28,[[],["result",4]]],[11,"from_str","libra_crypto::hash","",6,[[],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"write","","",31,[[],["result",6]]],[11,"flush","","",31,[[],["result",6]]],[11,"write","","",32,[[],["result",6]]],[11,"flush","","",32,[[],["result",6]]],[11,"write","","",33,[[],["result",6]]],[11,"flush","","",33,[[],["result",6]]],[11,"write","","",34,[[],["result",6]]],[11,"flush","","",34,[[],["result",6]]],[11,"serialize","libra_crypto::ed25519","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","libra_crypto::hash","",6,[[],["result",4]]],[11,"serialize","libra_crypto::multi_ed25519","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","libra_crypto::test_utils","",15,[[],["result",4]]],[11,"serialize","libra_crypto::x25519","",27,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"deserialize","libra_crypto::ed25519","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","libra_crypto::hash","",6,[[],["result",4]]],[11,"deserialize","libra_crypto::multi_ed25519","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","libra_crypto::test_utils","",15,[[],["result",4]]],[11,"deserialize","libra_crypto::x25519","",27,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"arbitrary_with","libra_crypto::ed25519","",1,[[]]],[11,"arbitrary_with","libra_crypto::hash","",6,[[]]],[11,"arbitrary_with","libra_crypto::x25519","",28,[[]]],[11,"arbitrary_with","","",27,[[]]],[11,"new","libra_crypto::error","Create a new error object from any error type.",29,[[],["error",3]]],[11,"msg","","Create a new error object from a printable error message.",29,[[],["error",3]]],[11,"context","","Wrap the error value with additional context.",29,[[],["error",3]]],[11,"backtrace","","Get the backtrace for this Error.",29,[[],["backtrace",3]]],[11,"chain","","An iterator of the chain of source errors contained by…",29,[[],["chain",3]]],[11,"root_cause","","The lowest level cause of this error — this error\'s…",29,[[],["error",8]]],[11,"is","","Returns true if `E` is the type held by this error object.",29,[[]]],[11,"downcast","","Attempt to downcast the error object to a concrete type.",29,[[],[["result",4],["error",3]]]],[11,"downcast_ref","","Downcast this error object by reference.",29,[[],["option",4]]],[11,"downcast_mut","","Downcast this error object by mutable reference.",29,[[],["option",4]]]],"p":[[3,"Ed25519PrivateKey"],[3,"Ed25519PublicKey"],[3,"Ed25519Signature"],[8,"CryptoHash"],[8,"CryptoHasher"],[8,"TestOnlyHash"],[3,"HashValue"],[4,"HkdfError"],[3,"Hkdf"],[3,"MultiEd25519PrivateKey"],[3,"MultiEd25519PublicKey"],[3,"MultiEd25519Signature"],[4,"NoiseError"],[3,"NoiseConfig"],[3,"NoiseSession"],[3,"KeyPair"],[4,"CryptoMaterialError"],[8,"Length"],[8,"ValidCryptoMaterial"],[8,"ValidCryptoMaterialStringExt"],[8,"PrivateKey"],[8,"SigningKey"],[8,"PublicKey"],[8,"VerifyingKey"],[8,"Signature"],[8,"Uniform"],[8,"Genesis"],[3,"PrivateKey"],[3,"PublicKey"],[3,"Error"],[3,"HashValueBitIterator"],[3,"TransactionAccumulatorHasher"],[3,"EventAccumulatorHasher"],[3,"SparseMerkleInternalHasher"],[3,"TestOnlyHasher"],[3,"InitiatorHandshakeState"],[3,"ResponderHandshakeState"]]},\
"libra_crypto_derive":{"doc":"Derive macros for crypto operations This crate contains…","i":[[24,"SilentDisplay","libra_crypto_derive","",null,null],[24,"SilentDebug","","",null,null],[24,"DeserializeKey","","Deserialize from a human readable format where applicable",null,null],[24,"SerializeKey","","Serialize into a human readable format where applicable",null,null],[24,"Deref","","",null,null],[24,"ValidCryptoMaterial","","",null,null],[24,"PublicKey","","",null,null],[24,"PrivateKey","","",null,null],[24,"VerifyingKey","","",null,null],[24,"SigningKey","","",null,null],[24,"Signature","","",null,null],[24,"CryptoHasher","","",null,null],[24,"LCSCryptoHash","","",null,null]],"p":[]},\
"libra_dev":{"doc":"","i":[[0,"account","libra_dev","",null,null],[5,"libra_LibraAccountKey_from","libra_dev::account","Takes in private key in bytes and return the associated…",null,[[],["librastatus",4]]],[0,"account_resource","libra_dev","",null,null],[5,"libra_LibraAccountResource_from_safe","libra_dev::account_resource","",null,[[["accountstateblob",3]],[["result",4],["libraaccountresource",3],["librastatus",4]]]],[5,"libra_LibraAccountResource_from","","",null,[[],["librastatus",4]]],[0,"error","libra_dev","",null,null],[5,"update_last_error","libra_dev::error","Update the most recent error.",null,[[["string",3]]]],[5,"clear_error","","Clear the most recent error.",null,[[]]],[5,"libra_strerror","","Return the most recent error string.",null,[[]]],[0,"event","libra_dev","",null,null],[5,"libra_LibraEvent_from","libra_dev::event","",null,[[],["librastatus",4]]],[5,"libra_LibraEvent_free","","",null,[[]]],[0,"transaction","libra_dev","",null,null],[5,"libra_SignedTransactionBytes_from","libra_dev::transaction","",null,[[],["librastatus",4]]],[5,"libra_TransactionP2PScript_from","","",null,[[],["librastatus",4]]],[5,"libra_TransactionAddCurrencyScript_from","","",null,[[],["librastatus",4]]],[5,"libra_TransactionRotateCompliancePublicKeyScript_from","","",null,[[],["librastatus",4]]],[5,"libra_TransactionRotateBaseURLScript_from","","",null,[[],["librastatus",4]]],[5,"libra_free_bytes_buffer","","",null,[[]]],[5,"libra_RawTransactionBytes_from","","",null,[[],["librastatus",4]]],[5,"libra_RawTransaction_sign","","",null,[[],["librastatus",4]]],[5,"libra_LibraSignedTransaction_from","","",null,[[],["librastatus",4]]]],"p":[]},\
"libra_fuzzer":{"doc":"","i":[[3,"FuzzTarget","libra_fuzzer","A fuzz target.",null,null],[0,"commands","","",null,null],[5,"make_corpus","libra_fuzzer::commands","Generates data for this fuzz target into the output…",null,[[["path",3],["fuzztarget",3]],["result",6]]],[5,"fuzz_target","","Fuzz a target by running `cargo fuzz run`.",null,[[["osstring",3],["fuzztarget",3],["pathbuf",3],["vec",3]],["result",6]]],[5,"list_targets","","List all known fuzz targets.",null,[[]]],[0,"fuzz_targets","libra_fuzzer","",null,null],[11,"from_env","","Get the current fuzz target from the environment.",0,[[],["result",6]]],[11,"by_name","","Get a fuzz target by name.",0,[[],["option",4]]],[11,"all_targets","","A list of all fuzz targets.",0,[[]]],[8,"FuzzTargetImpl","","Implementation for a particular target of a fuzz operation.",null,null],[10,"name","","The name of the fuzz target.",1,[[]]],[10,"description","","A description for this target.",1,[[]]],[10,"generate","","Generates a new example for this target to store in the…",1,[[["valuegenerator",3]],[["vec",3],["option",4]]]],[10,"fuzz","","Fuzz the target with this data. The fuzzer tests for…",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["fuzztarget",3]]],[11,"deref","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"from_str","","",0,[[],["result",4]]]],"p":[[3,"FuzzTarget"],[8,"FuzzTargetImpl"]]},\
"libra_github_client":{"doc":"","i":[[3,"Client","libra_github_client","Client provides a client around the restful interface to…",null,null],[4,"Error","","",null,null],[13,"HttpError","","",0,null],[13,"InternalError","","",0,null],[13,"MissingField","","",0,null],[13,"NotFound","","",0,null],[13,"SerializationError","","",0,null],[11,"new","","",1,[[["string",3]]]],[11,"delete_file","","Delete a file from a GitHub repository",1,[[],[["result",4],["error",4]]]],[11,"delete_directory","","Recursively delete all files, which as a by product will…",1,[[],[["result",4],["error",4]]]],[11,"get_branches","","Retrieve a list of branches, this is effectively a status…",1,[[],[["vec",3],["error",4],["result",4]]]],[11,"get_directory","","Retrieve the name of contents within a given directory,…",1,[[],[["vec",3],["error",4],["result",4]]]],[11,"get_file","","Retrieve the contents of a file.",1,[[],[["result",4],["string",3],["error",4]]]],[11,"put","","Create or update a file.",1,[[],[["result",4],["error",4]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["response",3]]]],[11,"from","","",0,[[["error",3]]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[4,"Error"],[3,"Client"]]},\
"libra_global_constants":{"doc":"The purpose of this crate is to offer a single source of…","i":[[17,"ASSOCIATION_KEY","libra_global_constants","Definitions of global cryptographic keys (e.g., as held in…",null,null],[17,"CONSENSUS_KEY","","",null,null],[17,"FULLNODE_NETWORK_KEY","","",null,null],[17,"OPERATOR_ACCOUNT","","",null,null],[17,"OPERATOR_KEY","","",null,null],[17,"OWNER_ACCOUNT","","",null,null],[17,"OWNER_KEY","","",null,null],[17,"VALIDATOR_NETWORK_KEY","","",null,null],[17,"EPOCH","","Definitions of global data items (e.g., as held in secure…",null,null],[17,"LAST_VOTED_ROUND","","",null,null],[17,"PREFERRED_ROUND","","",null,null],[17,"WAYPOINT","","",null,null]],"p":[]},\
"libra_json_rpc":{"doc":"JSON RPC endpoint","i":[[0,"errors","libra_json_rpc","",null,null],[4,"ServerCode","libra_json_rpc::errors","Custom JSON RPC server error codes Ranges from -32000 to…",null,null],[13,"DefaultServerError","","",0,null],[13,"VmValidationError","","",0,null],[13,"VmVerificationError","","",0,null],[13,"VmInvariantViolationError","","",0,null],[13,"VmDeserializationError","","",0,null],[13,"VmExecutionError","","",0,null],[13,"VmUnknownError","","",0,null],[13,"MempoolInvalidSeqNumber","","",0,null],[13,"MempoolIsFull","","",0,null],[13,"MempoolTooManyTransactions","","",0,null],[13,"MempoolInvalidUpdate","","",0,null],[13,"MempoolVmError","","",0,null],[13,"MempoolUnknownError","","",0,null],[3,"JsonRpcError","","",null,null],[12,"code","","",1,null],[12,"message","","",1,null],[12,"data","","",1,null],[0,"views","libra_json_rpc","",null,null],[3,"AmountView","libra_json_rpc::views","",null,null],[12,"amount","","",2,null],[12,"currency","","",2,null],[4,"AccountRoleView","","",null,null],[13,"Unknown","","",3,null],[13,"Unhosted","","",3,null],[13,"Empty","","",3,null],[13,"ChildVASP","","",3,null],[12,"parent_vasp_address","libra_json_rpc::views::AccountRoleView","",4,null],[13,"ParentVASP","libra_json_rpc::views","",3,null],[12,"human_name","libra_json_rpc::views::AccountRoleView","",5,null],[12,"base_url","","",5,null],[12,"expiration_time","","",5,null],[12,"compliance_key","","",5,null],[3,"AccountView","libra_json_rpc::views","",null,null],[12,"balances","","",6,null],[12,"sequence_number","","",6,null],[12,"authentication_key","","",6,null],[12,"sent_events_key","","",6,null],[12,"received_events_key","","",6,null],[12,"delegated_key_rotation_capability","","",6,null],[12,"delegated_withdrawal_capability","","",6,null],[12,"is_frozen","","",6,null],[12,"role_id","","",6,null],[12,"role","","",6,null],[3,"EventView","","",null,null],[12,"key","","",7,null],[12,"sequence_number","","",7,null],[12,"transaction_version","","",7,null],[12,"data","","",7,null],[4,"EventDataView","","",null,null],[13,"Burn","","",8,null],[12,"amount","libra_json_rpc::views::EventDataView","",9,null],[12,"preburn_address","","",9,null],[13,"CancelBurn","libra_json_rpc::views","",8,null],[12,"amount","libra_json_rpc::views::EventDataView","",10,null],[12,"preburn_address","","",10,null],[13,"Mint","libra_json_rpc::views","",8,null],[12,"amount","libra_json_rpc::views::EventDataView","",11,null],[13,"Preburn","libra_json_rpc::views","",8,null],[12,"amount","libra_json_rpc::views::EventDataView","",12,null],[12,"preburn_address","","",12,null],[13,"ReceivedPayment","libra_json_rpc::views","",8,null],[12,"amount","libra_json_rpc::views::EventDataView","",13,null],[12,"sender","","",13,null],[12,"metadata","","",13,null],[13,"SentPayment","libra_json_rpc::views","",8,null],[12,"amount","libra_json_rpc::views::EventDataView","",14,null],[12,"receiver","","",14,null],[12,"metadata","","",14,null],[13,"Upgrade","libra_json_rpc::views","",8,null],[12,"write_set","libra_json_rpc::views::EventDataView","",15,null],[13,"NewEpoch","libra_json_rpc::views","",8,null],[12,"epoch","libra_json_rpc::views::EventDataView","",16,null],[13,"NewBlock","libra_json_rpc::views","",8,null],[12,"round","libra_json_rpc::views::EventDataView","",17,null],[12,"proposer","","",17,null],[12,"proposed_time","","",17,null],[13,"Unknown","libra_json_rpc::views","",8,null],[3,"BlockMetadata","","",null,null],[12,"version","","",18,null],[12,"timestamp","","",18,null],[3,"BytesView","","",null,null],[12,"0","","",19,null],[3,"TransactionView","","",null,null],[12,"version","","",20,null],[12,"transaction","","",20,null],[12,"hash","","",20,null],[12,"events","","",20,null],[12,"vm_status","","",20,null],[12,"gas_used","","",20,null],[4,"TransactionDataView","","",null,null],[13,"BlockMetadata","","",21,null],[12,"timestamp_usecs","libra_json_rpc::views::TransactionDataView","",22,null],[13,"WriteSet","libra_json_rpc::views","",21,null],[13,"UserTransaction","","",21,null],[12,"sender","libra_json_rpc::views::TransactionDataView","",23,null],[12,"signature_scheme","","",23,null],[12,"signature","","",23,null],[12,"public_key","","",23,null],[12,"sequence_number","","",23,null],[12,"max_gas_amount","","",23,null],[12,"gas_unit_price","","",23,null],[12,"gas_currency","","",23,null],[12,"expiration_time","","",23,null],[12,"script_hash","","",23,null],[12,"script","","",23,null],[13,"UnknownTransaction","libra_json_rpc::views","",21,null],[4,"ScriptView","","",null,null],[13,"PeerToPeer","","",24,null],[12,"receiver","libra_json_rpc::views::ScriptView","",25,null],[12,"amount","","",25,null],[12,"currency","","",25,null],[12,"metadata","","",25,null],[12,"metadata_signature","","",25,null],[13,"Mint","libra_json_rpc::views","",24,null],[12,"receiver","libra_json_rpc::views::ScriptView","",26,null],[12,"currency","","",26,null],[12,"auth_key_prefix","","",26,null],[12,"amount","","",26,null],[13,"Unknown","libra_json_rpc::views","",24,null],[3,"CurrencyInfoView","","",null,null],[12,"code","","",27,null],[12,"scaling_factor","","",27,null],[12,"fractional_part","","",27,null],[3,"StateProofView","","",null,null],[12,"ledger_info_with_signatures","","",28,null],[12,"epoch_change_proof","","",28,null],[12,"ledger_consistency_proof","","",28,null],[3,"AccountStateWithProofView","","",null,null],[12,"version","","",29,null],[12,"blob","","",29,null],[12,"proof","","",29,null],[3,"AccountStateProofView","","",null,null],[12,"ledger_info_to_transaction_info_proof","","",30,null],[12,"transaction_info","","",30,null],[12,"transaction_info_to_account_proof","","",30,null],[5,"bootstrap","libra_json_rpc","Creates HTTP server (warp-based) that serves JSON RPC…",null,[[["socketaddr",4],["mempoolclientsender",6],["roletype",4],["arc",3],["dbreader",8]],["runtime",3]]],[5,"bootstrap_from_config","","Creates JSON RPC endpoint by given node config",null,[[["nodeconfig",3],["mempoolclientsender",6],["arc",3],["dbreader",8]],["runtime",3]]],[5,"test_bootstrap","","Creates JSON RPC server for a Validator node Should only…",null,[[["socketaddr",4],["mempoolclientsender",6],["arc",3],["dbreader",8]],["runtime",3]]],[0,"fuzzing","","Fuzzer for JSON RPC service",null,null],[5,"generate_corpus","libra_json_rpc::fuzzing","generate_corpus produces an arbitrary transaction to…",null,[[["valuegenerator",3]],["vec",3]]],[5,"fuzzer","","",null,[[]]],[11,"from","libra_json_rpc::errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"from","libra_json_rpc::views","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"test_only_hash","","",18,[[],["hashvalue",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"test_only_hash","","",19,[[],["hashvalue",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"test_only_hash","","",20,[[],["hashvalue",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"test_only_hash","","",21,[[],["hashvalue",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"test_only_hash","","",24,[[],["hashvalue",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"test_only_hash","","",27,[[],["hashvalue",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"test_only_hash","","",28,[[],["hashvalue",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"test_only_hash","","",29,[[],["hashvalue",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"test_only_hash","","",30,[[],["hashvalue",3]]],[11,"fmt","","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",19,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",24,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_json_rpc::errors","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_json_rpc::views","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",20,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",18,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_json_rpc::errors","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","libra_json_rpc::views","",19,[[["vec",3]],["bytesview",3]]],[11,"from","","",3,[[["accountrole",4]],["accountroleview",4]]],[11,"from","","",24,[[["transactionpayload",4]],["scriptview",4]]],[11,"from","","",19,[[],["bytesview",3]]],[11,"from","","Tries to convert the provided byte array into Event Key.",7,[[],["eventview",3]]],[11,"from","","",21,[[["transaction",4]],["transactiondataview",4]]],[11,"from","","",27,[[["currencyinforesource",3]],["currencyinfoview",3]]],[11,"clone","","",29,[[],["accountstatewithproofview",3]]],[11,"clone","","",18,[[],["blockmetadata",3]]],[11,"clone","","",28,[[],["stateproofview",3]]],[11,"clone","","",19,[[],["bytesview",3]]],[11,"clone","","",7,[[],["eventview",3]]],[11,"clone","libra_json_rpc::errors","",1,[[],["jsonrpcerror",3]]],[11,"clone","libra_json_rpc::views","",24,[[],["scriptview",4]]],[11,"clone","","",6,[[],["accountview",3]]],[11,"clone","","",20,[[],["transactionview",3]]],[11,"clone","","",30,[[],["accountstateproofview",3]]],[11,"clone","","",8,[[],["eventdataview",4]]],[11,"clone","","",21,[[],["transactiondataview",4]]],[11,"clone","","",3,[[],["accountroleview",4]]],[11,"clone","","",2,[[],["amountview",3]]],[11,"clone","","",27,[[],["currencyinfoview",3]]],[11,"try_from","","",29,[[["accountstatewithproof",3]],[["accountstatewithproofview",3],["error",3],["result",4]]]],[11,"try_from","","",30,[[["accountstateproof",3]],[["error",3],["accountstateproofview",3],["result",4]]]],[11,"try_from","","",28,[[],[["result",4],["stateproofview",3]]]],[11,"deserialize","","",3,[[],[["accountroleview",4],["result",4]]]],[11,"deserialize","","",20,[[],[["result",4],["transactionview",3]]]],[11,"deserialize","","",2,[[],[["result",4],["amountview",3]]]],[11,"deserialize","","",8,[[],[["result",4],["eventdataview",4]]]],[11,"deserialize","","",30,[[],[["result",4],["accountstateproofview",3]]]],[11,"deserialize","","",29,[[],[["accountstatewithproofview",3],["result",4]]]],[11,"deserialize","libra_json_rpc::errors","",1,[[],[["jsonrpcerror",3],["result",4]]]],[11,"deserialize","libra_json_rpc::views","",18,[[],[["result",4],["blockmetadata",3]]]],[11,"deserialize","","",19,[[],[["bytesview",3],["result",4]]]],[11,"deserialize","","",27,[[],[["currencyinfoview",3],["result",4]]]],[11,"deserialize","","",24,[[],[["scriptview",4],["result",4]]]],[11,"deserialize","","",6,[[],[["accountview",3],["result",4]]]],[11,"deserialize","","",21,[[],[["result",4],["transactiondataview",4]]]],[11,"deserialize","","",7,[[],[["eventview",3],["result",4]]]],[11,"deserialize","","",28,[[],[["result",4],["stateproofview",3]]]],[11,"eq","","",20,[[["transactionview",3]]]],[11,"ne","","",20,[[["transactionview",3]]]],[11,"eq","","",3,[[["accountroleview",4]]]],[11,"ne","","",3,[[["accountroleview",4]]]],[11,"eq","","",19,[[["bytesview",3]]]],[11,"ne","","",19,[[["bytesview",3]]]],[11,"eq","","",30,[[["accountstateproofview",3]]]],[11,"ne","","",30,[[["accountstateproofview",3]]]],[11,"eq","","",27,[[["currencyinfoview",3]]]],[11,"ne","","",27,[[["currencyinfoview",3]]]],[11,"eq","","",21,[[["transactiondataview",4]]]],[11,"ne","","",21,[[["transactiondataview",4]]]],[11,"eq","","",29,[[["accountstatewithproofview",3]]]],[11,"ne","","",29,[[["accountstatewithproofview",3]]]],[11,"eq","","",6,[[["accountview",3]]]],[11,"ne","","",6,[[["accountview",3]]]],[11,"eq","","",8,[[["eventdataview",4]]]],[11,"ne","","",8,[[["eventdataview",4]]]],[11,"eq","","",24,[[["scriptview",4]]]],[11,"ne","","",24,[[["scriptview",4]]]],[11,"eq","","",18,[[["blockmetadata",3]]]],[11,"ne","","",18,[[["blockmetadata",3]]]],[11,"eq","","",2,[[["amountview",3]]]],[11,"ne","","",2,[[["amountview",3]]]],[11,"eq","","",7,[[["eventview",3]]]],[11,"ne","","",7,[[["eventview",3]]]],[11,"eq","","",28,[[["stateproofview",3]]]],[11,"ne","","",28,[[["stateproofview",3]]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","libra_json_rpc::errors","",1,[[],["result",4]]],[11,"serialize","libra_json_rpc::views","",18,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","libra_json_rpc::errors","",1,[[],["value",4]]],[11,"invalid_request","","",1,[[],["jsonrpcerror",3]]],[11,"invalid_params","","",1,[[],["jsonrpcerror",3]]],[11,"method_not_found","","",1,[[],["jsonrpcerror",3]]],[11,"internal_error","","",1,[[["string",3]],["jsonrpcerror",3]]],[11,"mempool_error","","",1,[[["mempoolstatus",3]],[["result",4],["jsonrpcerror",3],["error",3]]]],[11,"vm_error","","",1,[[["vmstatus",3]],["jsonrpcerror",3]]],[11,"get_vm_error","","",1,[[],[["vmstatus",3],["option",4]]]],[11,"new","libra_json_rpc::views","",6,[[["identifier",3],["accountresource",3],["balanceresource",3],["accountrole",4],["btreemap",3]],["accountview",3]]],[11,"into_bytes","","",19,[[],[["vec",3],["error",3],["result",4]]]],[11,"get_name","","",24,[[],["string",3]]]],"p":[[4,"ServerCode"],[3,"JsonRpcError"],[3,"AmountView"],[4,"AccountRoleView"],[13,"ChildVASP"],[13,"ParentVASP"],[3,"AccountView"],[3,"EventView"],[4,"EventDataView"],[13,"Burn"],[13,"CancelBurn"],[13,"Mint"],[13,"Preburn"],[13,"ReceivedPayment"],[13,"SentPayment"],[13,"Upgrade"],[13,"NewEpoch"],[13,"NewBlock"],[3,"BlockMetadata"],[3,"BytesView"],[3,"TransactionView"],[4,"TransactionDataView"],[13,"BlockMetadata"],[13,"UserTransaction"],[4,"ScriptView"],[13,"PeerToPeer"],[13,"Mint"],[3,"CurrencyInfoView"],[3,"StateProofView"],[3,"AccountStateWithProofView"],[3,"AccountStateProofView"]]},\
"libra_json_rpc_client":{"doc":"","i":[[0,"errors","libra_json_rpc_client","",null,null],[4,"ServerCode","libra_json_rpc_client::errors","Custom JSON RPC server error codes Ranges from -32000 to…",null,null],[13,"DefaultServerError","","",0,null],[13,"VmValidationError","","",0,null],[13,"VmVerificationError","","",0,null],[13,"VmInvariantViolationError","","",0,null],[13,"VmDeserializationError","","",0,null],[13,"VmExecutionError","","",0,null],[13,"VmUnknownError","","",0,null],[13,"MempoolInvalidSeqNumber","","",0,null],[13,"MempoolIsFull","","",0,null],[13,"MempoolTooManyTransactions","","",0,null],[13,"MempoolInvalidUpdate","","",0,null],[13,"MempoolVmError","","",0,null],[13,"MempoolUnknownError","","",0,null],[3,"JsonRpcError","","",null,null],[12,"code","","",1,null],[12,"message","","",1,null],[12,"data","","",1,null],[0,"views","libra_json_rpc_client","",null,null],[3,"AmountView","libra_json_rpc_client::views","",null,null],[12,"amount","","",2,null],[12,"currency","","",2,null],[4,"AccountRoleView","","",null,null],[13,"Unknown","","",3,null],[13,"Unhosted","","",3,null],[13,"Empty","","",3,null],[13,"ChildVASP","","",3,null],[12,"parent_vasp_address","libra_json_rpc_client::views::AccountRoleView","",4,null],[13,"ParentVASP","libra_json_rpc_client::views","",3,null],[12,"human_name","libra_json_rpc_client::views::AccountRoleView","",5,null],[12,"base_url","","",5,null],[12,"expiration_time","","",5,null],[12,"compliance_key","","",5,null],[3,"AccountView","libra_json_rpc_client::views","",null,null],[12,"balances","","",6,null],[12,"sequence_number","","",6,null],[12,"authentication_key","","",6,null],[12,"sent_events_key","","",6,null],[12,"received_events_key","","",6,null],[12,"delegated_key_rotation_capability","","",6,null],[12,"delegated_withdrawal_capability","","",6,null],[12,"is_frozen","","",6,null],[12,"role_id","","",6,null],[12,"role","","",6,null],[3,"EventView","","",null,null],[12,"key","","",7,null],[12,"sequence_number","","",7,null],[12,"transaction_version","","",7,null],[12,"data","","",7,null],[4,"EventDataView","","",null,null],[13,"Burn","","",8,null],[12,"amount","libra_json_rpc_client::views::EventDataView","",9,null],[12,"preburn_address","","",9,null],[13,"CancelBurn","libra_json_rpc_client::views","",8,null],[12,"amount","libra_json_rpc_client::views::EventDataView","",10,null],[12,"preburn_address","","",10,null],[13,"Mint","libra_json_rpc_client::views","",8,null],[12,"amount","libra_json_rpc_client::views::EventDataView","",11,null],[13,"Preburn","libra_json_rpc_client::views","",8,null],[12,"amount","libra_json_rpc_client::views::EventDataView","",12,null],[12,"preburn_address","","",12,null],[13,"ReceivedPayment","libra_json_rpc_client::views","",8,null],[12,"amount","libra_json_rpc_client::views::EventDataView","",13,null],[12,"sender","","",13,null],[12,"metadata","","",13,null],[13,"SentPayment","libra_json_rpc_client::views","",8,null],[12,"amount","libra_json_rpc_client::views::EventDataView","",14,null],[12,"receiver","","",14,null],[12,"metadata","","",14,null],[13,"Upgrade","libra_json_rpc_client::views","",8,null],[12,"write_set","libra_json_rpc_client::views::EventDataView","",15,null],[13,"NewEpoch","libra_json_rpc_client::views","",8,null],[12,"epoch","libra_json_rpc_client::views::EventDataView","",16,null],[13,"NewBlock","libra_json_rpc_client::views","",8,null],[12,"round","libra_json_rpc_client::views::EventDataView","",17,null],[12,"proposer","","",17,null],[12,"proposed_time","","",17,null],[13,"Unknown","libra_json_rpc_client::views","",8,null],[3,"BlockMetadata","","",null,null],[12,"version","","",18,null],[12,"timestamp","","",18,null],[3,"BytesView","","",null,null],[12,"0","","",19,null],[3,"TransactionView","","",null,null],[12,"version","","",20,null],[12,"transaction","","",20,null],[12,"hash","","",20,null],[12,"events","","",20,null],[12,"vm_status","","",20,null],[12,"gas_used","","",20,null],[4,"TransactionDataView","","",null,null],[13,"BlockMetadata","","",21,null],[12,"timestamp_usecs","libra_json_rpc_client::views::TransactionDataView","",22,null],[13,"WriteSet","libra_json_rpc_client::views","",21,null],[13,"UserTransaction","","",21,null],[12,"sender","libra_json_rpc_client::views::TransactionDataView","",23,null],[12,"signature_scheme","","",23,null],[12,"signature","","",23,null],[12,"public_key","","",23,null],[12,"sequence_number","","",23,null],[12,"max_gas_amount","","",23,null],[12,"gas_unit_price","","",23,null],[12,"gas_currency","","",23,null],[12,"expiration_time","","",23,null],[12,"script_hash","","",23,null],[12,"script","","",23,null],[13,"UnknownTransaction","libra_json_rpc_client::views","",21,null],[4,"ScriptView","","",null,null],[13,"PeerToPeer","","",24,null],[12,"receiver","libra_json_rpc_client::views::ScriptView","",25,null],[12,"amount","","",25,null],[12,"currency","","",25,null],[12,"metadata","","",25,null],[12,"metadata_signature","","",25,null],[13,"Mint","libra_json_rpc_client::views","",24,null],[12,"receiver","libra_json_rpc_client::views::ScriptView","",26,null],[12,"currency","","",26,null],[12,"auth_key_prefix","","",26,null],[12,"amount","","",26,null],[13,"Unknown","libra_json_rpc_client::views","",24,null],[3,"CurrencyInfoView","","",null,null],[12,"code","","",27,null],[12,"scaling_factor","","",27,null],[12,"fractional_part","","",27,null],[3,"StateProofView","","",null,null],[12,"ledger_info_with_signatures","","",28,null],[12,"epoch_change_proof","","",28,null],[12,"ledger_consistency_proof","","",28,null],[3,"AccountStateWithProofView","","",null,null],[12,"version","","",29,null],[12,"blob","","",29,null],[12,"proof","","",29,null],[3,"AccountStateProofView","","",null,null],[12,"ledger_info_to_transaction_info_proof","","",30,null],[12,"transaction_info","","",30,null],[12,"transaction_info_to_account_proof","","",30,null],[3,"JsonRpcClient","libra_json_rpc_client","",null,null],[3,"JsonRpcAsyncClient","","",null,null],[3,"JsonRpcBatch","","",null,null],[12,"requests","","",31,null],[4,"JsonRpcResponse","","",null,null],[13,"SubmissionResponse","","",32,null],[13,"AccountResponse","","",32,null],[13,"StateProofResponse","","",32,null],[13,"AccountTransactionResponse","","",32,null],[13,"TransactionsResponse","","",32,null],[13,"EventsResponse","","",32,null],[13,"BlockMetadataResponse","","",32,null],[13,"CurrenciesResponse","","",32,null],[13,"AccountStateWithProofResponse","","",32,null],[13,"NetworkStatusResponse","","",32,null],[13,"UnknownResponse","","",32,null],[5,"get_response_from_batch","","",null,[[],[["result",6],["result",6]]]],[5,"process_batch_response","","Helper methods for basic payload processing ///",null,[[["vec",3],["value",4],["jsonrpcbatch",3]],[["result",6],["vec",3]]]],[11,"new","","",33,[[["url",3]],["result",6]]],[11,"execute","","Sends a JSON RPC batched request. Returns a vector of…",33,[[["jsonrpcbatch",3]],[["result",6],["vec",3]]]],[11,"send_with_retry","","",33,[[["value",4]],[["response",3],["result",6]]]],[11,"new","","",31,[[]]],[11,"json_request","","",31,[[],["value",4]]],[11,"add_request","","",31,[[["string",3],["vec",3],["value",4]]]],[11,"add_submit_request","","",31,[[["signedtransaction",3]],["result",6]]],[11,"add_get_account_state_request","","",31,[[["accountaddress",3]]]],[11,"add_get_metadata_request","","",31,[[["option",4]]]],[11,"add_get_currencies_info","","",31,[[]]],[11,"add_get_transactions_request","","",31,[[]]],[11,"add_get_account_transaction_request","","",31,[[["accountaddress",3]]]],[11,"add_get_events_request","","",31,[[["string",3]]]],[11,"add_get_state_proof_request","","",31,[[]]],[11,"add_get_account_state_with_proof_request","","",31,[[["accountaddress",3],["option",4]]]],[11,"add_get_network_status_request","","",31,[[]]],[11,"new","","Pass in full url for endpoint, supports HTTPS",34,[[["url",3]]]],[11,"new_with_client","","",34,[[["url",3],["client",3]]]],[11,"get_accounts_state","","",34,[[]]],[11,"submit_transaction","","",34,[[["signedtransaction",3]]]],[11,"execute","","",34,[[["jsonrpcbatch",3]]]],[8,"ResponseAsView","","For JSON RPC views that are returned as part of a…",null,null],[11,"unexpected_response_error","","",35,[[["jsonrpcresponse",4]],["result",6]]],[11,"from_response","","",35,[[["jsonrpcresponse",4]],["result",6]]],[11,"optional_from_response","","",35,[[["jsonrpcresponse",4]],[["result",6],["option",4]]]],[11,"vec_from_response","","",35,[[["jsonrpcresponse",4]],[["result",6],["vec",3]]]],[11,"from","libra_json_rpc_client::errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"from","libra_json_rpc_client::views","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"test_only_hash","","",18,[[],["hashvalue",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"test_only_hash","","",19,[[],["hashvalue",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"test_only_hash","","",20,[[],["hashvalue",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"test_only_hash","","",21,[[],["hashvalue",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"test_only_hash","","",24,[[],["hashvalue",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"test_only_hash","","",27,[[],["hashvalue",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"test_only_hash","","",28,[[],["hashvalue",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"test_only_hash","","",29,[[],["hashvalue",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"test_only_hash","","",30,[[],["hashvalue",3]]],[11,"vzip","","",30,[[]]],[11,"from","libra_json_rpc_client","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"initialize","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"fmt","libra_json_rpc_client::views","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",19,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",8,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",24,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_json_rpc_client::errors","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_json_rpc_client::views","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",20,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",7,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",18,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_json_rpc_client::errors","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","libra_json_rpc_client::views","",19,[[["vec",3]],["bytesview",3]]],[11,"from","","",3,[[["accountrole",4]],["accountroleview",4]]],[11,"from","","",24,[[["transactionpayload",4]],["scriptview",4]]],[11,"from","","",19,[[],["bytesview",3]]],[11,"from","","Tries to convert the provided byte array into Event Key.",7,[[],["eventview",3]]],[11,"from","","",21,[[["transaction",4]],["transactiondataview",4]]],[11,"from","","",27,[[["currencyinforesource",3]],["currencyinfoview",3]]],[11,"clone","","",29,[[],["accountstatewithproofview",3]]],[11,"clone","","",18,[[],["blockmetadata",3]]],[11,"clone","","",28,[[],["stateproofview",3]]],[11,"clone","","",19,[[],["bytesview",3]]],[11,"clone","","",7,[[],["eventview",3]]],[11,"clone","libra_json_rpc_client::errors","",1,[[],["jsonrpcerror",3]]],[11,"clone","libra_json_rpc_client::views","",24,[[],["scriptview",4]]],[11,"clone","","",6,[[],["accountview",3]]],[11,"clone","","",20,[[],["transactionview",3]]],[11,"clone","","",30,[[],["accountstateproofview",3]]],[11,"clone","","",8,[[],["eventdataview",4]]],[11,"clone","","",21,[[],["transactiondataview",4]]],[11,"clone","","",3,[[],["accountroleview",4]]],[11,"clone","","",2,[[],["amountview",3]]],[11,"clone","","",27,[[],["currencyinfoview",3]]],[11,"try_from","","",29,[[["accountstatewithproof",3]],[["result",4],["accountstatewithproofview",3],["error",3]]]],[11,"try_from","","",30,[[["accountstateproof",3]],[["result",4],["accountstateproofview",3],["error",3]]]],[11,"try_from","","",28,[[],[["result",4],["stateproofview",3]]]],[11,"deserialize","","",3,[[],[["accountroleview",4],["result",4]]]],[11,"deserialize","","",20,[[],[["result",4],["transactionview",3]]]],[11,"deserialize","","",2,[[],[["amountview",3],["result",4]]]],[11,"deserialize","","",8,[[],[["eventdataview",4],["result",4]]]],[11,"deserialize","","",30,[[],[["result",4],["accountstateproofview",3]]]],[11,"deserialize","","",29,[[],[["result",4],["accountstatewithproofview",3]]]],[11,"deserialize","libra_json_rpc_client::errors","",1,[[],[["result",4],["jsonrpcerror",3]]]],[11,"deserialize","libra_json_rpc_client::views","",18,[[],[["result",4],["blockmetadata",3]]]],[11,"deserialize","","",19,[[],[["result",4],["bytesview",3]]]],[11,"deserialize","","",27,[[],[["result",4],["currencyinfoview",3]]]],[11,"deserialize","","",24,[[],[["scriptview",4],["result",4]]]],[11,"deserialize","","",6,[[],[["result",4],["accountview",3]]]],[11,"deserialize","","",21,[[],[["result",4],["transactiondataview",4]]]],[11,"deserialize","","",7,[[],[["eventview",3],["result",4]]]],[11,"deserialize","","",28,[[],[["result",4],["stateproofview",3]]]],[11,"eq","","",20,[[["transactionview",3]]]],[11,"ne","","",20,[[["transactionview",3]]]],[11,"eq","","",3,[[["accountroleview",4]]]],[11,"ne","","",3,[[["accountroleview",4]]]],[11,"eq","","",19,[[["bytesview",3]]]],[11,"ne","","",19,[[["bytesview",3]]]],[11,"eq","","",30,[[["accountstateproofview",3]]]],[11,"ne","","",30,[[["accountstateproofview",3]]]],[11,"eq","","",27,[[["currencyinfoview",3]]]],[11,"ne","","",27,[[["currencyinfoview",3]]]],[11,"eq","","",21,[[["transactiondataview",4]]]],[11,"ne","","",21,[[["transactiondataview",4]]]],[11,"eq","","",29,[[["accountstatewithproofview",3]]]],[11,"ne","","",29,[[["accountstatewithproofview",3]]]],[11,"eq","","",6,[[["accountview",3]]]],[11,"ne","","",6,[[["accountview",3]]]],[11,"eq","","",8,[[["eventdataview",4]]]],[11,"ne","","",8,[[["eventdataview",4]]]],[11,"eq","","",24,[[["scriptview",4]]]],[11,"ne","","",24,[[["scriptview",4]]]],[11,"eq","","",18,[[["blockmetadata",3]]]],[11,"ne","","",18,[[["blockmetadata",3]]]],[11,"eq","","",2,[[["amountview",3]]]],[11,"ne","","",2,[[["amountview",3]]]],[11,"eq","","",7,[[["eventview",3]]]],[11,"ne","","",7,[[["eventview",3]]]],[11,"eq","","",28,[[["stateproofview",3]]]],[11,"ne","","",28,[[["stateproofview",3]]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","libra_json_rpc_client::errors","",1,[[],["result",4]]],[11,"serialize","libra_json_rpc_client::views","",18,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",29,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"optional_from_response","","",6,[[["jsonrpcresponse",4]],[["result",6],["option",4]]]],[11,"vec_from_response","","",7,[[["jsonrpcresponse",4]],[["result",6],["vec",3]]]],[11,"from_response","","",18,[[["jsonrpcresponse",4]],["result",6]]],[11,"vec_from_response","","",27,[[["jsonrpcresponse",4]],[["result",6],["vec",3]]]],[11,"optional_from_response","","",20,[[["jsonrpcresponse",4]],[["result",6],["option",4]]]],[11,"vec_from_response","","",20,[[["jsonrpcresponse",4]],[["result",6],["vec",3]]]],[11,"from_response","","",28,[[["jsonrpcresponse",4]],["result",6]]],[11,"from_response","","",29,[[["jsonrpcresponse",4]],["result",6]]],[11,"clone","libra_json_rpc_client","",31,[[],["jsonrpcbatch",3]]],[11,"clone","","",34,[[],["jsonrpcasyncclient",3]]],[11,"clone","","",32,[[],["jsonrpcresponse",4]]],[11,"default","","",31,[[],["jsonrpcbatch",3]]],[11,"eq","","",32,[[["jsonrpcresponse",4]]]],[11,"ne","","",32,[[["jsonrpcresponse",4]]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"try_from","","",32,[[],[["result",6],["jsonrpcresponse",4]]]],[11,"serialize","libra_json_rpc_client::errors","",1,[[],["value",4]]],[11,"invalid_request","","",1,[[],["jsonrpcerror",3]]],[11,"invalid_params","","",1,[[],["jsonrpcerror",3]]],[11,"method_not_found","","",1,[[],["jsonrpcerror",3]]],[11,"internal_error","","",1,[[["string",3]],["jsonrpcerror",3]]],[11,"mempool_error","","",1,[[["mempoolstatus",3]],[["error",3],["jsonrpcerror",3],["result",4]]]],[11,"vm_error","","",1,[[["vmstatus",3]],["jsonrpcerror",3]]],[11,"get_vm_error","","",1,[[],[["vmstatus",3],["option",4]]]],[11,"new","libra_json_rpc_client::views","",6,[[["btreemap",3],["accountresource",3],["balanceresource",3],["identifier",3],["accountrole",4]],["accountview",3]]],[11,"into_bytes","","",19,[[],[["vec",3],["result",4],["error",3]]]],[11,"get_name","","",24,[[],["string",3]]],[11,"unexpected_response_error","libra_json_rpc_client","",35,[[["jsonrpcresponse",4]],["result",6]]],[11,"from_response","","",35,[[["jsonrpcresponse",4]],["result",6]]],[11,"optional_from_response","","",35,[[["jsonrpcresponse",4]],[["result",6],["option",4]]]],[11,"vec_from_response","","",35,[[["jsonrpcresponse",4]],[["result",6],["vec",3]]]]],"p":[[4,"ServerCode"],[3,"JsonRpcError"],[3,"AmountView"],[4,"AccountRoleView"],[13,"ChildVASP"],[13,"ParentVASP"],[3,"AccountView"],[3,"EventView"],[4,"EventDataView"],[13,"Burn"],[13,"CancelBurn"],[13,"Mint"],[13,"Preburn"],[13,"ReceivedPayment"],[13,"SentPayment"],[13,"Upgrade"],[13,"NewEpoch"],[13,"NewBlock"],[3,"BlockMetadata"],[3,"BytesView"],[3,"TransactionView"],[4,"TransactionDataView"],[13,"BlockMetadata"],[13,"UserTransaction"],[4,"ScriptView"],[13,"PeerToPeer"],[13,"Mint"],[3,"CurrencyInfoView"],[3,"StateProofView"],[3,"AccountStateWithProofView"],[3,"AccountStateProofView"],[3,"JsonRpcBatch"],[4,"JsonRpcResponse"],[3,"JsonRpcClient"],[3,"JsonRpcAsyncClient"],[8,"ResponseAsView"]]},\
"libra_json_rpc_types":{"doc":"","i":[[0,"errors","libra_json_rpc_types","",null,null],[3,"JsonRpcError","libra_json_rpc_types::errors","",null,null],[12,"code","","",0,null],[12,"message","","",0,null],[12,"data","","",0,null],[4,"ServerCode","","Custom JSON RPC server error codes Ranges from -32000 to…",null,null],[13,"DefaultServerError","","",1,null],[13,"VmValidationError","","",1,null],[13,"VmVerificationError","","",1,null],[13,"VmInvariantViolationError","","",1,null],[13,"VmDeserializationError","","",1,null],[13,"VmExecutionError","","",1,null],[13,"VmUnknownError","","",1,null],[13,"MempoolInvalidSeqNumber","","",1,null],[13,"MempoolIsFull","","",1,null],[13,"MempoolTooManyTransactions","","",1,null],[13,"MempoolInvalidUpdate","","",1,null],[13,"MempoolVmError","","",1,null],[13,"MempoolUnknownError","","",1,null],[11,"serialize","","",0,[[],["value",4]]],[11,"invalid_request","","",0,[[]]],[11,"invalid_params","","",0,[[]]],[11,"method_not_found","","",0,[[]]],[11,"internal_error","","",0,[[["string",3]]]],[11,"mempool_error","","",0,[[["mempoolstatus",3]],["result",6]]],[11,"vm_error","","",0,[[["vmstatus",3]]]],[11,"get_vm_error","","",0,[[],[["option",4],["vmstatus",3]]]],[0,"views","libra_json_rpc_types","",null,null],[3,"AmountView","libra_json_rpc_types::views","",null,null],[12,"amount","","",2,null],[12,"currency","","",2,null],[3,"AccountView","","",null,null],[12,"balances","","",3,null],[12,"sequence_number","","",3,null],[12,"authentication_key","","",3,null],[12,"sent_events_key","","",3,null],[12,"received_events_key","","",3,null],[12,"delegated_key_rotation_capability","","",3,null],[12,"delegated_withdrawal_capability","","",3,null],[12,"is_frozen","","",3,null],[12,"role_id","","",3,null],[12,"role","","",3,null],[3,"EventView","","",null,null],[12,"key","","",4,null],[12,"sequence_number","","",4,null],[12,"transaction_version","","",4,null],[12,"data","","",4,null],[3,"BlockMetadata","","",null,null],[12,"version","","",5,null],[12,"timestamp","","",5,null],[3,"BytesView","","",null,null],[12,"0","","",6,null],[3,"TransactionView","","",null,null],[12,"version","","",7,null],[12,"transaction","","",7,null],[12,"hash","","",7,null],[12,"events","","",7,null],[12,"vm_status","","",7,null],[12,"gas_used","","",7,null],[3,"CurrencyInfoView","","",null,null],[12,"code","","",8,null],[12,"scaling_factor","","",8,null],[12,"fractional_part","","",8,null],[3,"StateProofView","","",null,null],[12,"ledger_info_with_signatures","","",9,null],[12,"epoch_change_proof","","",9,null],[12,"ledger_consistency_proof","","",9,null],[3,"AccountStateWithProofView","","",null,null],[12,"version","","",10,null],[12,"blob","","",10,null],[12,"proof","","",10,null],[3,"AccountStateProofView","","",null,null],[12,"ledger_info_to_transaction_info_proof","","",11,null],[12,"transaction_info","","",11,null],[12,"transaction_info_to_account_proof","","",11,null],[4,"AccountRoleView","","",null,null],[13,"Unknown","","",12,null],[13,"Unhosted","","",12,null],[13,"Empty","","",12,null],[13,"ChildVASP","","",12,null],[12,"parent_vasp_address","libra_json_rpc_types::views::AccountRoleView","",13,null],[13,"ParentVASP","libra_json_rpc_types::views","",12,null],[12,"human_name","libra_json_rpc_types::views::AccountRoleView","",14,null],[12,"base_url","","",14,null],[12,"expiration_time","","",14,null],[12,"compliance_key","","",14,null],[4,"EventDataView","libra_json_rpc_types::views","",null,null],[13,"Burn","","",15,null],[12,"amount","libra_json_rpc_types::views::EventDataView","",16,null],[12,"preburn_address","","",16,null],[13,"CancelBurn","libra_json_rpc_types::views","",15,null],[12,"amount","libra_json_rpc_types::views::EventDataView","",17,null],[12,"preburn_address","","",17,null],[13,"Mint","libra_json_rpc_types::views","",15,null],[12,"amount","libra_json_rpc_types::views::EventDataView","",18,null],[13,"Preburn","libra_json_rpc_types::views","",15,null],[12,"amount","libra_json_rpc_types::views::EventDataView","",19,null],[12,"preburn_address","","",19,null],[13,"ReceivedPayment","libra_json_rpc_types::views","",15,null],[12,"amount","libra_json_rpc_types::views::EventDataView","",20,null],[12,"sender","","",20,null],[12,"metadata","","",20,null],[13,"SentPayment","libra_json_rpc_types::views","",15,null],[12,"amount","libra_json_rpc_types::views::EventDataView","",21,null],[12,"receiver","","",21,null],[12,"metadata","","",21,null],[13,"Upgrade","libra_json_rpc_types::views","",15,null],[12,"write_set","libra_json_rpc_types::views::EventDataView","",22,null],[13,"NewEpoch","libra_json_rpc_types::views","",15,null],[12,"epoch","libra_json_rpc_types::views::EventDataView","",23,null],[13,"NewBlock","libra_json_rpc_types::views","",15,null],[12,"round","libra_json_rpc_types::views::EventDataView","",24,null],[12,"proposer","","",24,null],[12,"proposed_time","","",24,null],[13,"Unknown","libra_json_rpc_types::views","",15,null],[4,"TransactionDataView","","",null,null],[13,"BlockMetadata","","",25,null],[12,"timestamp_usecs","libra_json_rpc_types::views::TransactionDataView","",26,null],[13,"WriteSet","libra_json_rpc_types::views","",25,null],[13,"UserTransaction","","",25,null],[12,"sender","libra_json_rpc_types::views::TransactionDataView","",27,null],[12,"signature_scheme","","",27,null],[12,"signature","","",27,null],[12,"public_key","","",27,null],[12,"sequence_number","","",27,null],[12,"max_gas_amount","","",27,null],[12,"gas_unit_price","","",27,null],[12,"gas_currency","","",27,null],[12,"expiration_time","","",27,null],[12,"script_hash","","",27,null],[12,"script","","",27,null],[13,"UnknownTransaction","libra_json_rpc_types::views","",25,null],[4,"ScriptView","","",null,null],[13,"PeerToPeer","","",28,null],[12,"receiver","libra_json_rpc_types::views::ScriptView","",29,null],[12,"amount","","",29,null],[12,"currency","","",29,null],[12,"metadata","","",29,null],[12,"metadata_signature","","",29,null],[13,"Mint","libra_json_rpc_types::views","",28,null],[12,"receiver","libra_json_rpc_types::views::ScriptView","",30,null],[12,"currency","","",30,null],[12,"auth_key_prefix","","",30,null],[12,"amount","","",30,null],[13,"Unknown","libra_json_rpc_types::views","",28,null],[11,"new","","",3,[[["btreemap",3],["identifier",3],["balanceresource",3],["accountresource",3],["accountrole",4]]]],[11,"into_bytes","","",6,[[],[["vec",3],["error",3],["result",6]]]],[11,"get_name","","",28,[[],["string",3]]],[11,"from","libra_json_rpc_types::errors","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","libra_json_rpc_types::views","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"test_only_hash","","",11,[[],["hashvalue",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"test_only_hash","","",12,[[],["hashvalue",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"test_only_hash","","",15,[[],["hashvalue",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"test_only_hash","","",25,[[],["hashvalue",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"test_only_hash","","",28,[[],["hashvalue",3]]],[11,"vzip","","",28,[[]]],[11,"from","","Tries to convert the provided byte array into Event Key.",4,[[],["eventview",3]]],[11,"from","","",6,[[]]],[11,"from","","",6,[[["vec",3]]]],[11,"from","","",25,[[["transaction",4]]]],[11,"from","","",12,[[["accountrole",4]]]],[11,"from","","",28,[[["transactionpayload",4]]]],[11,"from","","",8,[[["currencyinforesource",3]],["currencyinfoview",3]]],[11,"clone","libra_json_rpc_types::errors","",0,[[],["jsonrpcerror",3]]],[11,"clone","libra_json_rpc_types::views","",2,[[],["amountview",3]]],[11,"clone","","",12,[[],["accountroleview",4]]],[11,"clone","","",3,[[],["accountview",3]]],[11,"clone","","",4,[[],["eventview",3]]],[11,"clone","","",15,[[],["eventdataview",4]]],[11,"clone","","",5,[[],["blockmetadata",3]]],[11,"clone","","",6,[[],["bytesview",3]]],[11,"clone","","",7,[[],["transactionview",3]]],[11,"clone","","",25,[[],["transactiondataview",4]]],[11,"clone","","",28,[[],["scriptview",4]]],[11,"clone","","",8,[[],["currencyinfoview",3]]],[11,"clone","","",9,[[],["stateproofview",3]]],[11,"clone","","",10,[[],["accountstatewithproofview",3]]],[11,"clone","","",11,[[],["accountstateproofview",3]]],[11,"eq","","",2,[[["amountview",3]]]],[11,"ne","","",2,[[["amountview",3]]]],[11,"eq","","",12,[[["accountroleview",4]]]],[11,"ne","","",12,[[["accountroleview",4]]]],[11,"eq","","",3,[[["accountview",3]]]],[11,"ne","","",3,[[["accountview",3]]]],[11,"eq","","",4,[[["eventview",3]]]],[11,"ne","","",4,[[["eventview",3]]]],[11,"eq","","",15,[[["eventdataview",4]]]],[11,"ne","","",15,[[["eventdataview",4]]]],[11,"eq","","",5,[[["blockmetadata",3]]]],[11,"ne","","",5,[[["blockmetadata",3]]]],[11,"eq","","",6,[[["bytesview",3]]]],[11,"ne","","",6,[[["bytesview",3]]]],[11,"eq","","",7,[[["transactionview",3]]]],[11,"ne","","",7,[[["transactionview",3]]]],[11,"eq","","",25,[[["transactiondataview",4]]]],[11,"ne","","",25,[[["transactiondataview",4]]]],[11,"eq","","",28,[[["scriptview",4]]]],[11,"ne","","",28,[[["scriptview",4]]]],[11,"eq","","",8,[[["currencyinfoview",3]]]],[11,"ne","","",8,[[["currencyinfoview",3]]]],[11,"eq","","",9,[[["stateproofview",3]]]],[11,"ne","","",9,[[["stateproofview",3]]]],[11,"eq","","",10,[[["accountstatewithproofview",3]]]],[11,"ne","","",10,[[["accountstatewithproofview",3]]]],[11,"eq","","",11,[[["accountstateproofview",3]]]],[11,"ne","","",11,[[["accountstateproofview",3]]]],[11,"fmt","libra_json_rpc_types::errors","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libra_json_rpc_types::views","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","libra_json_rpc_types::errors","",0,[[["formatter",3]],["result",6]]],[11,"try_from","libra_json_rpc_types::views","",9,[[],[["stateproofview",3],["result",6]]]],[11,"try_from","","",10,[[["accountstatewithproof",3]],[["error",3],["result",6],["accountstatewithproofview",3]]]],[11,"try_from","","",11,[[["accountstateproof",3]],[["error",3],["accountstateproofview",3],["result",6]]]],[11,"deserialize","libra_json_rpc_types::errors","",0,[[],["result",4]]],[11,"deserialize","libra_json_rpc_types::views","",2,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",15,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"serialize","libra_json_rpc_types::errors","",0,[[],["result",4]]],[11,"serialize","libra_json_rpc_types::views","",2,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",15,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]]],"p":[[3,"JsonRpcError"],[4,"ServerCode"],[3,"AmountView"],[3,"AccountView"],[3,"EventView"],[3,"BlockMetadata"],[3,"BytesView"],[3,"TransactionView"],[3,"CurrencyInfoView"],[3,"StateProofView"],[3,"AccountStateWithProofView"],[3,"AccountStateProofView"],[4,"AccountRoleView"],[13,"ChildVASP"],[13,"ParentVASP"],[4,"EventDataView"],[13,"Burn"],[13,"CancelBurn"],[13,"Mint"],[13,"Preburn"],[13,"ReceivedPayment"],[13,"SentPayment"],[13,"Upgrade"],[13,"NewEpoch"],[13,"NewBlock"],[4,"TransactionDataView"],[13,"BlockMetadata"],[13,"UserTransaction"],[4,"ScriptView"],[13,"PeerToPeer"],[13,"Mint"]]},\
"libra_key_manager":{"doc":"The purpose of KeyManager is to rotate consensus key (and…","i":[[3,"KeyManager","libra_key_manager","",null,null],[4,"Action","","Defines actions that KeyManager should perform after a…",null,null],[13,"NoAction","","The system is in a healthy state and there is no need to…",0,null],[13,"FullKeyRotation","","The system is in a healthy state but sufficient time has…",0,null],[13,"SubmitKeyRotationTransaction","","Storage and the blockchain are inconsistent, submit a new…",0,null],[4,"Error","","",null,null],[13,"ConfigInfoKeyMismatch","","",1,null],[13,"ConfigStorageKeyMismatch","","",1,null],[13,"DataDoesNotExist","","",1,null],[13,"LivenessError","","",1,null],[13,"MissingAccountAddress","","",1,null],[13,"ValidatorInfoNotFound","","",1,null],[13,"UnknownError","","",1,null],[5,"build_rotation_transaction","","",null,[[["duration",3],["accountaddress",3],["ed25519publickey",3],["ed25519privatekey",3]],["transaction",4]]],[0,"counters","","",null,null],[3,"Counters","libra_key_manager::counters","",null,null],[12,"completed_consensus_key_rotations","","",2,null],[12,"consensus_rotation_tx_resubmissions","","",2,null],[12,"no_actions_required","","",2,null],[12,"waiting_on_consensus_reconfiguration","","",2,null],[12,"sleeps","","",2,null],[7,"COUNTERS","","",null,null],[11,"new","","",2,[[]]],[0,"libra_interface","libra_key_manager","",null,null],[3,"JsonRpcLibraInterface","libra_key_manager::libra_interface","This implements the LibraInterface by talking directly to…",null,null],[8,"LibraInterface","","This defines a generic trait used to interact with the…",null,null],[10,"libra_timestamp","","Retrieves the current time from the blockchain, this is…",3,[[],[["error",4],["result",4]]]],[10,"last_reconfiguration","","Retrieves the last reconfiguration time from the…",3,[[],[["error",4],["result",4]]]],[10,"retrieve_sequence_number","","Retrieve current sequence number for the provided account.",3,[[["accountaddress",3]],[["error",4],["result",4]]]],[10,"submit_transaction","","Submits a transaction to the block chain and returns…",3,[[["transaction",4]],[["error",4],["result",4]]]],[10,"retrieve_validator_config","","Retrieves the ValidatorConfig at the specified…",3,[[["accountaddress",3]],[["error",4],["validatorconfig",3],["result",4]]]],[10,"retrieve_validator_info","","Retrieves the ValidatorInfo for the specified account from…",3,[[["accountaddress",3]],[["validatorinfo",3],["error",4],["result",4]]]],[10,"retrieve_account_state","","Fetches the AccountState associated with a specific…",3,[[["accountaddress",3]],[["error",4],["result",4],["accountstate",3]]]],[11,"new","","",4,[[["string",3]]]],[11,"new","libra_key_manager","",5,[[]]],[11,"execute","","Begins execution of the key manager by running an infinite…",5,[[],[["error",4],["result",4]]]],[11,"execute_once","","Checks the current state of the validator keys and…",5,[[],[["error",4],["result",4]]]],[11,"compare_storage_to_config","","",5,[[],[["error",4],["result",4]]]],[11,"compare_info_to_config","","",5,[[],[["error",4],["result",4]]]],[11,"last_reconfiguration","","",5,[[],[["error",4],["result",4]]]],[11,"last_rotation","","",5,[[],[["error",4],["result",4]]]],[11,"libra_timestamp","","",5,[[],[["error",4],["result",4]]]],[11,"resubmit_consensus_key_transaction","","",5,[[],[["error",4],["result",4]]]],[11,"rotate_consensus_key","","",5,[[],[["result",4],["ed25519publickey",3],["error",4]]]],[11,"submit_key_rotation_transaction","","",5,[[["ed25519publickey",3]],[["result",4],["ed25519publickey",3],["error",4]]]],[11,"evaluate_status","","Evaluates the current status of the key manager by…",5,[[],[["action",4],["result",4],["error",4]]]],[11,"perform_action","","",5,[[["action",4]],[["error",4],["result",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","libra_key_manager::counters","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","libra_key_manager::libra_interface","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"libra_timestamp","","",4,[[],[["error",4],["result",4]]]],[11,"last_reconfiguration","","",4,[[],[["error",4],["result",4]]]],[11,"retrieve_sequence_number","","",4,[[["accountaddress",3]],[["error",4],["result",4]]]],[11,"submit_transaction","","",4,[[["transaction",4]],[["error",4],["result",4]]]],[11,"retrieve_validator_config","","",4,[[["accountaddress",3]],[["error",4],["validatorconfig",3],["result",4]]]],[11,"retrieve_validator_info","","",4,[[["accountaddress",3]],[["validatorinfo",3],["error",4],["result",4]]]],[11,"retrieve_account_state","","",4,[[["accountaddress",3]],[["error",4],["result",4],["accountstate",3]]]],[11,"from","libra_key_manager","",1,[[["error",4]]]],[11,"clone","libra_key_manager::libra_interface","",4,[[],["jsonrpclibrainterface",3]]],[11,"eq","libra_key_manager","",0,[[["action",4]]]],[11,"eq","","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"get_metrics","libra_key_manager::counters","",2,[[],[["pushmetricformat",8],["vec",3]]]]],"p":[[4,"Action"],[4,"Error"],[3,"Counters"],[8,"LibraInterface"],[3,"JsonRpcLibraInterface"],[3,"KeyManager"]]},\
"libra_logger":{"doc":"This crates provides API for both structured and not…","i":[[4,"Level","libra_logger","An enum representing the available verbosity levels of the…",null,null],[13,"Error","","The \\\"error\\\" level.",0,null],[13,"Warn","","The \\\"warn\\\" level.",0,null],[13,"Info","","The \\\"info\\\" level.",0,null],[13,"Debug","","The \\\"debug\\\" level.",0,null],[13,"Trace","","The \\\"trace\\\" level.",0,null],[3,"StructuredLogEntry","","",null,null],[3,"Logger","","Logging framework for Libra that encapsulates a minimal…",null,null],[5,"init_file_struct_log","","Initializes struct logger sink that writes to specified…",null,[[["string",3]],[["initloggererror",4],["result",4]]]],[5,"init_println_struct_log","","Initialize struct logger sink that prints all structured…",null,[[],["result",4]]],[5,"init_struct_log_from_env","","Initializes struct logger from STRUCT_LOG_FILE env var. If…",null,[[],[["initloggererror",4],["result",4]]]],[5,"set_struct_logger","","Sets structured logger",null,[[["structlogsink",8]],["result",4]]],[5,"struct_logger_enabled","","Checks if structured logging is enabled for level",null,[[["level",4]]]],[5,"struct_logger_set","","Checks if structured logging is enabled",null,[[]]],[0,"prelude","","",null,null],[11,"new_unnamed","","",1,[[]]],[11,"new_named","","",1,[[]]],[11,"critical","","",1,[[]]],[11,"warning","","",1,[[]]],[11,"json_data","","",1,[[["value",4]]]],[11,"data","","",1,[[["serialize",8]]]],[11,"new","","",2,[[]]],[11,"channel_size","","",2,[[]]],[11,"environment_only","","",2,[[]]],[11,"is_async","","",2,[[]]],[11,"level","","",2,[[["level",4]]]],[11,"override_rust_log","","",2,[[]]],[11,"init","","",2,[[]]],[17,"CHANNEL_SIZE","","",null,null],[17,"DEFAULT_TARGET","","",null,null],[8,"StructLogSink","","",null,null],[10,"send","","",3,[[["structuredlogentry",3]]]],[14,"crit","","Define crit macro that specify libra as the target",null,null],[14,"debug","","Define debug macro that specify libra as the target",null,null],[14,"error","","Define  macro that specify libra as the target",null,null],[14,"info","","Define info macro that specify libra as the target",null,null],[14,"trace","","Define trace macro that specify libra as the target",null,null],[14,"warn","","Define warn macro that specify libra as the target",null,null],[14,"struct_log_enabled","","",null,null],[14,"struct_log","","",null,null],[14,"send_struct_log","","",null,null],[14,"location","","",null,null],[14,"git_rev","","",null,null],[14,"format_struct_args_and_pattern","","",null,null],[14,"format_struct_args","","",null,null],[14,"format_struct_arg","","",null,null],[14,"format_index","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"deserialize","","",0,[[],[["level",4],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"cmp","","",0,[[["level",4]],["ordering",4]]],[11,"hash","","",0,[[]]],[11,"eq","","",0,[[["levelfilter",4]]]],[11,"eq","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["level",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["level",4]]]],[11,"le","","",0,[[["level",4]]]],[11,"gt","","",0,[[["level",4]]]],[11,"ge","","",0,[[["level",4]]]],[11,"partial_cmp","","",0,[[["levelfilter",4]],[["ordering",4],["option",4]]]],[11,"lt","","",0,[[["levelfilter",4]]]],[11,"le","","",0,[[["levelfilter",4]]]],[11,"gt","","",0,[[["levelfilter",4]]]],[11,"ge","","",0,[[["levelfilter",4]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from_str","","",0,[[],[["result",4],["level",4]]]],[11,"clone","","",0,[[],["level",4]]],[11,"default","","",1,[[],["structuredlogentry",3]]],[11,"default","","",2,[[]]],[11,"serialize","","",1,[[],["result",4]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level",4]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[],["levelfilter",4]]]],"p":[[4,"Level"],[3,"StructuredLogEntry"],[3,"Logger"],[8,"StructLogSink"]]},\
"libra_management":{"doc":"","i":[[3,"SecureBackends","libra_management","",null,null],[3,"SingleBackend","","",null,null],[12,"backend","","The secure backend. Secure backends are represented as a…",0,null],[4,"Command","","",null,null],[13,"AssociationKey","","",1,null],[13,"CreateWaypoint","","",1,null],[13,"Genesis","","",1,null],[13,"InsertWaypoint","","",1,null],[13,"OperatorKey","","",1,null],[13,"OwnerKey","","",1,null],[13,"SetLayout","","",1,null],[13,"ValidatorConfig","","",1,null],[13,"Verify","","",1,null],[4,"CommandName","","",null,null],[13,"AssociationKey","","",2,null],[13,"CreateWaypoint","","",2,null],[13,"Genesis","","",2,null],[13,"InsertWaypoint","","",2,null],[13,"OperatorKey","","",2,null],[13,"OwnerKey","","",2,null],[13,"SetLayout","","",2,null],[13,"ValidatorConfig","","",2,null],[13,"Verify","","",2,null],[0,"constants","","",null,null],[17,"COMMON_NS","libra_management::constants","",null,null],[17,"LAYOUT","","",null,null],[17,"VALIDATOR_CONFIG","","",null,null],[17,"GAS_UNIT_PRICE","","",null,null],[17,"MAX_GAS_AMOUNT","","",null,null],[17,"GAS_CURRENCY_CODE","","",null,null],[17,"TXN_EXPIRATION_SECS","","",null,null],[11,"execute","libra_management","",1,[[],["string",3]]],[11,"association_key","","",1,[[],[["result",4],["error",4],["ed25519publickey",3]]]],[11,"create_waypoint","","",1,[[],[["error",4],["result",4],["waypoint",3]]]],[11,"genesis","","",1,[[],[["error",4],["transaction",4],["result",4]]]],[11,"insert_waypoint","","",1,[[],[["error",4],["result",4],["waypoint",3]]]],[11,"operator_key","","",1,[[],[["result",4],["error",4],["ed25519publickey",3]]]],[11,"owner_key","","",1,[[],[["result",4],["error",4],["ed25519publickey",3]]]],[11,"set_layout","","",1,[[],[["error",4],["result",4],["layout",3]]]],[11,"validator_config","","",1,[[],[["error",4],["transaction",4],["result",4]]]],[11,"verify","","",1,[[],[["string",3],["error",4],["result",4]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",2,[[["command",4]]]],[11,"eq","","",2,[[["commandname",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clap","","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"clap","","",3,[[],["app",3]]],[11,"from_clap","","",3,[[["argmatches",3]]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"from_subcommand","","",1,[[],["option",4]]],[11,"is_subcommand","","",1,[[]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"is_subcommand","","",3,[[]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]]],"p":[[3,"SingleBackend"],[4,"Command"],[4,"CommandName"],[3,"SecureBackends"]]},\
"libra_mempool":{"doc":"Mempool is used to hold transactions that have been…","i":[[3,"CommitNotification","libra_mempool","notification from state sync to mempool of commit event…",null,null],[12,"transactions","","committed transactions",0,null],[12,"block_timestamp_usecs","","timestamp of committed block",0,null],[12,"callback","","callback to send back response from mempool to State Sync",0,null],[3,"CommitResponse","","ACK response to commit notification",null,null],[12,"msg","","error msg if applicable - empty string if commit was…",1,null],[3,"CommittedTransaction","","successfully executed and committed txn",null,null],[12,"sender","","sender",2,null],[12,"sequence_number","","sequence number",2,null],[3,"TransactionExclusion","","excluded txn",null,null],[12,"sender","","sender",3,null],[12,"sequence_number","","sequence number",3,null],[4,"ConsensusRequest","","Message sent from consensus to mempool",null,null],[13,"GetBlockRequest","","request to pull block to submit to consensus",4,null],[13,"RejectNotification","","notifications about rejected committed txns",4,null],[4,"ConsensusResponse","","Response setn from mempool to consensus",null,null],[13,"GetBlockResponse","","block to submit to consensus",5,null],[13,"CommitResponse","","ACK for commit notification",5,null],[5,"bootstrap","","method used to bootstrap shared mempool for a node",null,[[["vec",3],["nodeconfig",3],["receiver",3],["receiver",3],["consensusrequest",4],["arc",3],["receiver",3],["onchainconfigpayload",3],["receiver",3],["dbreader",8],["commitnotification",3]],["runtime",3]]],[5,"gen_mempool_reconfig_subscription","","Creates mempool\'s subscription bundle for on-chain…",null,[[]]],[0,"network","","Interface between Mempool and Network layers.",null,null],[3,"MempoolNetworkSender","libra_mempool::network","The interface from Mempool to Networking layer.",null,null],[4,"MempoolSyncMsg","","Container for exchanging transactions with other Mempools",null,null],[13,"BroadcastTransactionsRequest","","broadcast request issued by the sender",6,null],[12,"request_id","libra_mempool::network::MempoolSyncMsg","unique id of sync request. Can be used by sender for…",7,null],[12,"transactions","","shared transactions in this batch",7,null],[13,"BroadcastTransactionsResponse","libra_mempool::network","broadcast ack issued by the receiver",6,null],[12,"request_id","libra_mempool::network::MempoolSyncMsg","unique id of received broadcast request",8,null],[12,"retry_txns","","indices of transactions that failed that may succeed on…",8,null],[12,"backoff","","backpressure signal from recipient when it is overwhelmed…",8,null],[5,"add_to_network","libra_mempool::network","Create a new Sender that only sends for the…",null,[[["networkbuilder",3]]]],[6,"MempoolNetworkEvents","","The interface from Network to Mempool layer.",null,null],[17,"MEMPOOL_DIRECT_SEND_PROTOCOL","","Protocol id for mempool direct-send calls",null,null],[0,"mocks","libra_mempool","Mocks used for testing",null,null],[3,"MockSharedMempool","libra_mempool::mocks","Mock of a running instance of shared mempool",null,null],[12,"ac_client","","sender from admission control to shared mempool",9,null],[12,"mempool","","mempool",9,null],[12,"consensus_sender","","sender from consensus to shared mempool",9,null],[12,"state_sync_sender","","sender from state sync to shared mempool",9,null],[11,"new","libra_mempool::network","Returns a Sender that only sends for the…",10,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"send_to","","Send a single message to the destination peer using the…",10,[[["mempoolsyncmsg",4],["peerid",3]],[["result",4],["networkerror",3]]]],[6,"MempoolClientSender","libra_mempool","sender type: used to enqueue new transactions to shared…",null,null],[6,"SubmissionStatus","","Submission Status is represented as combination of…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","libra_mempool::mocks","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","libra_mempool::network","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"clone","","",6,[[],["mempoolsyncmsg",4]]],[11,"clone","","",10,[[],["mempoolnetworksender",3]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","libra_mempool","",1,[[["formatter",3]],["result",6]]],[11,"serialize","libra_mempool::network","",6,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"new","libra_mempool::mocks","Creates a mock of a running instance of shared mempool…",9,[[["option",4],["receiver",3]]]],[11,"add_txns","","add txns to mempool",9,[[["signedtransaction",3],["vec",3]],["result",6]]],[11,"read_timeline","","true if all given txns are in mempool, else false",9,[[],[["signedtransaction",3],["vec",3]]]]],"p":[[3,"CommitNotification"],[3,"CommitResponse"],[3,"CommittedTransaction"],[3,"TransactionExclusion"],[4,"ConsensusRequest"],[4,"ConsensusResponse"],[4,"MempoolSyncMsg"],[13,"BroadcastTransactionsRequest"],[13,"BroadcastTransactionsResponse"],[3,"MockSharedMempool"],[3,"MempoolNetworkSender"]]},\
"libra_metrics":{"doc":"","i":[[14,"register_histogram","libra_metrics","Create a [`Histogram`] and registers to default registry.",null,null],[14,"register_histogram_vec","","Create a [`HistogramVec`] and registers to default registry.",null,null],[14,"register_int_counter","","Create an [`IntCounter`] and registers to default registry.",null,null],[14,"register_int_counter_vec","","Create an [`IntCounterVec`] and registers to default…",null,null],[14,"register_int_gauge","","Create an [`IntGauge`] and registers to default registry.",null,null],[14,"register_int_gauge_vec","","Create an [`IntGaugeVec`] and registers to default registry.",null,null],[3,"Histogram","","A [`Metric`] counts individual observations from an event…",null,null],[6,"HistogramVec","","A [`Collector`] that bundles a set of Histograms that all…",null,null],[6,"IntCounter","","The integer version of [`Counter`]. Provides better…",null,null],[6,"IntCounterVec","","The integer version of [`CounterVec`]. Provides better…",null,null],[6,"IntGauge","","The integer version of [`Gauge`]. Provides better…",null,null],[6,"IntGaugeVec","","The integer version of [`GaugeVec`]. Provides better…",null,null],[3,"DurationHistogram","","A small wrapper around Histogram to handle the special…",null,null],[3,"OpMetrics","","",null,null],[5,"get_all_metrics","","",null,[[],[["hashmap",3],["string",3]]]],[5,"dump_all_metrics_to_file_periodically","","",null,[[]]],[0,"counters","","",null,null],[7,"COUNTER_ADMISSION_CONTROL_CANNOT_SEND_REPLY","libra_metrics::counters","",null,null],[7,"COUNTER_CLIENT_ERRORS","","",null,null],[0,"metric_server","libra_metrics","",null,null],[5,"start_server","libra_metrics::metric_server","",null,[[["string",3]]]],[11,"new","libra_metrics","",0,[[["histogram",3]],["durationhistogram",3]]],[11,"observe_duration","","",0,[[["duration",3]]]],[11,"new","","",1,[[["into",8],["string",3]],["opmetrics",3]]],[11,"new_and_registered","","",1,[[["into",8],["string",3]],["opmetrics",3]]],[11,"gauge","","",1,[[],["intgauge",6]]],[11,"peer_gauge","","",1,[[],["intgauge",6]]],[11,"inc","","",1,[[]]],[11,"inc_by","","",1,[[]]],[11,"set","","",1,[[]]],[11,"observe","","",1,[[]]],[11,"observe_duration","","",1,[[["duration",3]]]],[11,"timer","","",1,[[],["histogramtimer",3]]],[14,"monitor","","Helper function to record metrics for external calls.…",null,null],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"desc","","",2,[[],[["desc",3],["vec",3]]]],[11,"collect","","",2,[[],[["metricfamily",3],["vec",3]]]],[11,"metric","","",2,[[],["metric",3]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",2,[[],["histogram",3]]],[11,"clone","","",1,[[],["opmetrics",3]]],[11,"desc","","",1,[[],[["desc",3],["vec",3]]]],[11,"collect","","",1,[[],[["metricfamily",3],["vec",3]]]],[11,"with_opts","","`with_opts` creates a [`Histogram`] with the `opts` options.",2,[[["histogramopts",3]],[["result",4],["histogram",3],["error",4]]]],[11,"observe","","Add a single observation to the [`Histogram`].",2,[[]]],[11,"start_timer","","Return a [`HistogramTimer`] to track a duration.",2,[[],["histogramtimer",3]]],[11,"observe_closure_duration","","Observe execution time of a closure, in second.",2,[[]]],[11,"local","","Return a [`LocalHistogram`] for single thread usage.",2,[[],["localhistogram",3]]],[11,"get_sample_sum","","Return accumulated sum of all samples.",2,[[]]],[11,"get_sample_count","","Return count of all samples.",2,[[]]]],"p":[[3,"DurationHistogram"],[3,"OpMetrics"],[3,"Histogram"]]},\
"libra_network_address":{"doc":"","i":[[3,"RawNetworkAddress","libra_network_address","A `RawNetworkAddress` is the serialized, unverified,…",null,null],[3,"NetworkAddress","","Libra `NetworkAddress` is a compact, efficient,…",null,null],[3,"DnsName","","A minimally parsed DNS name. We don\'t really do any…",null,null],[3,"EmptyError","","",null,null],[4,"Protocol","","A single protocol in the [`NetworkAddress`] protocol stack.",null,null],[13,"Ip4","","",0,null],[13,"Ip6","","",0,null],[13,"Dns","","",0,null],[13,"Dns4","","",0,null],[13,"Dns6","","",0,null],[13,"Tcp","","",0,null],[13,"Memory","","",0,null],[13,"NoiseIK","","",0,null],[13,"Handshake","","",0,null],[4,"ParseError","","Possible errors when parsing a human-readable…",null,null],[13,"UnknownProtocolType","","",1,null],[13,"UnexpectedEnd","","",1,null],[13,"ParseAddrError","","",1,null],[13,"ParseIntError","","",1,null],[13,"ParseX25519PubkeyError","","",1,null],[13,"EmptyProtocolString","","",1,null],[13,"InvalidProtocolString","","",1,null],[13,"EmptyDnsNameString","","",1,null],[13,"InvalidDnsNameCharacter","","",1,null],[13,"DnsNameTooLong","","",1,null],[4,"IpFilter","","",null,null],[13,"Any","","",2,null],[13,"OnlyIp4","","",2,null],[13,"OnlyIp6","","",2,null],[5,"arb_libranet_addr","","",null,[[]]],[5,"parse_memory","","parse the `&[Protocol]` into the `\\\"/memory/<port>\\\"` prefix…",null,[[],["option",4]]],[5,"parse_ip_tcp","","parse the `&[Protocol]` into the…",null,[[],["option",4]]],[5,"parse_dns_tcp","","parse the `&[Protocol]` into the…",null,[[],["option",4]]],[5,"parse_noise_ik","","parse the `&[Protocol]` into the `\\\"/ln-noise-ik/<pubkey>\\\"`…",null,[[],["option",4]]],[5,"parse_handshake","","parse the `&[Protocol]` into the…",null,[[],["option",4]]],[11,"new","","",3,[[["vec",3]]]],[11,"len","","",3,[[]]],[11,"is_empty","","",3,[[]]],[11,"len","","",4,[[]]],[11,"is_empty","","",4,[[]]],[11,"as_slice","","",4,[[]]],[11,"push","","",4,[[["protocol",4]]]],[11,"extend_from_slice","","",4,[[]]],[11,"append_prod_protos","","Given a base `NetworkAddress`, append production protocols…",4,[[["publickey",3]]]],[11,"is_libranet_addr","","Check that a `NetworkAddress` looks like a typical…",4,[[]]],[11,"find_noise_proto","","A temporary, hacky function to parse out the first…",4,[[],[["option",4],["publickey",3]]]],[11,"mock","","",4,[[]]],[11,"matches","","",2,[[["ipaddr",4]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"encode_hex","","",3,[[]]],[11,"encode_hex_upper","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"as_ref","","",3,[[]]],[11,"as_ref","","",5,[[]]],[11,"from","","",1,[[["addrparseerror",3]]]],[11,"from","","",1,[[["parseinterror",3]]]],[11,"from","","",1,[[["cryptomaterialerror",4]]]],[11,"from","","",4,[[["protocol",4]],["networkaddress",3]]],[11,"from","","",4,[[["socketaddr",4]],["networkaddress",3]]],[11,"from","","",0,[[["ipaddr",4]],["protocol",4]]],[11,"into","","",3,[[],["vec",3]]],[11,"into","","",5,[[],["string",3]]],[11,"into_iter","","",4,[[]]],[11,"clone","","",3,[[],["rawnetworkaddress",3]]],[11,"clone","","",4,[[],["networkaddress",3]]],[11,"clone","","",0,[[],["protocol",4]]],[11,"clone","","",5,[[],["dnsname",3]]],[11,"clone","","",2,[[],["ipfilter",4]]],[11,"eq","","",3,[[["rawnetworkaddress",3]]]],[11,"ne","","",3,[[["rawnetworkaddress",3]]]],[11,"eq","","",4,[[["networkaddress",3]]]],[11,"ne","","",4,[[["networkaddress",3]]]],[11,"eq","","",0,[[["protocol",4]]]],[11,"ne","","",0,[[["protocol",4]]]],[11,"eq","","",5,[[["dnsname",3]]]],[11,"ne","","",5,[[["dnsname",3]]]],[11,"eq","","",2,[[["ipfilter",4]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"try_from","","",3,[[["networkaddress",3]],[["error",4],["result",4]]]],[11,"try_from","","",4,[[["protocol",4],["vec",3]],["result",4]]],[11,"try_from","","",4,[[["rawnetworkaddress",3]],[["error",4],["result",4]]]],[11,"try_from","","",5,[[["string",3]],["result",4]]],[11,"from_str","","",4,[[],["result",4]]],[11,"from_str","","",5,[[],["result",4]]],[11,"source","","",1,[[],[["error",8],["option",4]]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"arbitrary_with","","",0,[[]]],[11,"arbitrary_with","","",3,[[]]],[11,"arbitrary_with","","",4,[[]]],[11,"arbitrary_with","","",5,[[]]]],"p":[[4,"Protocol"],[4,"ParseError"],[4,"IpFilter"],[3,"RawNetworkAddress"],[3,"NetworkAddress"],[3,"DnsName"],[3,"EmptyError"]]},\
"libra_nibble":{"doc":"`Nibble` represents a four-bit unsigned integer.","i":[[3,"Nibble","libra_nibble","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",0,[[]]],[11,"clone","","",0,[[],["nibble",3]]],[11,"cmp","","",0,[[["nibble",3]],["ordering",4]]],[11,"eq","","",0,[[["nibble",3]]]],[11,"ne","","",0,[[["nibble",3]]]],[11,"partial_cmp","","",0,[[["nibble",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["nibble",3]]]],[11,"le","","",0,[[["nibble",3]]]],[11,"gt","","",0,[[["nibble",3]]]],[11,"ge","","",0,[[["nibble",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"arbitrary_with","","",0,[[]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"Nibble"]]},\
"libra_node":{"doc":"","i":[[0,"main_node","libra_node","",null,null],[3,"LibraHandle","libra_node::main_node","",null,null],[5,"setup_network","","",null,[[["arc",3],["networkconfig",3],["dbreader",8],["roletype",4],["waypoint",3]]]],[5,"setup_environment","","",null,[[["nodeconfig",3]],["librahandle",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]]],"p":[[3,"LibraHandle"]]},\
"libra_proptest_helpers":{"doc":"","i":[[3,"GrowingSubset","libra_proptest_helpers","A set of elements, each with an associated key, that grows…",null,null],[3,"RepeatVec","","An efficient representation of a vector with repeated…",null,null],[3,"ValueGenerator","","Context for generating single values out of strategies.",null,null],[3,"Index","","Wrapper for `proptest`\'s…",null,null],[5,"with_stack_size","","Creates a new thread with a larger stack size.",null,[[],[["result",4],["box",3]]]],[5,"pick_idxs","","Given a maximum value `max` and a list of `Index`…",null,[[],["vec",3]]],[5,"pick_slice_idxs","","Given a maximum value `max` and a slice of `Index`…",null,[[],["vec",3]]],[11,"len","","Returns the number of elements in the current subset.",0,[[]]],[11,"is_empty","","Returns `true` if the current subset contains no elements.",0,[[]]],[11,"total_len","","Returns the total number of elements in the universal set.",0,[[]]],[11,"current","","Returns a slice containing the items in the current subset.",0,[[]]],[11,"pick_item","","Chooses an (index, value) pair from the current subset…",0,[[["index",3]]]],[11,"pick_value","","Chooses a value from the current subset using the provided…",0,[[["index",3]]]],[11,"advance_to","","Advances the valid subset to the provided index. After the…",0,[[]]],[11,"new","","Creates a new, empty `RepeatVec`.",1,[[]]],[11,"with_capacity","","Creates a new, empty `RepeatVec` with the specified…",1,[[]]],[11,"len","","Returns the logical number of elements in this `RepeatVec`.",1,[[]]],[11,"is_empty","","Returns `true` if this `RepeatVec` has no logical elements.",1,[[]]],[11,"extend","","Extends this `RepeatVec` by logically adding `size` copies…",1,[[]]],[11,"remove","","Removes the item specified by the given logical index,…",1,[[]]],[11,"remove_all","","Removes the items specified by the given logical indexes,…",1,[[]]],[11,"get","","Returns the item at location `at`. The return value is a…",1,[[],["option",4]]],[11,"pick_uniform_indexes","","Picks out indexes uniformly randomly from this…",1,[[],["vec",3]]],[11,"pick_uniform","","Picks out elements uniformly randomly from this…",1,[[],["vec",3]]],[11,"new","","Creates a new value generator with the default RNG.",2,[[]]],[11,"new_with_rng","","Creates a new value generator with provided RNG",2,[[["testrng",3]]]],[11,"deterministic","","Creates a new value generator with a deterministic RNG.",2,[[]]],[11,"generate","","Generates a single value for this strategy.",2,[[["strategy",8]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"as_ref","","",3,[[],["propindex",3]]],[11,"clone","","",0,[[],["growingsubset",3]]],[11,"clone","","",1,[[],["repeatvec",3]]],[11,"clone","","",3,[[],["index",3]]],[11,"default","","",1,[[],["repeatvec",3]]],[11,"default","","",2,[[],["valuegenerator",3]]],[11,"eq","","",1,[[["repeatvec",3]]]],[11,"ne","","",1,[[["repeatvec",3]]]],[11,"deref","","",3,[[],["propindex",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",0,[[]]],[11,"arbitrary_with","","",3,[[]]]],"p":[[3,"GrowingSubset"],[3,"RepeatVec"],[3,"ValueGenerator"],[3,"Index"]]},\
"libra_retrier":{"doc":"","i":[[3,"FixedDelay","libra_retrier","An iterator which uses a fixed delay",null,null],[5,"retry","","Given an operation retries it successfully sleeping…",null,[[],["result",4]]],[5,"retry_async","","",null,[[]]],[5,"fixed_retry_strategy","","",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"into_iter","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"next","","",0,[[],[["option",4],["duration",3]]]]],"p":[[3,"FixedDelay"]]},\
"libra_secure_json_rpc":{"doc":"The purpose of the JsonRpcClient presented here is to…","i":[[3,"JsonRpcClient","libra_secure_json_rpc","Provides a lightweight JsonRpcClient implementation.",null,null],[3,"Bytes","","Represents a vector of bytes using hex encoding.",null,null],[12,"0","","",0,null],[4,"Error","","",null,null],[13,"InternalRPCError","","",1,null],[13,"MissingData","","",1,null],[13,"RPCFailure","","",1,null],[13,"SerializationError","","",1,null],[13,"UnknownError","","",1,null],[11,"new","","",2,[[["string",3]]]],[11,"submit_signed_transaction","","Submits a signed transaction to the Libra blockchain via…",2,[[["signedtransaction",3]],[["result",4],["error",4]]]],[11,"get_account_state","","Returns the associated AccountState for a specific account…",2,[[["accountaddress",3],["option",4]],[["result",4],["accountstate",3],["error",4]]]],[11,"into_bytes","","",0,[[],[["vec",3],["result",4],["error",4]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",1,[[["error",3]]]],[11,"from","","",1,[[["error",4]]]],[11,"from","","",1,[[["error",3]]]],[11,"from","","",1,[[["fromhexerror",4]]]],[11,"from","","",0,[[]]],[11,"from","","",0,[[["vec",3]]]],[11,"clone","","",2,[[],["jsonrpcclient",3]]],[11,"clone","","",0,[[],["bytes",3]]],[11,"eq","","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"eq","","",0,[[["bytes",3]]]],[11,"ne","","",0,[[["bytes",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]]],"p":[[3,"Bytes"],[4,"Error"],[3,"JsonRpcClient"]]},\
"libra_secure_net":{"doc":"This provides a simple networking substrate between a…","i":[[3,"NetworkClient","libra_secure_net","",null,null],[3,"NetworkServer","","",null,null],[4,"Error","","",null,null],[13,"AlreadyShutdown","","",0,null],[13,"DataTooLarge","","",0,null],[13,"NetworkError","","",0,null],[13,"NoActiveStream","","",0,null],[13,"RemoteStreamClosed","","",0,null],[11,"new","","",1,[[["socketaddr",4]]]],[11,"read","","Blocking read until able to successfully read an entire…",1,[[],[["vec",3],["error",4],["result",4]]]],[11,"shutdown","","Shutdown the internal network stream",1,[[],[["result",4],["error",4]]]],[11,"write","","Blocking write until able to successfully send an entire…",1,[[],[["result",4],["error",4]]]],[11,"new","","",2,[[["socketaddr",4]]]],[11,"read","","If there isn\'t already a downstream client, it accepts.…",2,[[],[["vec",3],["error",4],["result",4]]]],[11,"shutdown","","Shutdown the internal network stream",2,[[],[["result",4],["error",4]]]],[11,"write","","If there isn\'t already a downstream client, it accepts.…",2,[[],[["result",4],["error",4]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",0,[[["error",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["error",8],["option",4]]]]],"p":[[4,"Error"],[3,"NetworkClient"],[3,"NetworkServer"]]},\
"libra_secure_push_metrics":{"doc":"","i":[[3,"Counter","libra_secure_push_metrics","A Counter is a cumulative metric that represents a single…",null,null],[3,"Gauge","","A Gauge is a metric that represents a single numerical…",null,null],[3,"MetricsPusher","","MetricsPusher provides a function to push a list of…",null,null],[11,"new","","",0,[[["string",3]]]],[11,"inc_by","","",0,[[]]],[11,"inc","","",0,[[]]],[11,"new","","",1,[[["string",3]]]],[11,"new","","",2,[[["arc",3],["metrics",8]]]],[11,"start","","start starts a new thread and periodically pushes the…",2,[[],[["joinhandle",3],["option",4]]]],[8,"Metrics","","",null,null],[10,"get_metrics","","",3,[[],[["pushmetricformat",8],["vec",3]]]],[8,"PushMetricFormat","","PushMetricFormat contains a single function which converts…",null,null],[10,"get_push_metric_format","","",4,[[],["string",3]]],[14,"define_counters","","Defines a list of counters with help messages…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"get_push_metric_format","","",0,[[],["string",3]]],[11,"get_push_metric_format","","",1,[[],["string",3]]]],"p":[[3,"Counter"],[3,"Gauge"],[3,"MetricsPusher"],[8,"Metrics"],[8,"PushMetricFormat"]]},\
"libra_secure_storage":{"doc":"","i":[[3,"PublicKeyResponse","libra_secure_storage","",null,null],[12,"last_update","","Time since Unix Epoch in seconds.",0,null],[12,"public_key","","Ed25519PublicKey stored at the provided key",0,null],[3,"GitHubStorage","","GitHubStorage leverages a GitHub repository to provide a…",null,null],[3,"InMemoryStorageInternal","","",null,null],[3,"GetResponse","","A container for a get response that contains relevant…",null,null],[12,"last_update","","Time since Unix Epoch in seconds.",1,null],[12,"value","","Value stored at the provided key",1,null],[3,"NamespacedStorage","","This provides a light wrapper around KV storages to…",null,null],[3,"OnDiskStorageInternal","","",null,null],[3,"Permission","","Maps an identity to a set of capabilities",null,null],[12,"id","","",2,null],[12,"capabilities","","",2,null],[3,"Policy","","Dictates a set of permissions",null,null],[12,"permissions","","",3,null],[3,"VaultStorage","","VaultStorage utilizes Vault for maintaining encrypted,…",null,null],[12,"client","","",4,null],[4,"Error","","",null,null],[13,"EntropyError","","",5,null],[13,"InternalError","","",5,null],[13,"KeyAlreadyExists","","",5,null],[13,"KeyNotSet","","",5,null],[13,"PermissionDenied","","",5,null],[13,"SerializationError","","",5,null],[13,"UnexpectedValueType","","",5,null],[13,"KeyVersionNotFound","","",5,null],[4,"Capability","","Represents actions",null,null],[13,"Export","","",6,null],[13,"Read","","",6,null],[13,"Rotate","","",6,null],[13,"Sign","","",6,null],[13,"Write","","",6,null],[4,"Identity","","Id represents a Libra internal identifier for a given…",null,null],[13,"User","","",7,null],[13,"Anyone","","",7,null],[13,"NoOne","","",7,null],[4,"Storage","","This is the Libra interface into secure storage. Any…",null,null],[13,"GitHubStorage","","",8,null],[13,"VaultStorage","","",8,null],[13,"InMemoryStorage","","",8,null],[13,"NamespacedStorage","","",8,null],[13,"OnDiskStorage","","",8,null],[4,"Value","","",null,null],[13,"Ed25519PrivateKey","","",9,null],[13,"Ed25519PublicKey","","",9,null],[13,"HashValue","","",9,null],[13,"String","","",9,null],[13,"Transaction","","",9,null],[13,"U64","","",9,null],[0,"config","","",null,null],[5,"identity_key","libra_secure_storage::config","",null,[[["networkconfig",3]],["privatekey",3]]],[5,"peer_id","","",null,[[["networkconfig",3]],["peerid",3]]],[5,"waypoint","","",null,[[["waypointconfig",4]],["waypoint",3]]],[11,"new","libra_secure_storage","",10,[[["string",3]]]],[11,"new","","",11,[[]]],[11,"new_with_time_service","","",11,[[]]],[11,"new","","Creates a GetResponse",1,[[["value",4]]]],[11,"new","","",12,[[["kvstorage",8],["string",3],["box",3]]]],[11,"new","","",13,[[["pathbuf",3]]]],[11,"new","","",3,[[["vec",3],["permission",3]]]],[11,"public","","",3,[[]]],[11,"new","","",2,[[["identity",4],["vec",3],["capability",4]]]],[11,"ed25519_private_key","","",9,[[],[["ed25519privatekey",3],["result",4],["error",4]]]],[11,"ed25519_public_key","","",9,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[11,"hash_value","","",9,[[],[["error",4],["result",4],["hashvalue",3]]]],[11,"string","","",9,[[],[["result",4],["string",3],["error",4]]]],[11,"u64","","",9,[[],[["error",4],["result",4]]]],[11,"transaction","","",9,[[],[["error",4],["result",4],["transaction",4]]]],[11,"new","","",4,[[["string",3],["option",4]]]],[11,"create_token","","Creates a token but uses the namespace for policies",4,[[["vec",3]],[["result",4],["string",3],["error",4]]]],[11,"set_policy","","Create a new policy in Vault, see the explanation for…",4,[[["vaultengine",4]],[["result",4],["error",4]]]],[11,"set_policies","","",4,[[["vaultengine",4],["policy",3]],[["result",4],["error",4]]]],[6,"InMemoryStorage","","InMemoryStorage represents a key value store that is…",null,null],[6,"OnDiskStorage","","OnDiskStorage represents a key value store that is…",null,null],[8,"CryptoKVStorage","","CryptoKVStorage offers a CryptoStorage implementation by…",null,null],[8,"CryptoStorage","","CryptoStorage offers a secure storage engine for…",null,null],[10,"create_key","","Securely generates a new named Ed25519 key pair and…",14,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[10,"export_private_key","","Returns the private key for a given Ed25519 key pair, as…",14,[[],[["ed25519privatekey",3],["result",4],["error",4]]]],[11,"import_private_key","","An optional API that allows importing private keys. It…",14,[[["ed25519privatekey",3]],[["result",4],["error",4]]]],[10,"export_private_key_for_version","","Returns the private key for a given Ed25519 key pair…",14,[[["ed25519publickey",3]],[["ed25519privatekey",3],["result",4],["error",4]]]],[10,"get_public_key","","Returns the public key for a given Ed25519 key pair, as…",14,[[],[["publickeyresponse",3],["error",4],["result",4]]]],[10,"rotate_key","","Rotates an Ed25519 key pair by generating a new Ed25519…",14,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[10,"sign_message","","Signs the given message using the private key associated…",14,[[["hashvalue",3]],[["ed25519signature",3],["error",4],["result",4]]]],[10,"sign_message_using_version","","Signs the given message using the private key associated…",14,[[["hashvalue",3],["ed25519publickey",3]],[["ed25519signature",3],["error",4],["result",4]]]],[8,"KVStorage","","A secure key/value storage engine. Create takes a policy…",null,null],[10,"available","","Returns an error if the backend service is not online and…",15,[[],[["result",4],["error",4]]]],[10,"get","","Retrieves a value from storage and fails if the backend is…",15,[[],[["error",4],["result",4],["getresponse",3]]]],[10,"set","","Sets a value in storage and fails if the backend is…",15,[[["value",4]],[["result",4],["error",4]]]],[10,"reset_and_clear","","Resets and clears all data held in the storage engine.…",15,[[],[["result",4],["error",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"initialize","","",11,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"create_key","","Securely generates a new named Ed25519 key pair and…",8,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[11,"export_private_key","","Returns the private key for a given Ed25519 key pair, as…",8,[[],[["ed25519privatekey",3],["result",4],["error",4]]]],[11,"import_private_key","","An optional API that allows importing private keys. It…",8,[[["ed25519privatekey",3]],[["result",4],["error",4]]]],[11,"export_private_key_for_version","","Returns the private key for a given Ed25519 key pair…",8,[[["ed25519publickey",3]],[["ed25519privatekey",3],["result",4],["error",4]]]],[11,"get_public_key","","Returns the public key for a given Ed25519 key pair, as…",8,[[],[["publickeyresponse",3],["error",4],["result",4]]]],[11,"rotate_key","","Rotates an Ed25519 key pair by generating a new Ed25519…",8,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[11,"sign_message","","Signs the given message using the private key associated…",8,[[["hashvalue",3]],[["ed25519signature",3],["error",4],["result",4]]]],[11,"sign_message_using_version","","Signs the given message using the private key associated…",8,[[["hashvalue",3],["ed25519publickey",3]],[["ed25519signature",3],["error",4],["result",4]]]],[11,"create_key","","",4,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[11,"export_private_key","","",4,[[],[["ed25519privatekey",3],["result",4],["error",4]]]],[11,"export_private_key_for_version","","",4,[[["ed25519publickey",3]],[["ed25519privatekey",3],["result",4],["error",4]]]],[11,"import_private_key","","",4,[[["ed25519privatekey",3]],[["result",4],["error",4]]]],[11,"get_public_key","","",4,[[],[["publickeyresponse",3],["error",4],["result",4]]]],[11,"rotate_key","","",4,[[],[["error",4],["ed25519publickey",3],["result",4]]]],[11,"sign_message","","",4,[[["hashvalue",3]],[["ed25519signature",3],["error",4],["result",4]]]],[11,"sign_message_using_version","","",4,[[["hashvalue",3],["ed25519publickey",3]],[["ed25519signature",3],["error",4],["result",4]]]],[11,"available","","",10,[[],[["result",4],["error",4]]]],[11,"get","","",10,[[],[["error",4],["result",4],["getresponse",3]]]],[11,"set","","",10,[[["value",4]],[["result",4],["error",4]]]],[11,"reset_and_clear","","",10,[[],[["result",4],["error",4]]]],[11,"available","","",11,[[],[["result",4],["error",4]]]],[11,"get","","",11,[[],[["error",4],["result",4],["getresponse",3]]]],[11,"set","","",11,[[["value",4]],[["result",4],["error",4]]]],[11,"reset_and_clear","","",11,[[],[["result",4],["error",4]]]],[11,"available","","",12,[[],[["result",4],["error",4]]]],[11,"get","","",12,[[],[["error",4],["result",4],["getresponse",3]]]],[11,"set","","",12,[[["value",4]],[["result",4],["error",4]]]],[11,"reset_and_clear","","Note: This is not a namespace function",12,[[],[["result",4],["error",4]]]],[11,"available","","",13,[[],[["result",4],["error",4]]]],[11,"get","","",13,[[],[["error",4],["result",4],["getresponse",3]]]],[11,"set","","",13,[[["value",4]],[["result",4],["error",4]]]],[11,"reset_and_clear","","",13,[[],[["result",4],["error",4]]]],[11,"available","","Returns an error if the backend service is not online and…",8,[[],[["result",4],["error",4]]]],[11,"get","","Retrieves a value from storage and fails if the backend is…",8,[[],[["error",4],["result",4],["getresponse",3]]]],[11,"set","","Sets a value in storage and fails if the backend is…",8,[[["value",4]],[["result",4],["error",4]]]],[11,"reset_and_clear","","Resets and clears all data held in the storage engine.…",8,[[],[["result",4],["error",4]]]],[11,"available","","",4,[[],[["result",4],["error",4]]]],[11,"get","","",4,[[],[["error",4],["result",4],["getresponse",3]]]],[11,"set","","",4,[[["value",4]],[["result",4],["error",4]]]],[11,"reset_and_clear","","",4,[[],[["result",4],["error",4]]]],[11,"from","","",5,[[["decodeerror",4]]]],[11,"from","","",5,[[["parseerror",3]]]],[11,"from","","",5,[[["error",3]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","","",5,[[["error",3]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","","",8,[[["githubstorage",3]],["storage",4]]],[11,"from","","",8,[[["vaultstorage",3]],["storage",4]]],[11,"from","","",8,[[["inmemorystorage",6]],["storage",4]]],[11,"from","","",8,[[["namespacedstorage",3]],["storage",4]]],[11,"from","","",8,[[["ondiskstorage",6]],["storage",4]]],[11,"from","","",8,[[["securebackend",4]]]],[11,"default","","",11,[[],["inmemorystorageinternal",3]]],[11,"default","","",3,[[],["policy",3]]],[11,"eq","","",0,[[["publickeyresponse",3]]]],[11,"ne","","",0,[[["publickeyresponse",3]]]],[11,"eq","","",5,[[["error",4]]]],[11,"ne","","",5,[[["error",4]]]],[11,"eq","","",1,[[["getresponse",3]]]],[11,"ne","","",1,[[["getresponse",3]]]],[11,"eq","","",3,[[["policy",3]]]],[11,"ne","","",3,[[["policy",3]]]],[11,"eq","","",2,[[["permission",3]]]],[11,"ne","","",2,[[["permission",3]]]],[11,"eq","","",7,[[["identity",4]]]],[11,"ne","","",7,[[["identity",4]]]],[11,"eq","","",6,[[["capability",4]]]],[11,"eq","","",9,[[["value",4]]]],[11,"ne","","",9,[[["value",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"try_into","","",8,[[],[["result",4],["githubstorage",3]]]],[11,"try_into","","",8,[[],[["vaultstorage",3],["result",4]]]],[11,"try_into","","",8,[[],[["result",4],["inmemorystorage",6]]]],[11,"try_into","","",8,[[],[["result",4],["namespacedstorage",3]]]],[11,"try_into","","",8,[[],[["result",4],["ondiskstorage",6]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"import_private_key","","An optional API that allows importing private keys. It…",14,[[["ed25519privatekey",3]],[["result",4],["error",4]]]]],"p":[[3,"PublicKeyResponse"],[3,"GetResponse"],[3,"Permission"],[3,"Policy"],[3,"VaultStorage"],[4,"Error"],[4,"Capability"],[4,"Identity"],[4,"Storage"],[4,"Value"],[3,"GitHubStorage"],[3,"InMemoryStorageInternal"],[3,"NamespacedStorage"],[3,"OnDiskStorageInternal"],[8,"CryptoStorage"],[8,"KVStorage"]]},\
"libra_secure_time":{"doc":"","i":[[3,"RealTimeService","libra_secure_time","A real-time TimeService",null,null],[3,"MockTimeService","","A mock-time TimeService",null,null],[8,"TimeService","","A generic service for providing time related operations…",null,null],[10,"now","","Returns the current time since the UNIX_EPOCH in seconds…",0,[[]]],[10,"sleep","","Sleeps the calling thread for (at least) the specified…",0,[[]]],[11,"new","","",1,[[]]],[11,"new","","",2,[[]]],[11,"increment","","",2,[[]]],[11,"increment_by","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"now","","",1,[[]]],[11,"sleep","","",1,[[]]],[11,"now","","",2,[[]]],[11,"sleep","","",2,[[]]],[11,"clone","","",2,[[],["mocktimeservice",3]]],[11,"default","","",1,[[],["realtimeservice",3]]],[11,"default","","",2,[[],["mocktimeservice",3]]]],"p":[[8,"TimeService"],[3,"RealTimeService"],[3,"MockTimeService"]]},\
"libra_security_logger":{"doc":"","i":[[3,"SecurityLog","libra_security_logger","The `SecurityLog` struct is used to log security-sensitive…",null,null],[4,"SecurityEvent","","",null,null],[13,"InvalidTransactionAC","","Admission Control received a transaction with an invalid…",0,null],[13,"InvalidTransactionMP","","Mempool received a transaction with an invalid signature",0,null],[13,"InvalidTransactionConsensus","","Consensus received a transaction with an invalid signature",0,null],[13,"InvalidChunkExecutor","","Executor received an invalid transactions chunk",0,null],[13,"InvalidNetworkEventMP","","Mempool received an invalid network event",0,null],[13,"DuplicateConsensusVote","","Consensus received an invalid vote",0,null],[13,"InvalidConsensusProposal","","Consensus received an invalid proposal",0,null],[13,"InvalidConsensusVote","","Consensus received an invalid vote",0,null],[13,"InvalidConsensusRound","","Consensus received an invalid new round message",0,null],[13,"InvalidSyncInfoMsg","","Consensus received an invalid sync info message",0,null],[13,"InvalidNetworkEventHC","","HealthChecker received an invalid network event",0,null],[13,"InvalidHealthCheckerMsg","","HealthChecker received an invalid message",0,null],[13,"InvalidRetrievedBlock","","A received block is invalid",0,null],[13,"InvalidBlock","","A block being committed or executed is invalid",0,null],[13,"InvalidNetworkPeer","","Network identified an invalid peer",0,null],[13,"InvalidDiscoveryMsg","","Network discovery received an invalid DiscoveryMsg",0,null],[5,"security_log","","Creates a `SecurityLog` struct that can be decorated with…",null,[[["securityevent",4]],["securitylog",3]]],[11,"data","","Adds additional metadata to the `SecurityLog` struct. The…",1,[[["debug",8]]]],[11,"error","","Adds an application error to the `SecurityLog` struct. The…",1,[[["debug",8]]]],[11,"backtrace","","Adds a backtrace to the `SecurityLog` struct.",1,[[]]],[11,"log","","Prints the `SecurityEvent` struct.",1,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]]],"p":[[4,"SecurityEvent"],[3,"SecurityLog"]]},\
"libra_state_view":{"doc":"This crate defines `trait StateView`.","i":[[8,"StateView","libra_state_view","`StateView` is a trait that defines a read-only snapshot…",null,null],[10,"get","","Gets the state for a single access path.",0,[[["accesspath",3]],[["result",6],["option",4]]]],[10,"multi_get","","Gets states for a list of access paths.",0,[[],[["result",6],["vec",3]]]],[10,"is_genesis","","VM needs this method to know whether the current state…",0,[[]]]],"p":[[8,"StateView"]]},\
"libra_swarm":{"doc":"","i":[[0,"client","libra_swarm","",null,null],[3,"InteractiveClient","libra_swarm::client","",null,null],[11,"new_with_inherit_io","","",0,[[["path",3],["waypoint",3]]]],[11,"output","","",0,[[],[["output",3],["result",6]]]],[0,"swarm","libra_swarm","",null,null],[3,"LibraNode","libra_swarm::swarm","",null,null],[3,"LibraSwarm","","Struct holding instances and information of Libra Swarm",null,null],[12,"dir","","",1,null],[12,"nodes","","",1,null],[12,"config","","",1,null],[4,"HealthStatus","","",null,null],[13,"Healthy","","",2,null],[13,"Crashed","","",2,null],[13,"RpcFailure","","",2,null],[4,"LibraSwarmDir","","A wrapper that unifies PathBuf and TempPath.",null,null],[13,"Persistent","","",3,null],[13,"Temporary","","",3,null],[4,"SwarmLaunchFailure","","",null,null],[13,"LaunchTimeout","","Timeout while waiting for nodes to start",4,null],[13,"NodeCrash","","Node return status indicates a crash",4,null],[13,"ConnectivityTimeout","","Timeout while waiting for the nodes to report that they\'re…",4,null],[13,"IoError","","",4,null],[11,"prepare","","Prior to using LibraSwarm this should be run. LibraSwarm…",5,[[]]],[11,"launch","","",5,[[["string",3],["path",3],["pathbuf",3],["roletype",4]],["result",6]]],[11,"validator_peer_id","","",5,[[],[["accountaddress",3],["option",4]]]],[11,"port","","",5,[[]]],[11,"get_log_contents","","",5,[[],[["string",3],["result",6]]]],[11,"check_connectivity","","",5,[[]]],[11,"health_check","","",5,[[],["healthstatus",4]]],[11,"launch_swarm","","",1,[[["string",3],["option",4],["option",4],["nodeconfig",3],["roletype",4]]]],[11,"configure_swarm","","",1,[[["string",3],["option",4],["option",4],["nodeconfig",3],["roletype",4]],[["libraswarm",3],["result",6]]]],[11,"launch_attempt","","",1,[[["roletype",4]],[["result",6],["swarmlaunchfailure",4]]]],[11,"wait_for_all_nodes_to_catchup","","This function first checks the last committed round of all…",1,[[]]],[11,"get_client_port","","A specific public JSON RPC port of a validator or a full…",1,[[]]],[11,"get_validators_ids","","Vector with the peer ids of the validators in the swarm.",1,[[],[["string",3],["vec",3]]]],[11,"get_validators_debug_ports","","Vector with the debug ports of all the validators in the…",1,[[],["vec",3]]],[11,"get_validator","","",1,[[],[["option",4],["libranode",3]]]],[11,"kill_node","","",1,[[]]],[11,"add_node","","",1,[[["roletype",4]],[["result",6],["swarmlaunchfailure",4]]]],[11,"from","libra_swarm::client","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","libra_swarm::swarm","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"drop","libra_swarm::client","",0,[[]]],[11,"drop","libra_swarm::swarm","",5,[[]]],[11,"drop","","",1,[[]]],[11,"as_ref","","",3,[[],["path",3]]],[11,"from","","",4,[[["error",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"source","","",4,[[],[["error",8],["option",4]]]]],"p":[[3,"InteractiveClient"],[3,"LibraSwarm"],[4,"HealthStatus"],[4,"LibraSwarmDir"],[4,"SwarmLaunchFailure"],[3,"LibraNode"]]},\
"libra_temppath":{"doc":"","i":[[3,"TempPath","libra_temppath","A simple wrapper for creating a temporary directory that…",null,null],[11,"new","","Create new, uninitialized temporary path in the system…",0,[[]]],[11,"new_with_temp_dir","","Create new, uninitialized temporary path in the specified…",0,[[["pathbuf",3]]]],[11,"path","","Return the underlying path to this temporary directory.",0,[[],["path",3]]],[11,"persist","","Keep the temp path",0,[[]]],[11,"create_as_file","","",0,[[],["result",6]]],[11,"create_as_dir","","",0,[[],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"as_ref","","",0,[[],["path",3]]],[11,"default","","",0,[[]]],[11,"eq","","",0,[[["temppath",3]]]],[11,"ne","","",0,[[["temppath",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"TempPath"]]},\
"libra_transaction_scripts":{"doc":"This crates includes the compiled transactions scripts to…","i":[[7,"ADD_VALIDATOR_TXN","libra_transaction_scripts","",null,null],[7,"PEER_TO_PEER_WITH_METADATA_TXN","","",null,null],[7,"REGISTER_VALIDATOR_TXN","","",null,null],[7,"REMOVE_VALIDATOR_TXN","","",null,null],[7,"ROTATE_CONSENSUS_PUBKEY_TXN","","",null,null],[7,"ROTATE_AUTHENTICATION_KEY_TXN","","",null,null],[7,"MINT_TXN","","",null,null],[7,"EMPTY_TXN","","",null,null]],"p":[]},\
"libra_types":{"doc":"","i":[[3,"PeerId","libra_types","A struct that represents an account address.",null,null],[0,"access_path","","Suppose we have the following data structure in a smart…",null,null],[3,"AccessPath","libra_types::access_path","",null,null],[12,"address","","",0,null],[12,"path","","",0,null],[18,"CODE_TAG","","",0,null],[18,"RESOURCE_TAG","","",0,null],[11,"new","","",0,[[["accountaddress",3],["vec",3]]]],[11,"new_for_sent_event","","Create an AccessPath to the event for the sender account…",0,[[["accountaddress",3]]]],[11,"new_for_received_event","","Create an AccessPath to the event for the target account…",0,[[["accountaddress",3]]]],[11,"resource_access_vec","","",0,[[["structtag",3]],["vec",3]]],[11,"resource_access_path","","Convert Accesses into a byte offset which would be used by…",0,[[["resourcekey",3]],["accesspath",3]]],[11,"code_access_path","","",0,[[["moduleid",3]],["accesspath",3]]],[0,"account_address","libra_types","",null,null],[3,"AccountAddress","libra_types::account_address","A struct that represents an account address.",null,null],[5,"from_public_key","","",null,[[["ed25519publickey",3]],["accountaddress",3]]],[0,"account_config","libra_types","",null,null],[0,"constants","libra_types::account_config","",null,null],[0,"account","libra_types::account_config::constants","",null,null],[5,"sent_event_name","libra_types::account_config::constants::account","",null,[[],["identstr",3]]],[5,"received_event_name","","",null,[[],["identstr",3]]],[7,"ACCOUNT_MODULE","","The ModuleId for the Account module.",null,null],[17,"ACCOUNT_MODULE_NAME","","",null,null],[0,"account_limits","libra_types::account_config::constants","",null,null],[5,"account_limits_module_name","libra_types::account_config::constants::account_limits","",null,[[],["identstr",3]]],[5,"account_limits_window_struct_name","","",null,[[],["identstr",3]]],[7,"ACCOUNT_LIMITS_MODULE","","",null,null],[7,"ACCOUNT_LIMITS_WINDOW_STRUCT_NAME","","",null,null],[0,"account_type","libra_types::account_config::constants","",null,null],[5,"account_role_module_name","libra_types::account_config::constants::account_type","",null,[[],["identstr",3]]],[5,"account_role_struct_name","","",null,[[],["identstr",3]]],[5,"vasp_type_module_name","","",null,[[],["identstr",3]]],[5,"root_vasp_type_struct_name","","",null,[[],["identstr",3]]],[5,"empty_account_role_module_name","","",null,[[],["identstr",3]]],[5,"empty_account_role_struct_name","","",null,[[],["identstr",3]]],[5,"unhosted_type_module_name","","",null,[[],["identstr",3]]],[5,"unhosted_type_struct_name","","",null,[[],["identstr",3]]],[5,"empty_account_role_struct_tag","","",null,[[],["structtag",3]]],[5,"vasp_account_role_struct_tag","","",null,[[],["structtag",3]]],[5,"unhosted_account_role_struct_tag","","",null,[[],["structtag",3]]],[7,"ACCOUNT_ROLE_MODULE","","",null,null],[7,"ACCOUNT_ROLE_STRUCT_NAME","","",null,null],[7,"VASP_TYPE_MODULE","","",null,null],[7,"ROOT_VASP_STRUCT_NAME","","",null,null],[7,"EMPTY_ACCOUNT_ROLE_MODULE","","",null,null],[7,"EMPTY_ACCOUNT_STRUCT_NAME","","",null,null],[7,"UNHOSTED_TYPE_MODULE","","",null,null],[7,"UNHOSTED_STRUCT_NAME","","",null,null],[0,"addresses","libra_types::account_config::constants","",null,null],[17,"CORE_CODE_ADDRESS","libra_types::account_config::constants::addresses","",null,null],[5,"association_address","","",null,[[],["accountaddress",3]]],[5,"transaction_fee_address","","",null,[[],["accountaddress",3]]],[5,"validator_set_address","","",null,[[],["accountaddress",3]]],[5,"treasury_compliance_account_address","","",null,[[],["accountaddress",3]]],[0,"coins","libra_types::account_config::constants","",null,null],[5,"coin1_tag","libra_types::account_config::constants::coins","",null,[[],["typetag",4]]],[17,"COIN1_NAME","","",null,null],[17,"COIN2_NAME","","",null,null],[0,"debug","libra_types::account_config::constants","",null,null],[7,"GENESIS_MODULE","libra_types::account_config::constants::debug","",null,null],[7,"DEBUG_MODULE_NAME","","",null,null],[7,"DEBUG_MODULE","","",null,null],[0,"event","libra_types::account_config::constants","",null,null],[5,"event_module_name","libra_types::account_config::constants::event","",null,[[],["identstr",3]]],[5,"event_handle_generator_struct_name","","",null,[[],["identstr",3]]],[5,"event_handle_struct_name","","",null,[[],["identstr",3]]],[5,"event_handle_generator_struct_tag","","",null,[[],["structtag",3]]],[7,"EVENT_MODULE","","",null,null],[0,"lbr","libra_types::account_config::constants","",null,null],[5,"lbr_type_tag","libra_types::account_config::constants::lbr","",null,[[],["typetag",4]]],[7,"LBR_MODULE","","",null,null],[7,"LBR_STRUCT_NAME","","",null,null],[17,"LBR_NAME","","",null,null],[0,"libra","libra_types::account_config::constants","",null,null],[5,"type_tag_for_currency_code","libra_types::account_config::constants::libra","",null,[[["identifier",3]],["typetag",4]]],[5,"from_currency_code_string","","",null,[[],[["identifier",3],["result",6]]]],[7,"COIN_MODULE","","",null,null],[17,"LIBRA_MODULE_NAME","","",null,null],[0,"events","libra_types::account_config","",null,null],[0,"burn","libra_types::account_config::events","",null,null],[3,"BurnEvent","libra_types::account_config::events::burn","Struct that represents a BurnEvent.",null,null],[11,"amount","","Get the amount burned",1,[[]]],[11,"currency_code","","Return the code for the currency that was burned",1,[[],["identstr",3]]],[11,"preburn_address","","Return the address whose Preburn resource formerly held…",1,[[],["accountaddress",3]]],[11,"try_from_bytes","","",1,[[],["result",6]]],[0,"cancel_burn","libra_types::account_config::events","",null,null],[3,"CancelBurnEvent","libra_types::account_config::events::cancel_burn","Struct that represents a CancelBurnEvent.",null,null],[11,"amount","","Get the amount canceled",2,[[]]],[11,"currency_code","","Return the code for the currency that was returned",2,[[],["identstr",3]]],[11,"preburn_address","","Return the address whose Preburn resource formerly held…",2,[[],["accountaddress",3]]],[11,"try_from_bytes","","",2,[[],["result",6]]],[0,"mint","libra_types::account_config::events","",null,null],[3,"MintEvent","libra_types::account_config::events::mint","Struct that represents a MintEvent.",null,null],[11,"amount","","Get the amount minted",3,[[]]],[11,"currency_code","","Return the code for the currency that was minted",3,[[],["identstr",3]]],[11,"try_from_bytes","","",3,[[],["result",6]]],[0,"new_block","libra_types::account_config::events","",null,null],[3,"NewBlockEvent","libra_types::account_config::events::new_block","Struct that represents a NewBlockEvent.",null,null],[11,"round","","",4,[[]]],[11,"proposer","","",4,[[],["accountaddress",3]]],[11,"proposed_time","","",4,[[]]],[11,"try_from_bytes","","",4,[[],["result",6]]],[0,"new_epoch","libra_types::account_config::events","",null,null],[3,"NewEpochEvent","libra_types::account_config::events::new_epoch","Struct that represents a NewEpochEvent.",null,null],[11,"epoch","","",5,[[]]],[11,"try_from_bytes","","",5,[[],["result",6]]],[11,"event_key","","",5,[[],["eventkey",3]]],[0,"preburn","libra_types::account_config::events","",null,null],[3,"PreburnEvent","libra_types::account_config::events::preburn","Struct that represents a PreburnEvent.",null,null],[11,"amount","","Get the amount preburned",6,[[]]],[11,"currency_code","","Return the code for the currency that was preburned",6,[[],["identstr",3]]],[11,"preburn_address","","Return the address whose Preburn now holds the funds",6,[[],["accountaddress",3]]],[11,"try_from_bytes","","",6,[[],["result",6]]],[0,"received_payment","libra_types::account_config::events","",null,null],[3,"ReceivedPaymentEvent","libra_types::account_config::events::received_payment","Struct that represents a ReceivedPaymentEvent.",null,null],[7,"ACCOUNT_RECEIVED_EVENT_PATH","","Returns the path to the received event counter for an…",null,null],[11,"try_from_bytes","","",7,[[],["result",6]]],[11,"sender","","Get the receiver of this transaction event.",7,[[],["accountaddress",3]]],[11,"amount","","Get the amount sent or received",7,[[]]],[11,"metadata","","Get the metadata associated with this event",7,[[],["vec",3]]],[11,"currency_code","","Return the currency code that the payment was made in.",7,[[],["identstr",3]]],[0,"sent_payment","libra_types::account_config::events","",null,null],[3,"SentPaymentEvent","libra_types::account_config::events::sent_payment","Struct that represents a SentPaymentEvent.",null,null],[7,"ACCOUNT_SENT_EVENT_PATH","","The path to the sent event counter for an Account…",null,null],[11,"new","","",8,[[["identifier",3],["accountaddress",3],["vec",3]]]],[11,"try_from_bytes","","",8,[[],["result",6]]],[11,"receiver","","Get the sender of this transaction event.",8,[[],["accountaddress",3]]],[11,"amount","","Get the amount sent or received",8,[[]]],[11,"metadata","","Get the metadata associated with this event",8,[[],["vec",3]]],[11,"currency_code","","Return the currency currency_code symbol that the payment…",8,[[],["identstr",3]]],[0,"upgrade","libra_types::account_config::events","",null,null],[3,"UpgradeEvent","libra_types::account_config::events::upgrade","Struct that represents a UpgradeEvent.",null,null],[11,"write_set","","Get the applied writeset.",9,[[]]],[11,"try_from_bytes","","",9,[[],["result",6]]],[0,"resources","libra_types::account_config","",null,null],[0,"account","libra_types::account_config::resources","",null,null],[3,"AccountResource","libra_types::account_config::resources::account","A Rust representation of an Account resource. This is not…",null,null],[11,"new","","Constructs an Account resource.",10,[[["vec",3],["withdrawcapabilityresource",3],["option",4],["eventhandle",3],["keyrotationcapabilityresource",3],["option",4]]]],[11,"sequence_number","","Return the sequence_number field for the given…",10,[[]]],[11,"has_delegated_withdrawal_capability","","Returns if this account has delegated its withdrawal…",10,[[]]],[11,"has_delegated_key_rotation_capability","","Returns if this account has delegated its key rotation…",10,[[]]],[11,"authentication_key","","Return the authentication_key field for the given…",10,[[]]],[11,"sent_events","","Return the sent_events handle for the given AccountResource",10,[[],["eventhandle",3]]],[11,"received_events","","Return the received_events handle for the given…",10,[[],["eventhandle",3]]],[11,"is_frozen","","Return the the is_frozen flag for the given AccountResource",10,[[]]],[11,"role_id","","Return the the is_frozen flag for the given AccountResource",10,[[]]],[0,"association_capability","libra_types::account_config::resources","",null,null],[3,"AssociationCapabilityResource","libra_types::account_config::resources::association_capability","",null,null],[11,"is_certified","","",11,[[]]],[0,"balance","libra_types::account_config::resources","",null,null],[3,"BalanceResource","libra_types::account_config::resources::balance","The balance resource held under an account.",null,null],[11,"new","","",12,[[]]],[11,"coin","","",12,[[]]],[11,"struct_tag_for_currency","","",12,[[["typetag",4]],["structtag",3]]],[11,"access_path_for","","",12,[[["typetag",4]],["vec",3]]],[0,"currency_info","libra_types::account_config::resources","",null,null],[3,"CurrencyInfoResource","libra_types::account_config::resources::currency_info","Struct that represents a CurrencyInfo resource",null,null],[11,"currency_code","","",13,[[],["identstr",3]]],[11,"scaling_factor","","",13,[[]]],[11,"fractional_part","","",13,[[]]],[11,"convert_to_lbr","","",13,[[]]],[11,"struct_tag_for","","",13,[[["identifier",3]],["structtag",3]]],[11,"resource_path_for","","",13,[[["identifier",3]],["accesspath",3]]],[11,"access_path_for","","",13,[[["identifier",3]],["vec",3]]],[11,"try_from_bytes","","",13,[[],["result",6]]],[0,"key_rotation_capability","libra_types::account_config::resources","",null,null],[3,"KeyRotationCapabilityResource","libra_types::account_config::resources::key_rotation_capability","",null,null],[11,"account_address","","",14,[[],["accountaddress",3]]],[0,"role","libra_types::account_config::resources","",null,null],[4,"AccountRole","libra_types::account_config::resources::role","A enum that captures the collection of role-specific…",null,null],[13,"ParentVASP","","",15,null],[13,"ChildVASP","","",15,null],[13,"Unhosted","","",15,null],[13,"Unknown","","",15,null],[11,"parent_vasp_data","","",15,[[],[["parentvasp",3],["option",4]]]],[11,"child_vasp_data","","",15,[[],[["childvasp",3],["option",4]]]],[11,"is_unhosted","","",15,[[]]],[0,"vasp","libra_types::account_config::resources","",null,null],[3,"ParentVASP","libra_types::account_config::resources::vasp","",null,null],[3,"ChildVASP","","",null,null],[11,"human_name","","",16,[[]]],[11,"base_url","","",16,[[]]],[11,"expiration_date","","",16,[[]]],[11,"compliance_public_key","","",16,[[]]],[11,"parent_vasp_addr","","",17,[[],["accountaddress",3]]],[0,"withdraw_capability","libra_types::account_config::resources","",null,null],[3,"WithdrawCapabilityResource","libra_types::account_config::resources::withdraw_capability","",null,null],[11,"account_address","","",18,[[],["accountaddress",3]]],[0,"account_state","libra_types","",null,null],[3,"AccountState","libra_types::account_state","",null,null],[11,"get_account_address","","",19,[[],[["result",6],["option",4]]]],[11,"get_account_resource","","",19,[[],[["option",4],["result",6]]]],[11,"get_balance_resources","","",19,[[],[["result",6],["btreemap",3]]]],[11,"get_configuration_resource","","",19,[[],[["result",6],["option",4]]]],[11,"get_libra_timestamp_resource","","",19,[[],[["option",4],["result",6]]]],[11,"get_validator_config_resource","","",19,[[],[["result",6],["option",4]]]],[11,"get_account_role","","",19,[[],[["option",4],["result",6]]]],[11,"get_validator_set","","",19,[[],[["result",6],["option",4]]]],[11,"get_libra_block_resource","","",19,[[],[["result",6],["option",4]]]],[11,"get_event_handle_by_query_path","","",19,[[],[["option",4],["result",6]]]],[11,"get","","",19,[[],[["option",4],["vec",3]]]],[11,"get_resource","","",19,[[],[["option",4],["result",6]]]],[11,"insert","","",19,[[["vec",3]],[["vec",3],["option",4]]]],[11,"remove","","",19,[[],[["vec",3],["option",4]]]],[11,"iter","","",19,[[]]],[0,"account_state_blob","libra_types","",null,null],[3,"AccountStateBlob","libra_types::account_state_blob","",null,null],[3,"AccountStateBlobHasher","","",null,null],[3,"AccountStateWithProof","","",null,null],[12,"version","","The transaction version at which this account state is seen.",20,null],[12,"blob","","Blob value representing the account state. If this field…",20,null],[12,"proof","","The proof the client can use to authenticate the value.",20,null],[11,"new","","Constructor.",20,[[["option",4],["accountstateproof",3],["version",6],["accountstateblob",3]]]],[11,"verify","","Verifies the the account state blob with the proof, both…",20,[[["version",6],["ledgerinfo",3],["accountaddress",3]],["result",6]]],[11,"get_event_key_and_count_by_query_path","","Returns the `EventKey` (if existent) and number of total…",20,[[],["result",6]]],[0,"block_info","libra_types","",null,null],[3,"BlockInfo","libra_types::block_info","This structure contains all the information needed for…",null,null],[6,"Round","","The round of a block is a consensus-internal counter,…",null,null],[17,"GENESIS_EPOCH","","",null,null],[17,"GENESIS_ROUND","","",null,null],[17,"GENESIS_VERSION","","",null,null],[17,"GENESIS_TIMESTAMP_USECS","","",null,null],[11,"new","","",21,[[["hashvalue",3],["version",6],["epochstate",3],["option",4],["round",6]]]],[11,"empty","","",21,[[]]],[11,"random","","",21,[[["round",6]]]],[11,"genesis","","Create a new genesis block. The genesis block is…",21,[[["validatorset",3],["hashvalue",3]]]],[11,"mock_genesis","","Create a mock genesis `BlockInfo` with an empty state tree…",21,[[["validatorset",3],["option",4]]]],[11,"next_block_epoch","","The epoch after this block committed",21,[[]]],[11,"epoch","","",21,[[]]],[11,"executed_state_id","","",21,[[],["hashvalue",3]]],[11,"has_reconfiguration","","",21,[[]]],[11,"id","","",21,[[],["hashvalue",3]]],[11,"next_epoch_state","","",21,[[],[["option",4],["epochstate",3]]]],[11,"round","","",21,[[],["round",6]]],[11,"timestamp_usecs","","",21,[[]]],[11,"version","","",21,[[],["version",6]]],[0,"block_metadata","libra_types","",null,null],[3,"BlockMetadata","libra_types::block_metadata","Struct that will be persisted on chain to store the…",null,null],[3,"LibraBlockResource","","",null,null],[3,"NewBlockEvent","","",null,null],[5,"new_block_event_key","","",null,[[],["eventkey",3]]],[7,"NEW_BLOCK_EVENT_PATH","","The path to the new block event handle under a…",null,null],[11,"new","","",22,[[["vec",3],["hashvalue",3],["accountaddress",3]]]],[11,"id","","",22,[[],["hashvalue",3]]],[11,"into_inner","","",22,[[],["result",6]]],[11,"proposer","","",22,[[],["accountaddress",3]]],[11,"new_block_events","","",23,[[],["eventhandle",3]]],[11,"new","","",24,[[["accountaddress",3],["vec",3]]]],[11,"round","","",24,[[]]],[11,"proposer","","",24,[[],["accountaddress",3]]],[11,"votes","","",24,[[],[["accountaddress",3],["vec",3]]]],[0,"contract_event","libra_types","",null,null],[3,"ContractEventHasher","libra_types::contract_event","",null,null],[3,"ContractEventV0","","Entry produced via a call to the `emit_event` builtin.",null,null],[3,"ContractEventV0Hasher","","",null,null],[3,"EventWithProof","","",null,null],[12,"transaction_version","","",25,null],[12,"event_index","","",25,null],[12,"event","","",25,null],[12,"proof","","",25,null],[4,"ContractEvent","","Support versioning of the data structure.",null,null],[13,"V0","","",26,null],[11,"new","","",26,[[["typetag",4],["eventkey",3],["vec",3]]]],[11,"new","","",27,[[["typetag",4],["eventkey",3],["vec",3]]]],[11,"key","","",27,[[],["eventkey",3]]],[11,"sequence_number","","",27,[[]]],[11,"event_data","","",27,[[]]],[11,"type_tag","","",27,[[],["typetag",4]]],[11,"new","","Constructor.",25,[[["version",6],["eventproof",3],["contractevent",4]]]],[11,"verify","","Verifies the event with the proof, both carried by `self`.",25,[[["version",6],["ledgerinfo",3],["eventkey",3]],["result",6]]],[0,"epoch_change","libra_types","",null,null],[3,"EpochChangeProof","libra_types::epoch_change","A vector of LedgerInfo with contiguous increasing epoch…",null,null],[12,"ledger_info_with_sigs","","",28,null],[12,"more","","",28,null],[8,"Verifier","","The verification of the epoch change proof starts with…",null,null],[10,"verify","","Verify if the ledger_info is trust worthy.",29,[[["ledgerinfowithsignatures",4]],["result",6]]],[10,"epoch_change_verification_required","","Returns true in case the given epoch is larger than the…",29,[[]]],[10,"is_ledger_info_stale","","Returns true if the given [`LedgerInfo`] is stale and…",29,[[["ledgerinfo",3]]]],[11,"new","","",28,[[["ledgerinfowithsignatures",4],["vec",3]]]],[11,"epoch","","The first/lowest epoch of the proof to indicate which…",28,[[],["result",6]]],[11,"verify","","Verify the proof is correctly chained with known epoch and…",28,[[["verifier",8]],[["ledgerinfowithsignatures",4],["result",6]]]],[0,"epoch_state","libra_types","",null,null],[3,"EpochState","libra_types::epoch_state","EpochState represents a trusted validator set to validate…",null,null],[12,"epoch","","",30,null],[12,"verifier","","",30,null],[11,"empty","","",30,[[]]],[0,"event","libra_types","",null,null],[3,"EventKey","libra_types::event","A struct that represents a globally unique id for an Event…",null,null],[3,"EventHandle","","A Rust representation of an Event Handle Resource.",null,null],[11,"new","","Construct a new EventKey from a byte array slice.",31,[[]]],[18,"LENGTH","","The number of bytes in an EventKey.",31,null],[11,"as_bytes","","Get the byte representation of the event key.",31,[[]]],[11,"to_vec","","Convert event key into a byte array.",31,[[],["vec",3]]],[11,"get_creator_address","","Get the account address part in this event key",31,[[],["accountaddress",3]]],[11,"random","","Create a random event key for testing",31,[[]]],[11,"new_from_address","","Create a unique handle by using an AccountAddress and a…",31,[[["accountaddress",3]]]],[11,"new","","Constructs a new Event Handle",32,[[["eventkey",3]]]],[11,"key","","Return the key to where this event is stored in EventStore.",32,[[],["eventkey",3]]],[11,"count","","Return the counter for the handle",32,[[]]],[11,"count_mut","","",32,[[]]],[11,"random_handle","","Create a random event handle for testing",32,[[]]],[11,"new_from_address","","Derive a unique handle by using an AccountAddress and a…",32,[[["accountaddress",3]]]],[0,"get_with_proof","libra_types","",null,null],[3,"UpdateToLatestLedgerRequest","libra_types::get_with_proof","",null,null],[12,"client_known_version","","",33,null],[12,"requested_items","","",33,null],[3,"UpdateToLatestLedgerResponse","","",null,null],[12,"response_items","","",34,null],[12,"ledger_info_with_sigs","","",34,null],[12,"epoch_change_proof","","",34,null],[12,"ledger_consistency_proof","","",34,null],[4,"RequestItem","","",null,null],[13,"GetAccountTransactionBySequenceNumber","","",35,null],[12,"account","libra_types::get_with_proof::RequestItem","",36,null],[12,"sequence_number","","",36,null],[12,"fetch_events","","",36,null],[13,"GetAccountState","libra_types::get_with_proof","",35,null],[12,"address","libra_types::get_with_proof::RequestItem","",37,null],[13,"GetEventsByEventAccessPath","libra_types::get_with_proof","",35,null],[12,"access_path","libra_types::get_with_proof::RequestItem","",38,null],[12,"start_event_seq_num","","",38,null],[12,"ascending","","",38,null],[12,"limit","","",38,null],[13,"GetTransactions","libra_types::get_with_proof","",35,null],[12,"start_version","libra_types::get_with_proof::RequestItem","",39,null],[12,"limit","","",39,null],[12,"fetch_events","","",39,null],[4,"ResponseItem","libra_types::get_with_proof","",null,null],[13,"GetAccountTransactionBySequenceNumber","","",40,null],[12,"transaction_with_proof","libra_types::get_with_proof::ResponseItem","",41,null],[12,"proof_of_current_sequence_number","","",41,null],[13,"GetAccountState","libra_types::get_with_proof","",40,null],[12,"account_state_with_proof","libra_types::get_with_proof::ResponseItem","",42,null],[13,"GetEventsByEventAccessPath","libra_types::get_with_proof","",40,null],[12,"events_with_proof","libra_types::get_with_proof::ResponseItem","",43,null],[12,"proof_of_latest_event","","",43,null],[13,"GetTransactions","libra_types::get_with_proof","",40,null],[12,"txn_list_with_proof","libra_types::get_with_proof::ResponseItem","",44,null],[5,"verify_update_to_latest_ledger_response","libra_types::get_with_proof","Verifies content of an [`UpdateToLatestLedgerResponse`]…",null,[[["trustedstate",3],["ledgerinfowithsignatures",4],["epochchangeproof",3]],[["result",6],["trustedstatechange",4]]]],[11,"new","","",33,[[["vec",3],["requestitem",4]]]],[11,"new","","Constructor.",34,[[["responseitem",4],["accumulatorconsistencyproof",3],["epochchangeproof",3],["vec",3],["ledgerinfowithsignatures",4]]]],[11,"verify","","Verifies that the response has items corresponding to…",34,[[["trustedstate",3],["updatetolatestledgerrequest",3]],[["result",6],["trustedstatechange",4]]]],[11,"into_get_account_txn_by_seq_num_response","","",40,[[],["result",6]]],[0,"ledger_info","libra_types","",null,null],[3,"LedgerInfo","libra_types::ledger_info","This structure serves a dual purpose.",null,null],[3,"LedgerInfoHasher","","",null,null],[3,"LedgerInfoWithV0","","The validator node returns this structure which includes…",null,null],[4,"LedgerInfoWithSignatures","","Wrapper around LedgerInfoWithScheme to support future…",null,null],[13,"V0","","",45,null],[11,"new","","Constructs a `LedgerInfo` object based on the given commit…",46,[[["blockinfo",3],["hashvalue",3]]]],[11,"genesis","","Create a new LedgerInfo at genesis with the given genesis…",46,[[["validatorset",3],["hashvalue",3]]]],[11,"mock_genesis","","",46,[[["validatorset",3],["option",4]]]],[11,"commit_info","","The `BlockInfo` of a committed block.",46,[[],["blockinfo",3]]],[11,"epoch","","A series of wrapper functions for the data stored in the…",46,[[]]],[11,"next_block_epoch","","",46,[[]]],[11,"round","","",46,[[],["round",6]]],[11,"consensus_block_id","","",46,[[],["hashvalue",3]]],[11,"transaction_accumulator_hash","","",46,[[],["hashvalue",3]]],[11,"version","","",46,[[],["version",6]]],[11,"timestamp_usecs","","",46,[[]]],[11,"next_epoch_state","","",46,[[],[["option",4],["epochstate",3]]]],[11,"consensus_data_hash","","Returns hash of consensus voting data in this `LedgerInfo`.",46,[[],["hashvalue",3]]],[11,"set_consensus_data_hash","","",46,[[["hashvalue",3]]]],[11,"new","","",45,[[["btreemap",3],["ledgerinfo",3],["accountaddress",3],["ed25519signature",3]]]],[11,"genesis","","",45,[[["validatorset",3],["hashvalue",3]]]],[11,"new","","",47,[[["btreemap",3],["ledgerinfo",3],["accountaddress",3],["ed25519signature",3]]]],[11,"genesis","","Create a new `LedgerInfoWithEd25519` at genesis with the…",47,[[["validatorset",3],["hashvalue",3]]]],[11,"ledger_info","","",47,[[],["ledgerinfo",3]]],[11,"add_signature","","",47,[[["accountaddress",3],["ed25519signature",3]]]],[11,"remove_signature","","",47,[[["accountaddress",3]]]],[11,"signatures","","",47,[[],["btreemap",3]]],[11,"verify_signatures","","",47,[[["validatorverifier",3]],[["result",4],["verifyerror",4]]]],[0,"libra_timestamp","libra_types","",null,null],[3,"LibraTimestampResource","libra_types::libra_timestamp","",null,null],[12,"libra_timestamp","","",48,null],[3,"LibraTimestamp","","",null,null],[12,"microseconds","","",49,null],[0,"mempool_status","libra_types","",null,null],[3,"MempoolStatus","libra_types::mempool_status","A `MempoolStatus` is represented as a required status code…",null,null],[12,"code","","insertion status code",50,null],[12,"message","","optional message",50,null],[4,"MempoolStatusCode","","",null,null],[13,"Accepted","","",51,null],[13,"InvalidSeqNumber","","",51,null],[13,"MempoolIsFull","","",51,null],[13,"TooManyTransactions","","",51,null],[13,"InvalidUpdate","","",51,null],[13,"VmError","","",51,null],[13,"UnknownStatus","","",51,null],[11,"new","","",50,[[["mempoolstatuscode",4]]]],[11,"with_message","","Adds a message to the Mempool status.",50,[[["string",3]]]],[0,"move_resource","libra_types","",null,null],[8,"MoveStorage","libra_types::move_resource","",null,null],[10,"batch_fetch_resources","","Returns a vector of Move resources as serialized byte…",52,[[["accesspath",3],["vec",3]],[["result",6],["vec",3]]]],[10,"batch_fetch_resources_by_version","","Returns a vector of Move resources as serialized byte…",52,[[["version",6],["accesspath",3],["vec",3]],[["result",6],["vec",3]]]],[0,"on_chain_config","libra_types","",null,null],[3,"LibraVersion","libra_types::on_chain_config","Defines the version of Libra Validator software.",null,null],[12,"major","","",53,null],[3,"RegisteredCurrencies","","",null,null],[3,"ValidatorSet","","",null,null],[3,"VMConfig","","Defines all the on chain configuration data needed by VM.",null,null],[12,"publishing_option","","",54,null],[12,"gas_schedule","","",54,null],[3,"ConfigID","","To register an on-chain config in Rust: 1. Implement the…",null,null],[3,"OnChainConfigPayload","","",null,null],[3,"ConfigurationResource","","",null,null],[4,"VMPublishingOption","","Defines and holds the publishing policies for the VM.…",null,null],[13,"Locked","","Only allow scripts on a whitelist to be run",55,null],[13,"CustomScripts","","Allow custom scripts, but not custom module publishing",55,null],[13,"Open","","Allow both custom scripts and custom module publishing",55,null],[5,"config_address","","",null,[[],["accountaddress",3]]],[5,"new_epoch_event_key","","",null,[[],["eventkey",3]]],[5,"access_path_for_config","","",null,[[["accountaddress",3],["identifier",3]],["accesspath",3]]],[11,"new","","",56,[[["identifier",3],["vec",3]]]],[11,"currency_codes","","",56,[[]]],[11,"from_bytes","","",56,[[],["result",6]]],[11,"new","","Constructs a ValidatorSet resource.",57,[[["vec",3],["validatorinfo",3]]]],[11,"payload","","",57,[[]]],[11,"empty","","",57,[[]]],[11,"is_open","","",55,[[]]],[11,"is_allowed_script","","",55,[[]]],[17,"ON_CHAIN_CONFIG_REGISTRY","","State sync will panic if the value of any config in this…",null,null],[8,"ConfigStorage","","Trait to be implemented by a storage type from which to…",null,null],[10,"fetch_config","","",58,[[["accesspath",3]],[["vec",3],["option",4]]]],[8,"OnChainConfig","","Trait to be implemented by a Rust struct representation of…",null,null],[18,"ADDRESS","","",59,null],[18,"IDENTIFIER","","",59,null],[18,"CONFIG_ID","","",59,null],[11,"deserialize_default_impl","","",59,[[],["result",6]]],[11,"deserialize_into_config","","",59,[[],["result",6]]],[11,"fetch_config","","",59,[[],["option",4]]],[11,"access_path","","",60,[[],["accesspath",3]]],[11,"new","","",61,[[["arc",3],["hashmap",3]]]],[11,"epoch","","",61,[[]]],[11,"get","","",61,[[],[["result",6],["onchainconfig",8]]]],[11,"configs","","",61,[[],["hashmap",3]]],[11,"epoch","","",62,[[]]],[11,"last_reconfiguration_time","","",62,[[]]],[11,"events","","",62,[[],["eventhandle",3]]],[11,"bump_epoch_for_test","","",62,[[]]],[0,"proof","libra_types","",null,null],[3,"MerkleTreeInternalNode","libra_types::proof","",null,null],[3,"SparseMerkleLeafNode","","",null,null],[3,"SparseMerkleLeafNodeHasher","","",null,null],[0,"accumulator","","This module implements an in-memory Merkle Accumulator…",null,null],[3,"InMemoryAccumulator","libra_types::proof::accumulator","The Accumulator implementation.",null,null],[11,"new","","Constructs a new accumulator with roots of existing frozen…",63,[[["vec",3],["leafcount",6],["hashvalue",3]],["result",6]]],[11,"from_leaves","","Constructs a new accumulator with given leaves.",63,[[]]],[11,"append","","Appends a list of new leaves to an existing accumulator.…",63,[[]]],[11,"append_subtrees","","Appends a list of new subtrees to the existing…",63,[[["leafcount",6]],["result",6]]],[11,"root_hash","","Returns the root hash of the accumulator.",63,[[],["hashvalue",3]]],[11,"version","","",63,[[]]],[11,"frozen_subtree_roots","","Returns the set of frozen subtree roots in this accumulator",63,[[],["vec",3]]],[11,"num_leaves","","Returns the total number of leaves in this accumulator.",63,[[],["leafcount",6]]],[0,"definition","libra_types::proof","This module has definition of various proofs.",null,null],[3,"AccumulatorProof","libra_types::proof::definition","A proof that can be used authenticate an element in an…",null,null],[3,"SparseMerkleProof","","A proof that can be used to authenticate an element in a…",null,null],[3,"AccumulatorConsistencyProof","","A proof that can be used to show that two Merkle…",null,null],[3,"AccumulatorRangeProof","","A proof that is similar to `AccumulatorProof`, but can be…",null,null],[3,"SparseMerkleRangeProof","","A proof that can be used authenticate a range of…",null,null],[3,"TransactionInfoWithProof","","`TransactionInfo` and a `TransactionAccumulatorProof`…",null,null],[3,"AccountStateProof","","The complete proof used to authenticate the state of an…",null,null],[3,"EventProof","","The complete proof used to authenticate a contract event.…",null,null],[3,"TransactionListProof","","The complete proof used to authenticate a list of…",null,null],[3,"AccumulatorExtensionProof","","A proof that first verifies that establishes correct…",null,null],[6,"LeafCount","","Because leaves can only take half the space in the tree,…",null,null],[6,"TransactionAccumulatorProof","","",null,null],[6,"EventAccumulatorProof","","",null,null],[6,"TestAccumulatorProof","","",null,null],[6,"TransactionAccumulatorRangeProof","","",null,null],[6,"TestAccumulatorRangeProof","","",null,null],[17,"MAX_ACCUMULATOR_PROOF_DEPTH","","",null,null],[17,"MAX_ACCUMULATOR_LEAVES","","",null,null],[11,"new","","Constructs a new `AccumulatorProof` using a list of…",64,[[["vec",3],["hashvalue",3]]]],[11,"siblings","","Returns the list of siblings in this proof.",64,[[]]],[11,"verify","","Verifies an element whose hash is `element_hash` and…",64,[[["hashvalue",3]],["result",6]]],[11,"new","","Constructs a new `SparseMerkleProof` using leaf and a list…",65,[[["sparsemerkleleafnode",3],["hashvalue",3],["vec",3],["option",4]]]],[11,"leaf","","Returns the leaf node in this proof.",65,[[],[["sparsemerkleleafnode",3],["option",4]]]],[11,"siblings","","Returns the list of siblings in this proof.",65,[[]]],[11,"verify","","If `element_blob` is present, verifies an element whose…",65,[[["accountstateblob",3],["option",4],["hashvalue",3]],["result",6]]],[11,"new","","Constructs a new `AccumulatorConsistencyProof` using given…",66,[[["vec",3],["hashvalue",3]]]],[11,"subtrees","","Returns the subtrees.",66,[[]]],[11,"new","","Constructs a new `AccumulatorRangeProof` using…",67,[[["vec",3],["hashvalue",3]]]],[11,"new_empty","","Constructs a new `AccumulatorRangeProof` for an empty list…",67,[[]]],[11,"left_siblings","","Get all the left siblngs.",67,[[],["vec",3]]],[11,"right_siblings","","Get all the right siblngs.",67,[[],["vec",3]]],[11,"verify","","Verifies the proof is correct. The verifier needs to have…",67,[[["option",4],["hashvalue",3]],["result",6]]],[11,"new","","Constructs a new `SparseMerkleRangeProof`.",68,[[["vec",3],["hashvalue",3]]]],[11,"right_siblings","","Returns the siblings.",68,[[]]],[11,"new","","Constructs a new `TransactionWithProof` object using given…",69,[[["transactionaccumulatorproof",6],["transactioninfo",3]]]],[11,"ledger_info_to_transaction_info_proof","","Returns the `ledger_info_to_transaction_info_proof` object…",69,[[],["transactionaccumulatorproof",6]]],[11,"transaction_info","","Returns the `transaction_info` object in this proof.",69,[[],["transactioninfo",3]]],[11,"verify","","Verifies that the `TransactionInfo` exists in the ledger…",69,[[["version",6],["ledgerinfo",3]],["result",6]]],[11,"new","","Constructs a new `AccountStateProof` using given…",70,[[["transactioninfowithproof",3],["sparsemerkleproof",3]]]],[11,"transaction_info_with_proof","","Returns the `transaction_info_with_proof` object in this…",70,[[],["transactioninfowithproof",3]]],[11,"transaction_info_to_account_proof","","Returns the `transaction_info_to_account_proof` object in…",70,[[],["sparsemerkleproof",3]]],[11,"verify","","Verifies that the state of an account at version…",70,[[["accountstateblob",3],["hashvalue",3],["version",6],["ledgerinfo",3],["option",4]],["result",6]]],[11,"new","","Constructs a new `EventProof` using given…",71,[[["transactioninfowithproof",3],["eventaccumulatorproof",6]]]],[11,"transaction_info_with_proof","","Returns the `transaction_info_with_proof` object in this…",71,[[],["transactioninfowithproof",3]]],[11,"transaction_info_to_event_proof","","Returns the `transaction_info_to_event_proof` object in…",71,[[],["eventaccumulatorproof",6]]],[11,"verify","","Verifies that a given event is correct using provided proof.",71,[[["hashvalue",3],["version",6],["ledgerinfo",3]],["result",6]]],[11,"new","","Constructs a new `TransactionListProof` using…",72,[[["transactionaccumulatorrangeproof",6],["transactioninfo",3],["vec",3]]]],[11,"new_empty","","Constructs a proof for an empty list of transactions.",72,[[]]],[11,"transaction_infos","","Returns the list of `TransactionInfo` objects.",72,[[]]],[11,"ledger_info_to_transaction_infos_proof","","Retursn the accumulator proof",72,[[],["transactionaccumulatorrangeproof",6]]],[11,"left_siblings","","",72,[[],["vec",3]]],[11,"verify","","Verifies the list of transactions are correct using the…",72,[[["version",6],["ledgerinfo",3],["option",4]],["result",6]]],[11,"new","","",73,[[["hashvalue",3],["vec",3],["leafcount",6]]]],[11,"verify","","",73,[[["hashvalue",3]],[["inmemoryaccumulator",3],["result",6]]]],[0,"position","libra_types::proof","This module provides an abstraction for positioning a node…",null,null],[3,"Position","libra_types::proof::position","",null,null],[3,"AncestorSiblingIterator","","`AncestorSiblingIterator` generates current sibling…",null,null],[3,"AncestorIterator","","`AncestorIterator` generates current position and moves…",null,null],[3,"FrozenSubTreeIterator","","Traverse leaves from left to right in groups that forms…",null,null],[3,"FrozenSubtreeSiblingIterator","","Given an accumulator of size `current_num_leaves`,…",null,null],[4,"NodeDirection","","",null,null],[13,"Left","","",74,null],[13,"Right","","",74,null],[5,"inorder_to_postorder","","Given `node`, an index in an in-order traversal of a…",null,[[]]],[5,"postorder_to_inorder","","",null,[[]]],[11,"level","","What level is this node in the tree, 0 if the node is a…",75,[[]]],[11,"from_level_and_pos","","pos count start from 0 on each level",75,[[]]],[11,"from_inorder_index","","",75,[[]]],[11,"to_inorder_index","","",75,[[]]],[11,"from_postorder_index","","",75,[[]]],[11,"to_postorder_index","","",75,[[]]],[11,"parent","","What is the parent of this node?",75,[[]]],[11,"left_child","","What is the left node of this node? Will overflow if the…",75,[[]]],[11,"right_child","","What is the right node of this node? Will overflow if the…",75,[[]]],[11,"is_left_child","","Whether this position is a left child of its parent. The…",75,[[]]],[11,"is_right_child","","",75,[[]]],[11,"from_leaf_index","","",75,[[]]],[11,"sibling","","This method takes in a node position and return its…",75,[[]]],[11,"root_from_leaf_index","","This method calculates the index of the smallest root…",75,[[]]],[11,"root_from_leaf_count","","",75,[[["leafcount",6]]]],[11,"root_level_from_leaf_count","","",75,[[["leafcount",6]]]],[11,"right_most_child","","Given a node, find its right most child in its subtree.…",75,[[]]],[11,"left_most_child","","Given a node, find its left most child in its subtree Left…",75,[[]]],[11,"is_freezable","","",75,[[]]],[11,"is_placeholder","","",75,[[]]],[11,"iter_ancestor","","Creates an `AncestorIterator` using this position.",75,[[],["ancestoriterator",3]]],[11,"iter_ancestor_sibling","","Creates an `AncestorSiblingIterator` using this position.",75,[[],["ancestorsiblingiterator",3]]],[11,"new","","",76,[[["leafcount",6]]]],[11,"new","","Constructs a new `FrozenSubtreeSiblingIterator` given the…",77,[[["leafcount",6]]]],[0,"proptest_proof","libra_types::proof","All proofs generated in this module are not valid proofs.…",null,null],[6,"SparseMerkleInternalNode","","",null,null],[6,"TransactionAccumulatorInternalNode","","",null,null],[6,"EventAccumulatorInternalNode","","",null,null],[6,"TestAccumulatorInternalNode","","",null,null],[11,"new","","",78,[[["hashvalue",3]]]],[11,"new","","",79,[[["hashvalue",3]]]],[11,"key","","",79,[[],["hashvalue",3]]],[11,"value_hash","","",79,[[],["hashvalue",3]]],[0,"proptest_types","libra_types","",null,null],[3,"AccountInfoUniverse","libra_types::proptest_types","",null,null],[3,"RawTransactionGen","","",null,null],[3,"SignatureCheckedTransactionGen","","",null,null],[3,"ContractEventGen","","",null,null],[3,"TransactionToCommitGen","","Represents information already determined for generating a…",null,null],[3,"LedgerInfoWithSignaturesGen","","",null,null],[11,"materialize","","",80,[[["accountinfouniverse",3],["index",3]],["rawtransaction",3]]],[11,"materialize","","",81,[[["accountinfouniverse",3],["index",3]],["signaturecheckedtransaction",3]]],[11,"materialize","","",82,[[["accountinfouniverse",3],["index",3]],["contractevent",4]]],[11,"strategy_impl","libra_types::event","",32,[[]]],[11,"strategy_impl","libra_types::contract_event","",26,[[]]],[11,"materialize","libra_types::proptest_types","Materialize considering current states in the universe.",83,[[["accountinfouniverse",3]],["transactiontocommit",3]]],[11,"materialize","","",84,[[["accountinfouniverse",3]],["ledgerinfowithsignatures",4]]],[0,"test_helpers","libra_types","",null,null],[0,"transaction_test_helpers","libra_types::test_helpers","",null,null],[5,"get_test_signed_module_publishing_transaction","libra_types::test_helpers::transaction_test_helpers","",null,[[["accountaddress",3],["ed25519privatekey",3],["ed25519publickey",3],["module",3]],["signedtransaction",3]]],[5,"get_test_signed_transaction","","",null,[[["script",3],["string",3],["option",4],["option",4],["accountaddress",3],["ed25519privatekey",3],["ed25519publickey",3]],["signedtransaction",3]]],[5,"get_test_unchecked_transaction","","",null,[[["script",3],["string",3],["option",4],["option",4],["accountaddress",3],["ed25519privatekey",3],["ed25519publickey",3]],["signedtransaction",3]]],[5,"get_test_signed_txn","","",null,[[["script",3],["option",4],["accountaddress",3],["ed25519privatekey",3],["ed25519publickey",3]],["signedtransaction",3]]],[5,"get_test_unchecked_txn","","",null,[[["script",3],["option",4],["accountaddress",3],["ed25519privatekey",3],["ed25519publickey",3]],["signedtransaction",3]]],[5,"get_write_set_txn","","",null,[[["option",4],["accountaddress",3],["ed25519privatekey",3],["ed25519publickey",3],["writeset",3]],["signaturecheckedtransaction",3]]],[0,"transaction","libra_types","",null,null],[5,"parse_transaction_argument","libra_types::transaction","",null,[[],[["result",4],["transactionargument",4],["error",3]]]],[4,"TransactionArgument","","",null,null],[13,"U8","","",85,null],[13,"U64","","",85,null],[13,"U128","","",85,null],[13,"Address","","",85,null],[13,"U8Vector","","",85,null],[13,"Bool","","",85,null],[3,"ChangeSet","","",null,null],[3,"Module","","",null,null],[3,"ArgumentABI","","The description of a (regular) argument in a script.",null,null],[3,"Script","","Call a Move script.",null,null],[3,"ScriptABI","","How to call a particular Move script (aka. an \\\"ABI\\\").",null,null],[3,"TypeArgumentABI","","The description of a type argument in a script.",null,null],[3,"RawTransaction","","RawTransaction is the portion of a transaction that a…",null,null],[3,"RawTransactionHasher","","",null,null],[3,"SignedTransaction","","A transaction that has been signed.",null,null],[3,"SignatureCheckedTransaction","","A transaction for which the signature has been verified.…",null,null],[3,"TransactionWithProof","","",null,null],[12,"version","","",86,null],[12,"transaction","","",86,null],[12,"events","","",86,null],[12,"proof","","",86,null],[3,"VMValidatorResult","","The result of running the transaction through the VM…",null,null],[3,"TransactionOutput","","The output of executing a transaction.",null,null],[3,"TransactionInfo","","`TransactionInfo` is the object we store in the…",null,null],[3,"TransactionInfoHasher","","",null,null],[3,"TransactionToCommit","","",null,null],[3,"TransactionListWithProof","","The list may have three states: 1. The list is empty. Both…",null,null],[12,"transactions","","",87,null],[12,"events","","",87,null],[12,"first_transaction_version","","",87,null],[12,"proof","","",87,null],[3,"TransactionHasher","","",null,null],[4,"TransactionPayload","","",null,null],[13,"WriteSet","","",88,null],[13,"Script","","A transaction that executes code.",88,null],[13,"Module","","A transaction that publishes code.",88,null],[4,"TransactionStatus","","The status of executing a transaction. The VM decides…",null,null],[13,"Discard","","Discard the transaction output",89,null],[13,"Keep","","Keep the transaction output",89,null],[13,"Retry","","Retry the transaction because it is after a…",89,null],[4,"Transaction","","`Transaction` will be the transaction type used internally…",null,null],[13,"UserTransaction","","Transaction submitted by the user. e.g: P2P payment…",90,null],[13,"WaypointWriteSet","","Transaction that applies a WriteSet to the current…",90,null],[13,"BlockMetadata","","Transaction to update the block metadata resource at the…",90,null],[0,"authenticator","","",null,null],[3,"AuthenticationKey","libra_types::transaction::authenticator","A struct that represents an account authentication key. An…",null,null],[3,"AuthenticationKeyHasher","","",null,null],[3,"AuthenticationKeyPreimage","","A value that can be hashed to produce an authentication key",null,null],[4,"Scheme","","A `TransactionAuthenticator` is an an abstraction of a…",null,null],[13,"Ed25519","","",91,null],[13,"MultiEd25519","","",91,null],[4,"TransactionAuthenticator","","",null,null],[13,"Ed25519","","Single signature",92,null],[12,"public_key","libra_types::transaction::authenticator::TransactionAuthenticator","",93,null],[12,"signature","","",93,null],[13,"MultiEd25519","libra_types::transaction::authenticator","K-of-N multisignature",92,null],[12,"public_key","libra_types::transaction::authenticator::TransactionAuthenticator","",94,null],[12,"signature","","",94,null],[11,"scheme","libra_types::transaction::authenticator","Unique identifier for the signature scheme",92,[[],["scheme",4]]],[11,"ed25519","","Create a single-signature ed25519 authenticator",92,[[["ed25519publickey",3],["ed25519signature",3]]]],[11,"multi_ed25519","","Create a multisignature ed25519 authenticator",92,[[["multied25519publickey",3],["multied25519signature",3]]]],[11,"verify_signature","","Return Ok if the authenticator\'s public key matches its…",92,[[["hashvalue",3]],["result",6]]],[11,"public_key_bytes","","Return the raw bytes of `self.public_key`",92,[[],["vec",3]]],[11,"signature_bytes","","Return the raw bytes of `self.signature`",92,[[],["vec",3]]],[11,"authentication_key_preimage","","Return an authentication key preimage derived from…",92,[[],["authenticationkeypreimage",3]]],[11,"authentication_key","","Return an authentication key derived from `self`\'s public…",92,[[],["authenticationkey",3]]],[11,"new","","Create an authentication key from `bytes`",95,[[]]],[18,"LENGTH","","The number of bytes in an authentication key.",95,null],[11,"from_preimage","","Create an authentication key from a preimage by taking its…",95,[[["authenticationkeypreimage",3]],["authenticationkey",3]]],[11,"ed25519","","Create an authentication key from an Ed25519 public key",95,[[["ed25519publickey",3]],["authenticationkey",3]]],[11,"multi_ed25519","","Create an authentication key from a MultiEd25519 public key",95,[[["multied25519publickey",3]]]],[11,"derived_address","","Return an address derived from the last…",95,[[],["accountaddress",3]]],[11,"prefix","","Return the first AccountAddress::LENGTH bytes of this…",95,[[]]],[11,"to_vec","","Construct a vector from this authentication key",95,[[],["vec",3]]],[11,"random","","Create a random authentication key. For testing only",95,[[]]],[11,"ed25519","","Construct a preimage from an Ed25519 public key",96,[[["ed25519publickey",3]],["authenticationkeypreimage",3]]],[11,"multi_ed25519","","Construct a preimage from a MultiEd25519 public key",96,[[["multied25519publickey",3]],["authenticationkeypreimage",3]]],[11,"into_vec","","Construct a vector from this authentication key",96,[[],["vec",3]]],[11,"new","libra_types::transaction","",97,[[["writeset",3],["vec",3],["contractevent",4]]]],[11,"into_inner","","",97,[[]]],[11,"write_set","","",97,[[],["writeset",3]]],[11,"events","","",97,[[]]],[0,"helpers","","",null,null],[5,"create_unsigned_txn","libra_types::transaction::helpers","",null,[[["accountaddress",3],["transactionpayload",4],["string",3]],["rawtransaction",3]]],[5,"create_user_txn","","Craft a transaction request.",null,[[["accountaddress",3],["transactionpayload",4],["string",3]],[["signedtransaction",3],["result",6]]]],[8,"TransactionSigner","","",null,null],[10,"sign_txn","","",98,[[["rawtransaction",3]],[["signedtransaction",3],["result",6]]]],[11,"new","libra_types::transaction","",99,[[["vec",3]],["module",3]]],[11,"code","","",99,[[]]],[11,"new","","",100,[[["vec",3],["transactionargument",4],["typetag",4],["vec",3],["vec",3]]]],[11,"code","","",100,[[]]],[11,"ty_args","","",100,[[]]],[11,"args","","",100,[[]]],[11,"into_inner","","",100,[[]]],[11,"new","","",101,[[["string",3],["vec",3],["typeargumentabi",3],["vec",3],["argumentabi",3],["vec",3]]]],[11,"name","","",101,[[]]],[11,"doc","","",101,[[]]],[11,"code","","",101,[[]]],[11,"ty_args","","",101,[[]]],[11,"args","","",101,[[]]],[11,"new","","",102,[[["string",3],["typetag",4]]]],[11,"name","","",102,[[]]],[11,"type_tag","","",102,[[],["typetag",4]]],[11,"new","","",103,[[["string",3]]]],[11,"name","","",103,[[]]],[6,"Version","","",null,null],[17,"SCRIPT_HASH_LENGTH","","",null,null],[17,"PRE_GENESIS_VERSION","","",null,null],[17,"MAX_TRANSACTION_SIZE_IN_BYTES","","",null,null],[11,"new","","Create a new `RawTransaction` with a payload.",104,[[["string",3],["duration",3],["accountaddress",3],["transactionpayload",4]]]],[11,"new_script","","Create a new `RawTransaction` with a script.",104,[[["script",3],["string",3],["duration",3],["accountaddress",3]]]],[11,"new_module","","Create a new `RawTransaction` with a module to publish.",104,[[["string",3],["duration",3],["accountaddress",3],["module",3]]]],[11,"new_write_set","","",104,[[["accountaddress",3],["writeset",3]]]],[11,"new_change_set","","",104,[[["accountaddress",3],["changeset",3]]]],[11,"sign","","Signs the given `RawTransaction`. Note that this consumes…",104,[[["ed25519privatekey",3],["ed25519publickey",3]],[["result",6],["signaturecheckedtransaction",3]]]],[11,"multi_sign_for_testing","","",104,[[["ed25519privatekey",3],["ed25519publickey",3]],[["result",6],["signaturecheckedtransaction",3]]]],[11,"into_payload","","",104,[[],["transactionpayload",4]]],[11,"format_for_client","","",104,[[],["string",3]]],[11,"sender","","Return the sender of this transaction.",104,[[],["accountaddress",3]]],[11,"into_inner","","Returns the `SignedTransaction` within.",105,[[],["signedtransaction",3]]],[11,"into_raw_transaction","","Returns the `RawTransaction` within.",105,[[],["rawtransaction",3]]],[11,"new","","",106,[[["ed25519publickey",3],["rawtransaction",3],["ed25519signature",3]],["signedtransaction",3]]],[11,"new_multisig","","",106,[[["multied25519publickey",3],["rawtransaction",3],["multied25519signature",3]],["signedtransaction",3]]],[11,"authenticator","","",106,[[],["transactionauthenticator",4]]],[11,"sender","","",106,[[],["accountaddress",3]]],[11,"into_raw_transaction","","",106,[[],["rawtransaction",3]]],[11,"sequence_number","","",106,[[]]],[11,"payload","","",106,[[],["transactionpayload",4]]],[11,"max_gas_amount","","",106,[[]]],[11,"gas_unit_price","","",106,[[]]],[11,"gas_currency_code","","",106,[[]]],[11,"expiration_time","","",106,[[],["duration",3]]],[11,"raw_txn_bytes_len","","",106,[[]]],[11,"check_signature","","Checks that the signature of given transaction. Returns…",106,[[],[["result",6],["signaturecheckedtransaction",3]]]],[11,"format_for_client","","",106,[[],["string",3]]],[11,"new","","",86,[[["transaction",4],["vec",3],["version",6],["option",4],["transactioninfowithproof",3]]]],[11,"verify_user_txn","","Verifies the transaction with the proof, both carried by…",86,[[["version",6],["ledgerinfo",3],["accountaddress",3]],["result",6]]],[11,"vm_status","","",89,[[],["vmstatus",3]]],[11,"is_discarded","","",89,[[]]],[11,"new","","",107,[[["option",4],["vmstatus",3]]]],[11,"status","","",107,[[],[["vmstatus",3],["option",4]]]],[11,"score","","",107,[[]]],[11,"is_governance_txn","","",107,[[]]],[11,"new","","",108,[[["vec",3],["writeset",3],["contractevent",4],["transactionstatus",4]]]],[11,"write_set","","",108,[[],["writeset",3]]],[11,"events","","",108,[[]]],[11,"gas_used","","",108,[[]]],[11,"status","","",108,[[],["transactionstatus",4]]],[11,"new","","Constructs a new `TransactionInfo` object using…",109,[[["statuscode",4],["hashvalue",3]],["transactioninfo",3]]],[11,"transaction_hash","","Returns the hash of this transaction.",109,[[],["hashvalue",3]]],[11,"state_root_hash","","Returns root hash of Sparse Merkle Tree describing the…",109,[[],["hashvalue",3]]],[11,"event_root_hash","","Returns the root hash of Merkle Accumulator storing all…",109,[[],["hashvalue",3]]],[11,"gas_used","","Returns the amount of gas used by this transaction.",109,[[]]],[11,"major_status","","",109,[[],["statuscode",4]]],[11,"new","","",110,[[["statuscode",4],["transaction",4],["vec",3],["accountaddress",3],["accountstateblob",3],["hashmap",3],["contractevent",4]]]],[11,"transaction","","",110,[[],["transaction",4]]],[11,"account_states","","",110,[[],["hashmap",3]]],[11,"events","","",110,[[]]],[11,"gas_used","","",110,[[]]],[11,"major_status","","",110,[[],["statuscode",4]]],[11,"new","","Constructor.",87,[[["vec",3],["transactionlistproof",3],["transaction",4],["vec",3],["option",4],["version",6],["option",4]]]],[11,"new_empty","","Creates an empty transaction list.",87,[[]]],[11,"verify","","Verifies the transaction list with the proofs, both…",87,[[["version",6],["ledgerinfo",3],["option",4]],["result",6]]],[11,"is_empty","","",87,[[]]],[11,"len","","",87,[[]]],[11,"as_signed_user_txn","","",90,[[],[["result",6],["signedtransaction",3]]]],[11,"format_for_client","","",90,[[],["string",3]]],[0,"trusted_state","libra_types","",null,null],[3,"TrustedState","libra_types::trusted_state","`TrustedState` keeps track of our latest trusted state,…",null,null],[4,"TrustedStateChange","","`TrustedStateChange` is the result of attempting to…",null,null],[13,"Version","","We have a newer `TrustedState` but it\'s still in the same…",111,null],[12,"new_state","libra_types::trusted_state::TrustedStateChange","",112,null],[13,"Epoch","libra_types::trusted_state","We have a newer `TrustedState` and there was at least one…",111,null],[12,"new_state","libra_types::trusted_state::TrustedStateChange","",113,null],[12,"latest_epoch_change_li","","",113,null],[13,"NoChange","libra_types::trusted_state","The latest ledger info is at the same version as the…",111,null],[11,"verify_and_ratchet","","Verify and ratchet forward our trusted state using a…",114,[[["epochchangeproof",3],["ledgerinfowithsignatures",4]],[["result",6],["trustedstatechange",4]]]],[11,"latest_version","","",114,[[],["version",6]]],[0,"validator_config","libra_types","",null,null],[3,"ValidatorConfigResource","libra_types::validator_config","",null,null],[12,"validator_config","","",115,null],[12,"delegated_account","","",115,null],[12,"is_certified","","",115,null],[3,"ValidatorConfig","","",null,null],[12,"consensus_public_key","","",116,null],[12,"validator_network_identity_public_key","","",116,null],[12,"validator_network_address","","",116,null],[12,"full_node_network_identity_public_key","","",116,null],[12,"full_node_network_address","","",116,null],[11,"new","","",116,[[["rawnetworkaddress",3],["ed25519publickey",3],["publickey",3]]]],[0,"validator_info","libra_types","",null,null],[3,"ValidatorInfo","libra_types::validator_info","After executing a special transaction indicates a change…",null,null],[11,"new","","",117,[[["accountaddress",3],["validatorconfig",3]]]],[11,"new_with_test_network_keys","","",117,[[["accountaddress",3],["ed25519publickey",3]]]],[11,"account_address","","Returns the id of this validator (hash of the current…",117,[[],["accountaddress",3]]],[11,"consensus_public_key","","Returns the key for validating signed messages from this…",117,[[],["ed25519publickey",3]]],[11,"consensus_voting_power","","Returns the voting power for this validator",117,[[]]],[11,"network_identity_public_key","","Returns the key that establishes a validator\'s identity in…",117,[[],["publickey",3]]],[11,"config","","Returns the validator\'s config",117,[[],["validatorconfig",3]]],[0,"validator_signer","libra_types","",null,null],[3,"ValidatorSigner","libra_types::validator_signer","ValidatorSigner associates an author with public and…",null,null],[0,"proptests","","",null,null],[5,"arb_signing_key","libra_types::validator_signer::proptests","",null,[[]]],[5,"signer_strategy","","",null,[[]]],[5,"rand_signer","","",null,[[]]],[5,"arb_signer","","",null,[[]]],[5,"mostly_in_keypair_pool","","",null,[[["vec",3],["ed25519privatekey",3]]]],[11,"new","libra_types::validator_signer","",118,[[["accountaddress",3],["ed25519privatekey",3]]]],[11,"sign_message","","Constructs a signature for `message` using `private_key`.",118,[[["hashvalue",3]],["ed25519signature",3]]],[11,"author","","Returns the author associated with this signer.",118,[[],["accountaddress",3]]],[11,"public_key","","Returns the public key associated with this signer.",118,[[],["ed25519publickey",3]]],[11,"private_key","","Returns the private key associated with this signer. Only…",118,[[],["ed25519privatekey",3]]],[11,"random","","Generate a random set of public and private keys and…",118,[[]]],[11,"from_int","","For test only - makes signer with nicely looking account…",118,[[]]],[0,"validator_verifier","libra_types","",null,null],[3,"ValidatorConsensusInfo","libra_types::validator_verifier","Helper struct to manage validator information for validation",null,null],[3,"ValidatorVerifier","","Supports validation of signatures for known authors with…",null,null],[4,"VerifyError","","Errors possible during signature verification.",null,null],[13,"UnknownAuthor","","The author for this signature is unknown by this validator.",119,null],[13,"TooLittleVotingPower","","",119,null],[12,"voting_power","libra_types::validator_verifier::VerifyError","",120,null],[12,"quorum_voting_power","","",120,null],[13,"TooManySignatures","libra_types::validator_verifier","",119,null],[12,"num_of_signatures","libra_types::validator_verifier::VerifyError","",121,null],[12,"num_of_authors","","",121,null],[13,"InvalidSignature","libra_types::validator_verifier","The signature does not match the hash.",119,null],[5,"random_validator_verifier","","Helper function to get random validator signers and a…",null,[[["option",4]]]],[11,"new","","",122,[[["ed25519publickey",3]]]],[11,"voting_power","","",122,[[]]],[11,"new","","Initialize with a map of account address to validator info…",123,[[["accountaddress",3],["btreemap",3],["validatorconsensusinfo",3]]]],[11,"new_with_quorum_voting_power","","Initializes a validator verifier with a specified quorum…",123,[[["accountaddress",3],["btreemap",3],["validatorconsensusinfo",3]],["result",6]]],[11,"new_single","","Helper method to initialize with a single author and…",123,[[["accountaddress",3],["ed25519publickey",3]]]],[11,"verify_signature","","Verify the correctness of a signature of a hash by a known…",123,[[["accountaddress",3],["ed25519signature",3],["hashvalue",3]],[["verifyerror",4],["result",4]]]],[11,"verify_aggregated_signature","","This function will successfully return when at least…",123,[[["btreemap",3],["hashvalue",3]],[["verifyerror",4],["result",4]]]],[11,"batch_verify_aggregated_signature","","This function will try batch signature verification and…",123,[[["btreemap",3],["hashvalue",3]],[["verifyerror",4],["result",4]]]],[11,"check_voting_power","","Ensure there is at least quorum_voting_power in the…",123,[[],[["verifyerror",4],["result",4]]]],[11,"get_public_key","","Returns the public key for this address.",123,[[["accountaddress",3]],[["ed25519publickey",3],["option",4]]]],[11,"get_voting_power","","Returns the voting power for this address.",123,[[["accountaddress",3]],["option",4]]],[11,"get_ordered_account_addresses_iter","","Returns an ordered list of account addresses as an…",123,[[]]],[11,"len","","Returns the number of authors to be validated.",123,[[]]],[11,"is_empty","","Is there at least one author?",123,[[]]],[11,"quorum_voting_power","","Returns quorum voting power.",123,[[]]],[0,"vm_error","libra_types","",null,null],[3,"VMStatus","libra_types::vm_error","A `VMStatus` is represented as a required major status…",null,null],[12,"major_status","","The major status, e.g. ABORTED, OUT_OF_GAS, etc.",124,null],[12,"sub_status","","The optional sub status. Used e.g. for things such as the…",124,null],[12,"message","","The optional message. Useful for verification errors, and…",124,null],[4,"StatusType","","A status type is one of 5 different variants, along with a…",null,null],[13,"Validation","","",125,null],[13,"Verification","","",125,null],[13,"InvariantViolation","","",125,null],[13,"Deserialization","","",125,null],[13,"Execution","","",125,null],[13,"Unknown","","",125,null],[4,"StatusCode","","We don\'t derive Arbitrary on this enum because it is too…",null,null],[13,"UNKNOWN_VALIDATION_STATUS","","",126,null],[13,"INVALID_SIGNATURE","","",126,null],[13,"INVALID_AUTH_KEY","","",126,null],[13,"SEQUENCE_NUMBER_TOO_OLD","","",126,null],[13,"SEQUENCE_NUMBER_TOO_NEW","","",126,null],[13,"INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE","","",126,null],[13,"TRANSACTION_EXPIRED","","",126,null],[13,"SENDING_ACCOUNT_DOES_NOT_EXIST","","",126,null],[13,"REJECTED_WRITE_SET","","",126,null],[13,"INVALID_WRITE_SET","","",126,null],[13,"EXCEEDED_MAX_TRANSACTION_SIZE","","",126,null],[13,"UNKNOWN_SCRIPT","","",126,null],[13,"UNKNOWN_MODULE","","",126,null],[13,"MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND","","",126,null],[13,"MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS","","",126,null],[13,"GAS_UNIT_PRICE_BELOW_MIN_BOUND","","",126,null],[13,"GAS_UNIT_PRICE_ABOVE_MAX_BOUND","","",126,null],[13,"INVALID_GAS_SPECIFIER","","",126,null],[13,"SENDING_ACCOUNT_FROZEN","","",126,null],[13,"UNABLE_TO_DESERIALIZE_ACCOUNT","","",126,null],[13,"CURRENCY_INFO_DOES_NOT_EXIST","","",126,null],[13,"INVALID_MODULE_PUBLISHER","","",126,null],[13,"UNKNOWN_VERIFICATION_ERROR","","",126,null],[13,"INDEX_OUT_OF_BOUNDS","","",126,null],[13,"RANGE_OUT_OF_BOUNDS","","",126,null],[13,"INVALID_SIGNATURE_TOKEN","","",126,null],[13,"INVALID_FIELD_DEF","","",126,null],[13,"RECURSIVE_STRUCT_DEFINITION","","",126,null],[13,"INVALID_RESOURCE_FIELD","","",126,null],[13,"INVALID_FALL_THROUGH","","",126,null],[13,"JOIN_FAILURE","","",126,null],[13,"NEGATIVE_STACK_SIZE_WITHIN_BLOCK","","",126,null],[13,"UNBALANCED_STACK","","",126,null],[13,"INVALID_MAIN_FUNCTION_SIGNATURE","","",126,null],[13,"DUPLICATE_ELEMENT","","",126,null],[13,"INVALID_MODULE_HANDLE","","",126,null],[13,"UNIMPLEMENTED_HANDLE","","",126,null],[13,"INCONSISTENT_FIELDS","","",126,null],[13,"UNUSED_FIELD","","",126,null],[13,"LOOKUP_FAILED","","",126,null],[13,"VISIBILITY_MISMATCH","","",126,null],[13,"TYPE_RESOLUTION_FAILURE","","",126,null],[13,"TYPE_MISMATCH","","",126,null],[13,"MISSING_DEPENDENCY","","",126,null],[13,"POP_REFERENCE_ERROR","","",126,null],[13,"POP_RESOURCE_ERROR","","",126,null],[13,"RELEASEREF_TYPE_MISMATCH_ERROR","","",126,null],[13,"BR_TYPE_MISMATCH_ERROR","","",126,null],[13,"ABORT_TYPE_MISMATCH_ERROR","","",126,null],[13,"STLOC_TYPE_MISMATCH_ERROR","","",126,null],[13,"STLOC_UNSAFE_TO_DESTROY_ERROR","","",126,null],[13,"UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED","","",126,null],[13,"RET_TYPE_MISMATCH_ERROR","","",126,null],[13,"RET_BORROWED_MUTABLE_REFERENCE_ERROR","","",126,null],[13,"FREEZEREF_TYPE_MISMATCH_ERROR","","",126,null],[13,"FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR","","",126,null],[13,"BORROWFIELD_TYPE_MISMATCH_ERROR","","",126,null],[13,"BORROWFIELD_BAD_FIELD_ERROR","","",126,null],[13,"BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR","","",126,null],[13,"COPYLOC_UNAVAILABLE_ERROR","","",126,null],[13,"COPYLOC_RESOURCE_ERROR","","",126,null],[13,"COPYLOC_EXISTS_BORROW_ERROR","","",126,null],[13,"MOVELOC_UNAVAILABLE_ERROR","","",126,null],[13,"MOVELOC_EXISTS_BORROW_ERROR","","",126,null],[13,"BORROWLOC_REFERENCE_ERROR","","",126,null],[13,"BORROWLOC_UNAVAILABLE_ERROR","","",126,null],[13,"BORROWLOC_EXISTS_BORROW_ERROR","","",126,null],[13,"CALL_TYPE_MISMATCH_ERROR","","",126,null],[13,"CALL_BORROWED_MUTABLE_REFERENCE_ERROR","","",126,null],[13,"PACK_TYPE_MISMATCH_ERROR","","",126,null],[13,"UNPACK_TYPE_MISMATCH_ERROR","","",126,null],[13,"READREF_TYPE_MISMATCH_ERROR","","",126,null],[13,"READREF_RESOURCE_ERROR","","",126,null],[13,"READREF_EXISTS_MUTABLE_BORROW_ERROR","","",126,null],[13,"WRITEREF_TYPE_MISMATCH_ERROR","","",126,null],[13,"WRITEREF_RESOURCE_ERROR","","",126,null],[13,"WRITEREF_EXISTS_BORROW_ERROR","","",126,null],[13,"WRITEREF_NO_MUTABLE_REFERENCE_ERROR","","",126,null],[13,"INTEGER_OP_TYPE_MISMATCH_ERROR","","",126,null],[13,"BOOLEAN_OP_TYPE_MISMATCH_ERROR","","",126,null],[13,"EQUALITY_OP_TYPE_MISMATCH_ERROR","","",126,null],[13,"EXISTS_RESOURCE_TYPE_MISMATCH_ERROR","","",126,null],[13,"BORROWGLOBAL_TYPE_MISMATCH_ERROR","","",126,null],[13,"BORROWGLOBAL_NO_RESOURCE_ERROR","","",126,null],[13,"MOVEFROM_TYPE_MISMATCH_ERROR","","",126,null],[13,"MOVEFROM_NO_RESOURCE_ERROR","","",126,null],[13,"MOVETOSENDER_TYPE_MISMATCH_ERROR","","",126,null],[13,"MOVETOSENDER_NO_RESOURCE_ERROR","","",126,null],[13,"CREATEACCOUNT_TYPE_MISMATCH_ERROR","","",126,null],[13,"MODULE_ADDRESS_DOES_NOT_MATCH_SENDER","","",126,null],[13,"NO_MODULE_HANDLES","","",126,null],[13,"POSITIVE_STACK_SIZE_AT_BLOCK_END","","",126,null],[13,"MISSING_ACQUIRES_RESOURCE_ANNOTATION_ERROR","","",126,null],[13,"EXTRANEOUS_ACQUIRES_RESOURCE_ANNOTATION_ERROR","","",126,null],[13,"DUPLICATE_ACQUIRES_RESOURCE_ANNOTATION_ERROR","","",126,null],[13,"INVALID_ACQUIRES_RESOURCE_ANNOTATION_ERROR","","",126,null],[13,"GLOBAL_REFERENCE_ERROR","","",126,null],[13,"CONTRAINT_KIND_MISMATCH","","",126,null],[13,"NUMBER_OF_TYPE_ARGUMENTS_MISMATCH","","",126,null],[13,"LOOP_IN_INSTANTIATION_GRAPH","","",126,null],[13,"UNUSED_LOCALS_SIGNATURE","","",126,null],[13,"UNUSED_TYPE_SIGNATURE","","",126,null],[13,"ZERO_SIZED_STRUCT","","Reported when a struct has zero fields",126,null],[13,"LINKER_ERROR","","",126,null],[13,"INVALID_CONSTANT_TYPE","","",126,null],[13,"MALFORMED_CONSTANT_DATA","","",126,null],[13,"EMPTY_CODE_UNIT","","",126,null],[13,"INVALID_LOOP_SPLIT","","",126,null],[13,"INVALID_LOOP_BREAK","","",126,null],[13,"INVALID_LOOP_CONTINUE","","",126,null],[13,"UNSAFE_RET_UNUSED_RESOURCES","","",126,null],[13,"TOO_MANY_LOCALS","","",126,null],[13,"MOVETO_TYPE_MISMATCH_ERROR","","",126,null],[13,"MOVETO_NO_RESOURCE_ERROR","","",126,null],[13,"GENERIC_MEMBER_OPCODE_MISMATCH","","",126,null],[13,"UNKNOWN_INVARIANT_VIOLATION_ERROR","","",126,null],[13,"OUT_OF_BOUNDS_INDEX","","",126,null],[13,"OUT_OF_BOUNDS_RANGE","","",126,null],[13,"EMPTY_VALUE_STACK","","",126,null],[13,"EMPTY_CALL_STACK","","",126,null],[13,"PC_OVERFLOW","","",126,null],[13,"VERIFICATION_ERROR","","",126,null],[13,"LOCAL_REFERENCE_ERROR","","",126,null],[13,"STORAGE_ERROR","","",126,null],[13,"INTERNAL_TYPE_ERROR","","",126,null],[13,"EVENT_KEY_MISMATCH","","",126,null],[13,"UNREACHABLE","","",126,null],[13,"VM_STARTUP_FAILURE","","",126,null],[13,"NATIVE_FUNCTION_INTERNAL_INCONSISTENCY","","",126,null],[13,"INVALID_CODE_CACHE","","",126,null],[13,"UNKNOWN_BINARY_ERROR","","",126,null],[13,"MALFORMED","","",126,null],[13,"BAD_MAGIC","","",126,null],[13,"UNKNOWN_VERSION","","",126,null],[13,"UNKNOWN_TABLE_TYPE","","",126,null],[13,"UNKNOWN_SIGNATURE_TYPE","","",126,null],[13,"UNKNOWN_SERIALIZED_TYPE","","",126,null],[13,"UNKNOWN_OPCODE","","",126,null],[13,"BAD_HEADER_TABLE","","",126,null],[13,"UNEXPECTED_SIGNATURE_TYPE","","",126,null],[13,"DUPLICATE_TABLE","","",126,null],[13,"VERIFIER_INVARIANT_VIOLATION","","",126,null],[13,"UNKNOWN_NOMINAL_RESOURCE","","",126,null],[13,"UNKNOWN_KIND","","",126,null],[13,"UNKNOWN_NATIVE_STRUCT_FLAG","","",126,null],[13,"BAD_ULEB_U16","","",126,null],[13,"BAD_ULEB_U32","","",126,null],[13,"BAD_U16","","",126,null],[13,"BAD_U32","","",126,null],[13,"BAD_U64","","",126,null],[13,"BAD_U128","","",126,null],[13,"BAD_ULEB_U8","","",126,null],[13,"UNKNOWN_RUNTIME_STATUS","","",126,null],[13,"EXECUTED","","",126,null],[13,"OUT_OF_GAS","","",126,null],[13,"RESOURCE_DOES_NOT_EXIST","","",126,null],[13,"RESOURCE_ALREADY_EXISTS","","",126,null],[13,"EVICTED_ACCOUNT_ACCESS","","",126,null],[13,"ACCOUNT_ADDRESS_ALREADY_EXISTS","","",126,null],[13,"TYPE_ERROR","","",126,null],[13,"MISSING_DATA","","",126,null],[13,"DATA_FORMAT_ERROR","","",126,null],[13,"INVALID_DATA","","",126,null],[13,"REMOTE_DATA_ERROR","","",126,null],[13,"CANNOT_WRITE_EXISTING_RESOURCE","","",126,null],[13,"VALUE_SERIALIZATION_ERROR","","",126,null],[13,"VALUE_DESERIALIZATION_ERROR","","",126,null],[13,"DUPLICATE_MODULE_NAME","","",126,null],[13,"ABORTED","","",126,null],[13,"ARITHMETIC_ERROR","","",126,null],[13,"DYNAMIC_REFERENCE_ERROR","","",126,null],[13,"CODE_DESERIALIZATION_ERROR","","",126,null],[13,"EXECUTION_STACK_OVERFLOW","","",126,null],[13,"CALL_STACK_OVERFLOW","","",126,null],[13,"NATIVE_FUNCTION_ERROR","","",126,null],[13,"GAS_SCHEDULE_ERROR","","",126,null],[13,"UNKNOWN_STATUS","","",126,null],[0,"sub_status","","",null,null],[17,"AEU_UNKNOWN_ARITHMETIC_ERROR","libra_types::vm_error::sub_status","",null,null],[17,"AEU_UNDERFLOW","","",null,null],[17,"AEO_OVERFLOW","","",null,null],[17,"AED_DIVISION_BY_ZERO","","",null,null],[17,"VSF_GAS_SCHEDULE_NOT_FOUND","","",null,null],[17,"VSF_LIBRA_VERSION_NOT_FOUND","","",null,null],[17,"DRE_UNKNOWN_DYNAMIC_REFERENCE_ERROR","","",null,null],[17,"DRE_MOVE_OF_BORROWED_RESOURCE","","",null,null],[17,"DRE_GLOBAL_REF_ALREADY_RELEASED","","",null,null],[17,"DRE_MISSING_RELEASEREF","","",null,null],[17,"DRE_GLOBAL_ALREADY_BORROWED","","",null,null],[17,"NFE_VECTOR_ERROR_BASE","","",null,null],[17,"NFE_LCS_SERIALIZATION_FAILURE","","",null,null],[17,"GSE_UNABLE_TO_LOAD_MODULE","","",null,null],[17,"GSE_UNABLE_TO_LOAD_RESOURCE","","",null,null],[17,"GSE_UNABLE_TO_DESERIALIZE","","",null,null],[7,"VALIDATION_STATUS_MIN_CODE","libra_types::vm_error","The minimum status code for validation statuses",null,null],[7,"VALIDATION_STATUS_MAX_CODE","","The maximum status code for validation statuses",null,null],[7,"VERIFICATION_STATUS_MIN_CODE","","The minimum status code for verification statuses",null,null],[7,"VERIFICATION_STATUS_MAX_CODE","","The maximum status code for verification statuses",null,null],[7,"INVARIANT_VIOLATION_STATUS_MIN_CODE","","The minimum status code for invariant violation statuses",null,null],[7,"INVARIANT_VIOLATION_STATUS_MAX_CODE","","The maximum status code for invariant violation statuses",null,null],[7,"DESERIALIZATION_STATUS_MIN_CODE","","The minimum status code for deserialization statuses",null,null],[7,"DESERIALIZATION_STATUS_MAX_CODE","","The maximum status code for deserialization statuses",null,null],[7,"EXECUTION_STATUS_MIN_CODE","","The minimum status code for runtime statuses",null,null],[7,"EXECUTION_STATUS_MAX_CODE","","The maximum status code for runtim statuses",null,null],[11,"new","","Create a new VM status with major status `major_status`.",124,[[["statuscode",4]]]],[11,"with_sub_status","","Adds a sub status to the VM status.",124,[[]]],[11,"with_message","","Adds a message to the VM status.",124,[[["string",3]]]],[11,"set_sub_status","","Mutates the VMStatus sub status field to be the new…",124,[[]]],[11,"set_message","","Mutates the VMStatus message field to be the new `message`…",124,[[["string",3]]]],[11,"append_message_with_separator","","Append the message `message` to the message field of the…",124,[[["string",3]]]],[11,"status_type","","Return the status type for this VMStatus. This is solely…",124,[[],["statustype",4]]],[11,"is","","Determine if the VMStatus has status type `status_type`.",124,[[["statustype",4]]]],[11,"append","","Append two VMStatuses together. The major status is kept…",124,[[]]],[0,"waypoint","libra_types","",null,null],[3,"Waypoint","libra_types::waypoint","Waypoint keeps information about the LedgerInfo on a given…",null,null],[3,"Ledger2WaypointConverterHasher","","",null,null],[11,"new_any","","Generate a new waypoint given any LedgerInfo.",127,[[["ledgerinfo",3]]]],[11,"new_epoch_boundary","","Generates a new waypoint given the epoch change LedgerInfo.",127,[[["ledgerinfo",3]],["result",6]]],[11,"version","","",127,[[],["version",6]]],[11,"value","","",127,[[],["hashvalue",3]]],[11,"verify","","Errors in case the given ledger info does not match the…",127,[[["ledgerinfo",3]],["result",6]]],[0,"write_set","libra_types","For each transaction the VM executes, the VM will output a…",null,null],[3,"WriteSet","libra_types::write_set","`WriteSet` contains all access paths that one transaction…",null,null],[3,"WriteSetMut","","A mutable version of `WriteSet`.",null,null],[4,"WriteOp","","",null,null],[13,"Deletion","","",128,null],[13,"Value","","",128,null],[11,"is_deletion","","",128,[[]]],[11,"is_empty","","",129,[[]]],[11,"iter","","",129,[[],["iter",3]]],[11,"into_mut","","",129,[[],["writesetmut",3]]],[11,"new","","",130,[[["vec",3]]]],[11,"push","","",130,[[]]],[11,"is_empty","","",130,[[]]],[11,"freeze","","",130,[[],[["writeset",3],["result",6]]]],[11,"from","libra_types::account_address","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"to_string","","",131,[[],["string",3]]],[11,"borrow","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"test_only_hash","","",131,[[],["hashvalue",3]]],[11,"vzip","","",131,[[]]],[11,"clear","","",131,[[]]],[11,"initialize","","",131,[[]]],[11,"encode_hex","","",131,[[]]],[11,"encode_hex_upper","","",131,[[]]],[11,"from","libra_types::access_path","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","libra_types::account_config::events::burn","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"from","libra_types::account_config::events::cancel_burn","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"from","libra_types::account_config::events::mint","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","libra_types::account_config::events::new_block","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","libra_types::account_config::events::new_epoch","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","libra_types::account_config::events::preburn","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","libra_types::account_config::events::received_payment","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","libra_types::account_config::events::sent_payment","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"vzip","","",8,[[]]],[11,"from","libra_types::account_config::events::upgrade","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"from","libra_types::account_config::resources::account","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"from","libra_types::account_config::resources::association_capability","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"test_only_hash","","",11,[[],["hashvalue",3]]],[11,"vzip","","",11,[[]]],[11,"from","libra_types::account_config::resources::balance","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"test_only_hash","","",12,[[],["hashvalue",3]]],[11,"vzip","","",12,[[]]],[11,"from","libra_types::account_config::resources::currency_info","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"test_only_hash","","",13,[[],["hashvalue",3]]],[11,"vzip","","",13,[[]]],[11,"from","libra_types::account_config::resources::key_rotation_capability","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"test_only_hash","","",14,[[],["hashvalue",3]]],[11,"vzip","","",14,[[]]],[11,"from","libra_types::account_config::resources::role","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"test_only_hash","","",15,[[],["hashvalue",3]]],[11,"vzip","","",15,[[]]],[11,"from","libra_types::account_config::resources::vasp","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"test_only_hash","","",16,[[],["hashvalue",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"test_only_hash","","",17,[[],["hashvalue",3]]],[11,"vzip","","",17,[[]]],[11,"from","libra_types::account_config::resources::withdraw_capability","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"test_only_hash","","",18,[[],["hashvalue",3]]],[11,"vzip","","",18,[[]]],[11,"from","libra_types::account_state","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"test_only_hash","","",19,[[],["hashvalue",3]]],[11,"vzip","","",19,[[]]],[11,"clear","","",19,[[]]],[11,"initialize","","",19,[[]]],[11,"from","libra_types::account_state_blob","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"test_only_hash","","",132,[[],["hashvalue",3]]],[11,"vzip","","",132,[[]]],[11,"encode_hex","","",132,[[]]],[11,"encode_hex_upper","","",132,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"vzip","","",133,[[]]],[11,"clear","","",133,[[]]],[11,"initialize","","",133,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"test_only_hash","","",20,[[],["hashvalue",3]]],[11,"vzip","","",20,[[]]],[11,"from","libra_types::block_info","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"test_only_hash","","",21,[[],["hashvalue",3]]],[11,"vzip","","",21,[[]]],[11,"from","libra_types::block_metadata","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"test_only_hash","","",22,[[],["hashvalue",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"test_only_hash","","",23,[[],["hashvalue",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"test_only_hash","","",24,[[],["hashvalue",3]]],[11,"vzip","","",24,[[]]],[11,"from","libra_types::contract_event","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"vzip","","",134,[[]]],[11,"clear","","",134,[[]]],[11,"initialize","","",134,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"test_only_hash","","",27,[[],["hashvalue",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"vzip","","",135,[[]]],[11,"clear","","",135,[[]]],[11,"initialize","","",135,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"test_only_hash","","",25,[[],["hashvalue",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"test_only_hash","","",26,[[],["hashvalue",3]]],[11,"vzip","","",26,[[]]],[11,"from","libra_types::epoch_change","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"test_only_hash","","",28,[[],["hashvalue",3]]],[11,"vzip","","",28,[[]]],[11,"from","libra_types::epoch_state","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"test_only_hash","","",30,[[],["hashvalue",3]]],[11,"vzip","","",30,[[]]],[11,"from","libra_types::event","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"test_only_hash","","",31,[[],["hashvalue",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"test_only_hash","","",32,[[],["hashvalue",3]]],[11,"vzip","","",32,[[]]],[11,"from","libra_types::get_with_proof","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"test_only_hash","","",33,[[],["hashvalue",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"test_only_hash","","",34,[[],["hashvalue",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"test_only_hash","","",35,[[],["hashvalue",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"test_only_hash","","",40,[[],["hashvalue",3]]],[11,"vzip","","",40,[[]]],[11,"from","libra_types::ledger_info","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"to_string","","",46,[[],["string",3]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"test_only_hash","","",46,[[],["hashvalue",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"vzip","","",136,[[]]],[11,"clear","","",136,[[]]],[11,"initialize","","",136,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"to_string","","",47,[[],["string",3]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"test_only_hash","","",47,[[],["hashvalue",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"test_only_hash","","",45,[[],["hashvalue",3]]],[11,"vzip","","",45,[[]]],[11,"from","libra_types::libra_timestamp","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"test_only_hash","","",48,[[],["hashvalue",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"test_only_hash","","",49,[[],["hashvalue",3]]],[11,"vzip","","",49,[[]]],[11,"from","libra_types::mempool_status","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","libra_types::on_chain_config","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"test_only_hash","","",53,[[],["hashvalue",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"to_string","","",56,[[],["string",3]]],[11,"borrow","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"test_only_hash","","",56,[[],["hashvalue",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"into_iter","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"to_string","","",57,[[],["string",3]]],[11,"borrow","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"test_only_hash","","",57,[[],["hashvalue",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"test_only_hash","","",54,[[],["hashvalue",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"test_only_hash","","",62,[[],["hashvalue",3]]],[11,"vzip","","",62,[[]]],[11,"clear","","",62,[[]]],[11,"initialize","","",62,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"test_only_hash","","",55,[[],["hashvalue",3]]],[11,"vzip","","",55,[[]]],[11,"from","libra_types::proof","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"test_only_hash","","",79,[[],["hashvalue",3]]],[11,"vzip","","",79,[[]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"vzip","","",137,[[]]],[11,"clear","","",137,[[]]],[11,"initialize","","",137,[[]]],[11,"from","libra_types::proof::accumulator","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"clear","","",63,[[]]],[11,"initialize","","",63,[[]]],[11,"from","libra_types::proof::definition","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"test_only_hash","","",64,[[],["hashvalue",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"test_only_hash","","",65,[[],["hashvalue",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"test_only_hash","","",66,[[],["hashvalue",3]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"test_only_hash","","",67,[[],["hashvalue",3]]],[11,"vzip","","",67,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"test_only_hash","","",68,[[],["hashvalue",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"test_only_hash","","",69,[[],["hashvalue",3]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"test_only_hash","","",70,[[],["hashvalue",3]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"test_only_hash","","",71,[[],["hashvalue",3]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"test_only_hash","","",72,[[],["hashvalue",3]]],[11,"vzip","","",72,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"test_only_hash","","",73,[[],["hashvalue",3]]],[11,"vzip","","",73,[[]]],[11,"from","libra_types::proof::position","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"to_string","","",75,[[],["string",3]]],[11,"borrow","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"into_iter","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"vzip","","",138,[[]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"into_iter","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"vzip","","",139,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"into_iter","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"into_iter","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"from","libra_types::proptest_types","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"vzip","","",140,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"from","libra_types::transaction","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"test_only_hash","","",85,[[],["hashvalue",3]]],[11,"vzip","","",85,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"test_only_hash","","",97,[[],["hashvalue",3]]],[11,"vzip","","",97,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"test_only_hash","","",99,[[],["hashvalue",3]]],[11,"vzip","","",99,[[]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"test_only_hash","","",102,[[],["hashvalue",3]]],[11,"vzip","","",102,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"test_only_hash","","",100,[[],["hashvalue",3]]],[11,"vzip","","",100,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"test_only_hash","","",101,[[],["hashvalue",3]]],[11,"vzip","","",101,[[]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"test_only_hash","","",103,[[],["hashvalue",3]]],[11,"vzip","","",103,[[]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"test_only_hash","","",104,[[],["hashvalue",3]]],[11,"vzip","","",104,[[]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"vzip","","",141,[[]]],[11,"clear","","",141,[[]]],[11,"initialize","","",141,[[]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"test_only_hash","","",106,[[],["hashvalue",3]]],[11,"vzip","","",106,[[]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"test_only_hash","","",86,[[],["hashvalue",3]]],[11,"vzip","","",86,[[]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"to_string","","",109,[[],["string",3]]],[11,"borrow","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"test_only_hash","","",109,[[],["hashvalue",3]]],[11,"vzip","","",109,[[]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"vzip","","",142,[[]]],[11,"clear","","",142,[[]]],[11,"initialize","","",142,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"test_only_hash","","",110,[[],["hashvalue",3]]],[11,"vzip","","",110,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"test_only_hash","","",87,[[],["hashvalue",3]]],[11,"vzip","","",87,[[]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"vzip","","",143,[[]]],[11,"clear","","",143,[[]]],[11,"initialize","","",143,[[]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"test_only_hash","","",88,[[],["hashvalue",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"test_only_hash","","",89,[[],["hashvalue",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"test_only_hash","","",90,[[],["hashvalue",3]]],[11,"vzip","","",90,[[]]],[11,"from","libra_types::transaction::authenticator","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"to_string","","",95,[[],["string",3]]],[11,"borrow","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"test_only_hash","","",95,[[],["hashvalue",3]]],[11,"vzip","","",95,[[]]],[11,"encode_hex","","",95,[[]]],[11,"encode_hex_upper","","",95,[[]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"borrow_mut","","",144,[[]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"vzip","","",144,[[]]],[11,"clear","","",144,[[]]],[11,"initialize","","",144,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_string","","",91,[[],["string",3]]],[11,"borrow","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"to_string","","",92,[[],["string",3]]],[11,"borrow","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"test_only_hash","","",92,[[],["hashvalue",3]]],[11,"vzip","","",92,[[]]],[11,"from","libra_types::trusted_state","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"vzip","","",114,[[]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"from","libra_types::validator_config","",115,[[]]],[11,"into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"test_only_hash","","",115,[[],["hashvalue",3]]],[11,"vzip","","",115,[[]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"test_only_hash","","",116,[[],["hashvalue",3]]],[11,"vzip","","",116,[[]]],[11,"from","libra_types::validator_info","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"to_string","","",117,[[],["string",3]]],[11,"borrow","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"test_only_hash","","",117,[[],["hashvalue",3]]],[11,"vzip","","",117,[[]]],[11,"from","libra_types::validator_signer","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"vzip","","",118,[[]]],[11,"from","libra_types::validator_verifier","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"test_only_hash","","",122,[[],["hashvalue",3]]],[11,"vzip","","",122,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"to_string","","",123,[[],["string",3]]],[11,"borrow","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"test_only_hash","","",123,[[],["hashvalue",3]]],[11,"vzip","","",123,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_string","","",119,[[],["string",3]]],[11,"borrow","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"from","libra_types::vm_error","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"to_string","","",124,[[],["string",3]]],[11,"borrow","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"test_only_hash","","",124,[[],["hashvalue",3]]],[11,"vzip","","",124,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"to_string","","",125,[[],["string",3]]],[11,"borrow","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"test_only_hash","","",126,[[],["hashvalue",3]]],[11,"vzip","","",126,[[]]],[11,"from","libra_types::waypoint","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"to_string","","",127,[[],["string",3]]],[11,"borrow","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"test_only_hash","","",127,[[],["hashvalue",3]]],[11,"vzip","","",127,[[]]],[11,"clear","","",127,[[]]],[11,"initialize","","",127,[[]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"borrow_mut","","",145,[[]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"vzip","","",145,[[]]],[11,"clear","","",145,[[]]],[11,"initialize","","",145,[[]]],[11,"from","libra_types::write_set","",129,[[]]],[11,"into","","",129,[[]]],[11,"into_iter","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"test_only_hash","","",129,[[],["hashvalue",3]]],[11,"vzip","","",129,[[]]],[11,"clear","","",129,[[]]],[11,"initialize","","",129,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"test_only_hash","","",130,[[],["hashvalue",3]]],[11,"vzip","","",130,[[]]],[11,"clear","","",130,[[]]],[11,"initialize","","",130,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"test_only_hash","","",128,[[],["hashvalue",3]]],[11,"vzip","","",128,[[]]],[11,"hash","libra_types::account_address","",131,[[],["hashvalue",3]]],[11,"fmt","","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"cmp","","",131,[[["accountaddress",3]],["ordering",4]]],[11,"hash","","",131,[[]]],[11,"hash","libra_types::transaction","",85,[[]]],[11,"partial_cmp","libra_types::account_address","",131,[[["accountaddress",3]],[["ordering",4],["option",4]]]],[11,"lt","","",131,[[["accountaddress",3]]]],[11,"le","","",131,[[["accountaddress",3]]]],[11,"gt","","",131,[[["accountaddress",3]]]],[11,"ge","","",131,[[["accountaddress",3]]]],[11,"from_str","","",131,[[],[["accountaddress",3],["error",3],["result",4]]]],[11,"deserialize","","",131,[[],[["result",4],["accountaddress",3]]]],[11,"deserialize","libra_types::transaction","",85,[[],[["result",4],["transactionargument",4]]]],[11,"fmt","libra_types::account_address","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"serialize","libra_types::transaction","",85,[[],["result",4]]],[11,"serialize","libra_types::account_address","",131,[[],["result",4]]],[11,"try_from","","",131,[[["string",3]],[["accountaddress",3],["error",3],["result",4]]]],[11,"try_from","","Tries to convert the provided byte buffer into Address.",131,[[["vec",3]],[["accountaddress",3],["error",3],["result",4]]]],[11,"try_from","","Tries to convert the provided byte array into Address.",131,[[],[["accountaddress",3],["error",3],["result",4]]]],[11,"try_from","","Tries to convert the provided byte array into Address.",131,[[],[["accountaddress",3],["error",3],["result",4]]]],[11,"eq","libra_types::transaction","",85,[[["transactionargument",4]]]],[11,"ne","","",85,[[["transactionargument",4]]]],[11,"eq","libra_types::account_address","",131,[[["accountaddress",3]]]],[11,"ne","","",131,[[["accountaddress",3]]]],[11,"default","","",131,[[],["accountaddress",3]]],[11,"arbitrary_with","libra_types::transaction","",85,[[]]],[11,"arbitrary_with","libra_types::account_address","",131,[[]]],[11,"fmt","","",131,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","libra_types::transaction","",85,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",85,[[],["transactionargument",4]]],[11,"clone","libra_types::account_address","",131,[[],["accountaddress",3]]],[11,"as_ref","","",131,[[]]],[11,"verify","libra_types::epoch_state","",30,[[["ledgerinfowithsignatures",4]],["result",6]]],[11,"epoch_change_verification_required","","",30,[[]]],[11,"is_ledger_info_stale","","",30,[[["ledgerinfo",3]]]],[11,"verify","libra_types::waypoint","",127,[[["ledgerinfowithsignatures",4]],["result",6]]],[11,"epoch_change_verification_required","","",127,[[]]],[11,"is_ledger_info_stale","","",127,[[["ledgerinfo",3]]]],[11,"deserialize_into_config","libra_types::on_chain_config","",54,[[],["result",6]]],[11,"as_ref","libra_types::account_state_blob","",132,[[]]],[11,"as_ref","libra_types::transaction::authenticator","",95,[[]]],[11,"from","libra_types::access_path","",0,[[["moduleid",3]],["accesspath",3]]],[11,"from","libra_types::account_state_blob","",132,[[["vec",3]],["accountstateblob",3]]],[11,"from","libra_types::transaction","",89,[[["vmstatus",3]]]],[11,"from","libra_types::trusted_state","",114,[[["waypoint",3]]]],[11,"from","libra_types::validator_verifier","",123,[[["validatorset",3]]]],[11,"from","libra_types::on_chain_config","",57,[[["validatorverifier",3]]]],[11,"into_iter","","",57,[[]]],[11,"into_iter","libra_types::write_set","",129,[[]]],[11,"next","libra_types::proof::position","",138,[[],[["option",4],["position",3]]]],[11,"next","","",139,[[],[["option",4],["position",3]]]],[11,"next","","",76,[[],[["option",4],["position",3]]]],[11,"next","","",77,[[],["option",4]]],[11,"clone","libra_types::access_path","",0,[[],["accesspath",3]]],[11,"clone","libra_types::account_state_blob","",132,[[],["accountstateblob",3]]],[11,"clone","","",133,[[],["accountstateblobhasher",3]]],[11,"clone","","",20,[[],["accountstatewithproof",3]]],[11,"clone","libra_types::block_info","",21,[[],["blockinfo",3]]],[11,"clone","libra_types::block_metadata","",22,[[],["blockmetadata",3]]],[11,"clone","","",24,[[],["newblockevent",3]]],[11,"clone","libra_types::contract_event","",26,[[],["contractevent",4]]],[11,"clone","","",134,[[],["contracteventhasher",3]]],[11,"clone","","",27,[[],["contracteventv0",3]]],[11,"clone","","",135,[[],["contracteventv0hasher",3]]],[11,"clone","","",25,[[],["eventwithproof",3]]],[11,"clone","libra_types::epoch_change","",28,[[],["epochchangeproof",3]]],[11,"clone","libra_types::epoch_state","",30,[[],["epochstate",3]]],[11,"clone","libra_types::event","",31,[[],["eventkey",3]]],[11,"clone","","",32,[[],["eventhandle",3]]],[11,"clone","libra_types::get_with_proof","",33,[[],["updatetolatestledgerrequest",3]]],[11,"clone","","",34,[[],["updatetolatestledgerresponse",3]]],[11,"clone","","",35,[[],["requestitem",4]]],[11,"clone","","",40,[[],["responseitem",4]]],[11,"clone","libra_types::ledger_info","",46,[[],["ledgerinfo",3]]],[11,"clone","","",136,[[],["ledgerinfohasher",3]]],[11,"clone","","",45,[[],["ledgerinfowithsignatures",4]]],[11,"clone","","",47,[[],["ledgerinfowithv0",3]]],[11,"clone","libra_types::libra_timestamp","",49,[[],["libratimestamp",3]]],[11,"clone","libra_types::mempool_status","",50,[[],["mempoolstatus",3]]],[11,"clone","","",51,[[],["mempoolstatuscode",4]]],[11,"clone","libra_types::on_chain_config","",53,[[],["libraversion",3]]],[11,"clone","","",56,[[],["registeredcurrencies",3]]],[11,"clone","","",57,[[],["validatorset",3]]],[11,"clone","","",55,[[],["vmpublishingoption",4]]],[11,"clone","","",54,[[],["vmconfig",3]]],[11,"clone","","",60,[[],["configid",3]]],[11,"clone","","",61,[[],["onchainconfigpayload",3]]],[11,"clone","libra_types::proof::definition","",64,[[],["accumulatorproof",3]]],[11,"clone","","",65,[[],["sparsemerkleproof",3]]],[11,"clone","","",66,[[],["accumulatorconsistencyproof",3]]],[11,"clone","","",67,[[],["accumulatorrangeproof",3]]],[11,"clone","","",68,[[],["sparsemerklerangeproof",3]]],[11,"clone","","",69,[[],["transactioninfowithproof",3]]],[11,"clone","","",70,[[],["accountstateproof",3]]],[11,"clone","","",71,[[],["eventproof",3]]],[11,"clone","","",72,[[],["transactionlistproof",3]]],[11,"clone","","",73,[[],["accumulatorextensionproof",3]]],[11,"clone","libra_types::proof::position","",75,[[],["position",3]]],[11,"clone","libra_types::proof","",79,[[],["sparsemerkleleafnode",3]]],[11,"clone","","",137,[[],["sparsemerkleleafnodehasher",3]]],[11,"clone","libra_types::transaction::authenticator","",92,[[],["transactionauthenticator",4]]],[11,"clone","","",95,[[],["authenticationkey",3]]],[11,"clone","","",144,[[],["authenticationkeyhasher",3]]],[11,"clone","libra_types::transaction","",97,[[],["changeset",3]]],[11,"clone","","",99,[[],["module",3]]],[11,"clone","","",100,[[],["script",3]]],[11,"clone","","",101,[[],["scriptabi",3]]],[11,"clone","","",102,[[],["argumentabi",3]]],[11,"clone","","",103,[[],["typeargumentabi",3]]],[11,"clone","","",104,[[],["rawtransaction",3]]],[11,"clone","","",141,[[],["rawtransactionhasher",3]]],[11,"clone","","",88,[[],["transactionpayload",4]]],[11,"clone","","",106,[[],["signedtransaction",3]]],[11,"clone","","",105,[[],["signaturecheckedtransaction",3]]],[11,"clone","","",86,[[],["transactionwithproof",3]]],[11,"clone","","",89,[[],["transactionstatus",4]]],[11,"clone","","",107,[[],["vmvalidatorresult",3]]],[11,"clone","","",108,[[],["transactionoutput",3]]],[11,"clone","","",109,[[],["transactioninfo",3]]],[11,"clone","","",142,[[],["transactioninfohasher",3]]],[11,"clone","","",110,[[],["transactiontocommit",3]]],[11,"clone","","",87,[[],["transactionlistwithproof",3]]],[11,"clone","","",90,[[],["transaction",4]]],[11,"clone","","",143,[[],["transactionhasher",3]]],[11,"clone","libra_types::trusted_state","",114,[[],["trustedstate",3]]],[11,"clone","","",111,[[],["trustedstatechange",4]]],[11,"clone","libra_types::validator_config","",116,[[],["validatorconfig",3]]],[11,"clone","libra_types::validator_info","",117,[[],["validatorinfo",3]]],[11,"clone","libra_types::validator_signer","",118,[[],["validatorsigner",3]]],[11,"clone","libra_types::validator_verifier","",122,[[],["validatorconsensusinfo",3]]],[11,"clone","","",123,[[],["validatorverifier",3]]],[11,"clone","libra_types::vm_error","",124,[[],["vmstatus",3]]],[11,"clone","","",125,[[],["statustype",4]]],[11,"clone","","",126,[[],["statuscode",4]]],[11,"clone","libra_types::waypoint","",127,[[],["waypoint",3]]],[11,"clone","","",145,[[],["ledger2waypointconverterhasher",3]]],[11,"clone","libra_types::write_set","",128,[[],["writeop",4]]],[11,"clone","","",129,[[],["writeset",3]]],[11,"clone","","",130,[[],["writesetmut",3]]],[11,"default","libra_types::access_path","",0,[[],["accesspath",3]]],[11,"default","libra_types::account_state","",19,[[],["accountstate",3]]],[11,"default","libra_types::account_state_blob","",133,[[]]],[11,"default","libra_types::contract_event","",134,[[]]],[11,"default","","",135,[[]]],[11,"default","libra_types::ledger_info","",136,[[]]],[11,"default","libra_types::on_chain_config","",62,[[]]],[11,"default","libra_types::proof::accumulator","",63,[[]]],[11,"default","libra_types::proof","",137,[[]]],[11,"default","libra_types::transaction::authenticator","",144,[[]]],[11,"default","libra_types::transaction","",141,[[]]],[11,"default","","",142,[[]]],[11,"default","","",143,[[]]],[11,"default","libra_types::waypoint","",127,[[],["waypoint",3]]],[11,"default","","",145,[[]]],[11,"default","libra_types::write_set","",129,[[],["writeset",3]]],[11,"default","","",130,[[],["writesetmut",3]]],[11,"cmp","libra_types::access_path","",0,[[["accesspath",3]],["ordering",4]]],[11,"cmp","libra_types::event","",31,[[["eventkey",3]],["ordering",4]]],[11,"cmp","libra_types::mempool_status","",50,[[["mempoolstatus",3]],["ordering",4]]],[11,"cmp","","",51,[[["mempoolstatuscode",4]],["ordering",4]]],[11,"cmp","libra_types::transaction::authenticator","",95,[[["authenticationkey",3]],["ordering",4]]],[11,"cmp","libra_types::vm_error","",124,[[["vmstatus",3]],["ordering",4]]],[11,"cmp","","",126,[[["statuscode",4]],["ordering",4]]],[11,"eq","libra_types::access_path","",0,[[["accesspath",3]]]],[11,"ne","","",0,[[["accesspath",3]]]],[11,"eq","libra_types::account_state","",19,[[["accountstate",3]]]],[11,"ne","","",19,[[["accountstate",3]]]],[11,"eq","libra_types::account_state_blob","",132,[[["accountstateblob",3]]]],[11,"ne","","",132,[[["accountstateblob",3]]]],[11,"eq","","",20,[[["accountstatewithproof",3]]]],[11,"ne","","",20,[[["accountstatewithproof",3]]]],[11,"eq","libra_types::block_info","",21,[[["blockinfo",3]]]],[11,"ne","","",21,[[["blockinfo",3]]]],[11,"eq","libra_types::block_metadata","",22,[[["blockmetadata",3]]]],[11,"ne","","",22,[[["blockmetadata",3]]]],[11,"eq","libra_types::contract_event","",26,[[["contractevent",4]]]],[11,"ne","","",26,[[["contractevent",4]]]],[11,"eq","","",27,[[["contracteventv0",3]]]],[11,"ne","","",27,[[["contracteventv0",3]]]],[11,"eq","","",25,[[["eventwithproof",3]]]],[11,"ne","","",25,[[["eventwithproof",3]]]],[11,"eq","libra_types::epoch_change","",28,[[["epochchangeproof",3]]]],[11,"ne","","",28,[[["epochchangeproof",3]]]],[11,"eq","libra_types::epoch_state","",30,[[["epochstate",3]]]],[11,"ne","","",30,[[["epochstate",3]]]],[11,"eq","libra_types::event","",31,[[["eventkey",3]]]],[11,"ne","","",31,[[["eventkey",3]]]],[11,"eq","","",32,[[["eventhandle",3]]]],[11,"ne","","",32,[[["eventhandle",3]]]],[11,"eq","libra_types::get_with_proof","",33,[[["updatetolatestledgerrequest",3]]]],[11,"ne","","",33,[[["updatetolatestledgerrequest",3]]]],[11,"eq","","",34,[[["updatetolatestledgerresponse",3]]]],[11,"ne","","",34,[[["updatetolatestledgerresponse",3]]]],[11,"eq","","",35,[[["requestitem",4]]]],[11,"ne","","",35,[[["requestitem",4]]]],[11,"eq","","",40,[[["responseitem",4]]]],[11,"ne","","",40,[[["responseitem",4]]]],[11,"eq","libra_types::ledger_info","",46,[[["ledgerinfo",3]]]],[11,"ne","","",46,[[["ledgerinfo",3]]]],[11,"eq","","",45,[[["ledgerinfowithsignatures",4]]]],[11,"ne","","",45,[[["ledgerinfowithsignatures",4]]]],[11,"eq","","",47,[[["ledgerinfowithv0",3]]]],[11,"ne","","",47,[[["ledgerinfowithv0",3]]]],[11,"eq","libra_types::mempool_status","",50,[[["mempoolstatus",3]]]],[11,"ne","","",50,[[["mempoolstatus",3]]]],[11,"eq","","",51,[[["mempoolstatuscode",4]]]],[11,"eq","libra_types::on_chain_config","",53,[[["libraversion",3]]]],[11,"ne","","",53,[[["libraversion",3]]]],[11,"eq","","",56,[[["registeredcurrencies",3]]]],[11,"ne","","",56,[[["registeredcurrencies",3]]]],[11,"eq","","",57,[[["validatorset",3]]]],[11,"ne","","",57,[[["validatorset",3]]]],[11,"eq","","",55,[[["vmpublishingoption",4]]]],[11,"ne","","",55,[[["vmpublishingoption",4]]]],[11,"eq","","",54,[[["vmconfig",3]]]],[11,"ne","","",54,[[["vmconfig",3]]]],[11,"eq","","",60,[[["configid",3]]]],[11,"ne","","",60,[[["configid",3]]]],[11,"eq","","",61,[[["onchainconfigpayload",3]]]],[11,"ne","","",61,[[["onchainconfigpayload",3]]]],[11,"eq","libra_types::proof::definition","",64,[[]]],[11,"eq","","",65,[[["sparsemerkleproof",3]]]],[11,"ne","","",65,[[["sparsemerkleproof",3]]]],[11,"eq","","",66,[[["accumulatorconsistencyproof",3]]]],[11,"ne","","",66,[[["accumulatorconsistencyproof",3]]]],[11,"eq","","",67,[[]]],[11,"eq","","",68,[[["sparsemerklerangeproof",3]]]],[11,"ne","","",68,[[["sparsemerklerangeproof",3]]]],[11,"eq","","",69,[[["transactioninfowithproof",3]]]],[11,"ne","","",69,[[["transactioninfowithproof",3]]]],[11,"eq","","",70,[[["accountstateproof",3]]]],[11,"ne","","",70,[[["accountstateproof",3]]]],[11,"eq","","",71,[[["eventproof",3]]]],[11,"ne","","",71,[[["eventproof",3]]]],[11,"eq","","",72,[[["transactionlistproof",3]]]],[11,"ne","","",72,[[["transactionlistproof",3]]]],[11,"eq","libra_types::proof::position","",75,[[["position",3]]]],[11,"ne","","",75,[[["position",3]]]],[11,"eq","","",74,[[["nodedirection",4]]]],[11,"eq","libra_types::proof","",79,[[["sparsemerkleleafnode",3]]]],[11,"ne","","",79,[[["sparsemerkleleafnode",3]]]],[11,"eq","libra_types::transaction::authenticator","",92,[[["transactionauthenticator",4]]]],[11,"ne","","",92,[[["transactionauthenticator",4]]]],[11,"eq","","",95,[[["authenticationkey",3]]]],[11,"ne","","",95,[[["authenticationkey",3]]]],[11,"eq","libra_types::transaction","",97,[[["changeset",3]]]],[11,"ne","","",97,[[["changeset",3]]]],[11,"eq","","",99,[[["module",3]]]],[11,"ne","","",99,[[["module",3]]]],[11,"eq","","",100,[[["script",3]]]],[11,"ne","","",100,[[["script",3]]]],[11,"eq","","",101,[[["scriptabi",3]]]],[11,"ne","","",101,[[["scriptabi",3]]]],[11,"eq","","",102,[[["argumentabi",3]]]],[11,"ne","","",102,[[["argumentabi",3]]]],[11,"eq","","",103,[[["typeargumentabi",3]]]],[11,"ne","","",103,[[["typeargumentabi",3]]]],[11,"eq","","",104,[[["rawtransaction",3]]]],[11,"ne","","",104,[[["rawtransaction",3]]]],[11,"eq","","",88,[[["transactionpayload",4]]]],[11,"ne","","",88,[[["transactionpayload",4]]]],[11,"eq","","",106,[[["signedtransaction",3]]]],[11,"ne","","",106,[[["signedtransaction",3]]]],[11,"eq","","",105,[[["signaturecheckedtransaction",3]]]],[11,"ne","","",105,[[["signaturecheckedtransaction",3]]]],[11,"eq","","",86,[[["transactionwithproof",3]]]],[11,"ne","","",86,[[["transactionwithproof",3]]]],[11,"eq","","",89,[[["transactionstatus",4]]]],[11,"ne","","",89,[[["transactionstatus",4]]]],[11,"eq","","",107,[[["vmvalidatorresult",3]]]],[11,"ne","","",107,[[["vmvalidatorresult",3]]]],[11,"eq","","",108,[[["transactionoutput",3]]]],[11,"ne","","",108,[[["transactionoutput",3]]]],[11,"eq","","",109,[[["transactioninfo",3]]]],[11,"ne","","",109,[[["transactioninfo",3]]]],[11,"eq","","",110,[[["transactiontocommit",3]]]],[11,"ne","","",110,[[["transactiontocommit",3]]]],[11,"eq","","",87,[[["transactionlistwithproof",3]]]],[11,"ne","","",87,[[["transactionlistwithproof",3]]]],[11,"eq","","",90,[[["transaction",4]]]],[11,"ne","","",90,[[["transaction",4]]]],[11,"eq","libra_types::validator_config","",116,[[["validatorconfig",3]]]],[11,"ne","","",116,[[["validatorconfig",3]]]],[11,"eq","libra_types::validator_info","",117,[[["validatorinfo",3]]]],[11,"ne","","",117,[[["validatorinfo",3]]]],[11,"eq","libra_types::validator_verifier","",119,[[["verifyerror",4]]]],[11,"ne","","",119,[[["verifyerror",4]]]],[11,"eq","","",122,[[["validatorconsensusinfo",3]]]],[11,"ne","","",122,[[["validatorconsensusinfo",3]]]],[11,"eq","","",123,[[["validatorverifier",3]]]],[11,"ne","","",123,[[["validatorverifier",3]]]],[11,"eq","libra_types::vm_error","",124,[[["vmstatus",3]]]],[11,"ne","","",124,[[["vmstatus",3]]]],[11,"eq","","",125,[[["statustype",4]]]],[11,"eq","","",126,[[["statuscode",4]]]],[11,"eq","libra_types::waypoint","",127,[[["waypoint",3]]]],[11,"ne","","",127,[[["waypoint",3]]]],[11,"eq","libra_types::write_set","",128,[[["writeop",4]]]],[11,"ne","","",128,[[["writeop",4]]]],[11,"eq","","",129,[[["writeset",3]]]],[11,"ne","","",129,[[["writeset",3]]]],[11,"eq","","",130,[[["writesetmut",3]]]],[11,"ne","","",130,[[["writesetmut",3]]]],[11,"partial_cmp","libra_types::access_path","",0,[[["accesspath",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["accesspath",3]]]],[11,"le","","",0,[[["accesspath",3]]]],[11,"gt","","",0,[[["accesspath",3]]]],[11,"ge","","",0,[[["accesspath",3]]]],[11,"partial_cmp","libra_types::event","",31,[[["eventkey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",31,[[["eventkey",3]]]],[11,"le","","",31,[[["eventkey",3]]]],[11,"gt","","",31,[[["eventkey",3]]]],[11,"ge","","",31,[[["eventkey",3]]]],[11,"partial_cmp","libra_types::mempool_status","",50,[[["mempoolstatus",3]],[["option",4],["ordering",4]]]],[11,"lt","","",50,[[["mempoolstatus",3]]]],[11,"le","","",50,[[["mempoolstatus",3]]]],[11,"gt","","",50,[[["mempoolstatus",3]]]],[11,"ge","","",50,[[["mempoolstatus",3]]]],[11,"partial_cmp","","",51,[[["mempoolstatuscode",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","libra_types::transaction::authenticator","",95,[[["authenticationkey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",95,[[["authenticationkey",3]]]],[11,"le","","",95,[[["authenticationkey",3]]]],[11,"gt","","",95,[[["authenticationkey",3]]]],[11,"ge","","",95,[[["authenticationkey",3]]]],[11,"partial_cmp","libra_types::vm_error","",124,[[["vmstatus",3]],[["option",4],["ordering",4]]]],[11,"lt","","",124,[[["vmstatus",3]]]],[11,"le","","",124,[[["vmstatus",3]]]],[11,"gt","","",124,[[["vmstatus",3]]]],[11,"ge","","",124,[[["vmstatus",3]]]],[11,"partial_cmp","","",126,[[["statuscode",4]],[["option",4],["ordering",4]]]],[11,"deref","libra_types::contract_event","",26,[[]]],[11,"deref","libra_types::ledger_info","",45,[[],["ledgerinfowithv0",3]]],[11,"deref","libra_types::transaction","",105,[[]]],[11,"deref_mut","libra_types::ledger_info","",45,[[],["ledgerinfowithv0",3]]],[11,"fmt","libra_types::access_path","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::burn","",1,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::cancel_burn","",2,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::mint","",3,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::new_block","",4,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::new_epoch","",5,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::preburn","",6,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::received_payment","",7,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::sent_payment","",8,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::events::upgrade","",9,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::account","",10,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::association_capability","",11,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::balance","",12,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::currency_info","",13,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::key_rotation_capability","",14,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::role","",15,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::vasp","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_config::resources::withdraw_capability","",18,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_state","",19,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::account_state_blob","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::block_info","",21,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::block_metadata","",22,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::contract_event","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::epoch_change","",28,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::epoch_state","",30,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::event","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::get_with_proof","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::ledger_info","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::libra_timestamp","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::mempool_status","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::on_chain_config","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::proof::accumulator","",63,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::proof::definition","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::proof::position","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::proof","",79,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::proptest_types","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::transaction::authenticator","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::transaction","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::trusted_state","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::validator_config","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::validator_info","",117,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::validator_signer","",118,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::validator_verifier","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::vm_error","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::waypoint","",127,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::write_set","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","","",130,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::access_path","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::block_info","",21,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::contract_event","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::epoch_state","",30,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::event","",31,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::ledger_info","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::on_chain_config","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::proof::position","",75,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::transaction::authenticator","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::transaction","",109,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::validator_info","",117,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::validator_verifier","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::vm_error","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::waypoint","",127,[[["formatter",3]],["result",6]]],[11,"hash","libra_types::access_path","",0,[[]]],[11,"hash","libra_types::contract_event","",26,[[]]],[11,"hash","","",27,[[]]],[11,"hash","libra_types::event","",31,[[]]],[11,"hash","libra_types::mempool_status","",50,[[]]],[11,"hash","","",51,[[]]],[11,"hash","libra_types::on_chain_config","",60,[[]]],[11,"hash","libra_types::proof::position","",75,[[]]],[11,"hash","libra_types::transaction::authenticator","",92,[[]]],[11,"hash","","",95,[[]]],[11,"hash","libra_types::transaction","",97,[[]]],[11,"hash","","",99,[[]]],[11,"hash","","",100,[[]]],[11,"hash","","",101,[[]]],[11,"hash","","",102,[[]]],[11,"hash","","",103,[[]]],[11,"hash","","",104,[[]]],[11,"hash","","",88,[[]]],[11,"hash","","",106,[[]]],[11,"hash","","",105,[[]]],[11,"hash","libra_types::vm_error","",124,[[]]],[11,"hash","","",125,[[]]],[11,"hash","","",126,[[]]],[11,"hash","libra_types::write_set","",128,[[]]],[11,"hash","","",129,[[]]],[11,"hash","","",130,[[]]],[11,"from_iter","","",130,[[["intoiterator",8]]]],[11,"try_from","libra_types::account_state","",19,[[],["result",6]]],[11,"try_from","libra_types::account_state_blob","",132,[[["accountstate",3]],["result",6]]],[11,"try_from","libra_types::account_state","",19,[[["accountstateblob",3]],["result",6]]],[11,"try_from","libra_types::account_state_blob","",132,[[],["result",6]]],[11,"try_from","libra_types::account_config::resources::account","",10,[[["accountstateblob",3]],["result",6]]],[11,"try_from","libra_types::account_config::events::sent_payment","",8,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::received_payment","",7,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::mint","",3,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::burn","",1,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::preburn","",6,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::cancel_burn","",2,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::upgrade","",9,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::new_block","",4,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::account_config::events::new_epoch","",5,[[["contractevent",4]],["result",6]]],[11,"try_from","libra_types::event","Tries to convert the provided byte array into Event Key.",31,[[],[["eventkey",3],["result",6]]]],[11,"try_from","libra_types::mempool_status","",51,[[],["result",6]]],[11,"try_from","libra_types::transaction::authenticator","",95,[[],[["result",4],["authenticationkey",3],["cryptomaterialerror",4]]]],[11,"try_from","","",95,[[["vec",3]],[["result",4],["authenticationkey",3],["cryptomaterialerror",4]]]],[11,"try_from","libra_types::transaction","",106,[[["transaction",4]],["result",6]]],[11,"try_from","libra_types::trusted_state","",114,[[["ledgerinfo",3]],["result",6]]],[11,"try_from","libra_types::vm_error","",126,[[],["result",6]]],[11,"from_str","libra_types::transaction::authenticator","",95,[[],["result",6]]],[11,"from_str","libra_types::waypoint","",127,[[],["result",6]]],[11,"fmt","libra_types::event","",31,[[["formatter",3]],["result",6]]],[11,"fmt","libra_types::transaction::authenticator","",95,[[["formatter",3]],["result",6]]],[11,"write","libra_types::account_state_blob","",133,[[],["result",6]]],[11,"flush","","",133,[[],["result",6]]],[11,"write","libra_types::contract_event","",134,[[],["result",6]]],[11,"flush","","",134,[[],["result",6]]],[11,"write","","",135,[[],["result",6]]],[11,"flush","","",135,[[],["result",6]]],[11,"write","libra_types::ledger_info","",136,[[],["result",6]]],[11,"flush","","",136,[[],["result",6]]],[11,"write","libra_types::proof","",137,[[],["result",6]]],[11,"flush","","",137,[[],["result",6]]],[11,"write","libra_types::transaction::authenticator","",144,[[],["result",6]]],[11,"flush","","",144,[[],["result",6]]],[11,"write","libra_types::transaction","",141,[[],["result",6]]],[11,"flush","","",141,[[],["result",6]]],[11,"write","","",142,[[],["result",6]]],[11,"flush","","",142,[[],["result",6]]],[11,"write","","",143,[[],["result",6]]],[11,"flush","","",143,[[],["result",6]]],[11,"write","libra_types::waypoint","",145,[[],["result",6]]],[11,"flush","","",145,[[],["result",6]]],[11,"hash","libra_types::account_state_blob","",132,[[],["hashvalue",3]]],[11,"hash","libra_types::contract_event","",26,[[],["hashvalue",3]]],[11,"hash","libra_types::ledger_info","",46,[[],["hashvalue",3]]],[11,"hash","libra_types::proof","",78,[[],["hashvalue",3]]],[11,"hash","","",79,[[],["hashvalue",3]]],[11,"hash","libra_types::transaction","",104,[[],["hashvalue",3]]],[11,"hash","","",109,[[],["hashvalue",3]]],[11,"hash","","",90,[[],["hashvalue",3]]],[11,"seed","libra_types::account_state_blob","",133,[[]]],[11,"update","","",133,[[]]],[11,"finish","","",133,[[],["hashvalue",3]]],[11,"seed","libra_types::contract_event","",134,[[]]],[11,"update","","",134,[[]]],[11,"finish","","",134,[[],["hashvalue",3]]],[11,"seed","","",135,[[]]],[11,"update","","",135,[[]]],[11,"finish","","",135,[[],["hashvalue",3]]],[11,"seed","libra_types::ledger_info","",136,[[]]],[11,"update","","",136,[[]]],[11,"finish","","",136,[[],["hashvalue",3]]],[11,"seed","libra_types::proof","",137,[[]]],[11,"update","","",137,[[]]],[11,"finish","","",137,[[],["hashvalue",3]]],[11,"seed","libra_types::transaction::authenticator","",144,[[]]],[11,"update","","",144,[[]]],[11,"finish","","",144,[[],["hashvalue",3]]],[11,"seed","libra_types::transaction","",141,[[]]],[11,"update","","",141,[[]]],[11,"finish","","",141,[[],["hashvalue",3]]],[11,"seed","","",142,[[]]],[11,"update","","",142,[[]]],[11,"finish","","",142,[[],["hashvalue",3]]],[11,"seed","","",143,[[]]],[11,"update","","",143,[[]]],[11,"finish","","",143,[[],["hashvalue",3]]],[11,"seed","libra_types::waypoint","",145,[[]]],[11,"update","","",145,[[]]],[11,"finish","","",145,[[],["hashvalue",3]]],[11,"serialize","libra_types::access_path","",0,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::burn","",1,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::cancel_burn","",2,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::mint","",3,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::new_block","",4,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::new_epoch","",5,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::preburn","",6,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::received_payment","",7,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::sent_payment","",8,[[],["result",4]]],[11,"serialize","libra_types::account_config::events::upgrade","",9,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::account","",10,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::association_capability","",11,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::balance","",12,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::currency_info","",13,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::key_rotation_capability","",14,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::role","",15,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::vasp","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","libra_types::account_config::resources::withdraw_capability","",18,[[],["result",4]]],[11,"serialize","libra_types::account_state","",19,[[],["result",4]]],[11,"serialize","libra_types::account_state_blob","",132,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","libra_types::block_info","",21,[[],["result",4]]],[11,"serialize","libra_types::block_metadata","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","libra_types::contract_event","",26,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","libra_types::epoch_change","",28,[[],["result",4]]],[11,"serialize","libra_types::epoch_state","",30,[[],["result",4]]],[11,"serialize","libra_types::event","",31,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","libra_types::get_with_proof","",33,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","libra_types::ledger_info","",46,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","libra_types::libra_timestamp","",48,[[],["result",4]]],[11,"serialize","","",49,[[],["result",4]]],[11,"serialize","libra_types::on_chain_config","",53,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",57,[[],["result",4]]],[11,"serialize","","",55,[[],["result",4]]],[11,"serialize","","",54,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","libra_types::proof::definition","",64,[[],["result",4]]],[11,"serialize","","",65,[[],["result",4]]],[11,"serialize","","",66,[[],["result",4]]],[11,"serialize","","",67,[[],["result",4]]],[11,"serialize","","",68,[[],["result",4]]],[11,"serialize","","",69,[[],["result",4]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","","",71,[[],["result",4]]],[11,"serialize","","",72,[[],["result",4]]],[11,"serialize","","",73,[[],["result",4]]],[11,"serialize","libra_types::proof","",79,[[],["result",4]]],[11,"serialize","libra_types::transaction::authenticator","",92,[[],["result",4]]],[11,"serialize","","",95,[[],["result",4]]],[11,"serialize","libra_types::transaction","",97,[[],["result",4]]],[11,"serialize","","",99,[[],["result",4]]],[11,"serialize","","",100,[[],["result",4]]],[11,"serialize","","",101,[[],["result",4]]],[11,"serialize","","",102,[[],["result",4]]],[11,"serialize","","",103,[[],["result",4]]],[11,"serialize","","",104,[[],["result",4]]],[11,"serialize","","",88,[[],["result",4]]],[11,"serialize","","",106,[[],["result",4]]],[11,"serialize","","",86,[[],["result",4]]],[11,"serialize","","",89,[[],["result",4]]],[11,"serialize","","",109,[[],["result",4]]],[11,"serialize","","",110,[[],["result",4]]],[11,"serialize","","",87,[[],["result",4]]],[11,"serialize","","",90,[[],["result",4]]],[11,"serialize","libra_types::validator_config","",115,[[],["result",4]]],[11,"serialize","","",116,[[],["result",4]]],[11,"serialize","libra_types::validator_info","",117,[[],["result",4]]],[11,"serialize","libra_types::validator_verifier","",122,[[],["result",4]]],[11,"serialize","","",123,[[],["result",4]]],[11,"serialize","libra_types::vm_error","",124,[[],["result",4]]],[11,"serialize","","",126,[[],["result",4]]],[11,"serialize","libra_types::waypoint","",127,[[],["result",4]]],[11,"serialize","libra_types::write_set","",128,[[],["result",4]]],[11,"serialize","","",129,[[],["result",4]]],[11,"serialize","","",130,[[],["result",4]]],[11,"deserialize","libra_types::access_path","",0,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::burn","",1,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::cancel_burn","",2,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::mint","",3,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::new_block","",4,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::new_epoch","",5,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::preburn","",6,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::received_payment","",7,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::sent_payment","",8,[[],["result",4]]],[11,"deserialize","libra_types::account_config::events::upgrade","",9,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::account","",10,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::association_capability","",11,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::balance","",12,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::currency_info","",13,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::key_rotation_capability","",14,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::role","",15,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::vasp","",16,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","libra_types::account_config::resources::withdraw_capability","",18,[[],["result",4]]],[11,"deserialize","libra_types::account_state","",19,[[],["result",4]]],[11,"deserialize","libra_types::account_state_blob","",132,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","libra_types::block_info","",21,[[],["result",4]]],[11,"deserialize","libra_types::block_metadata","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","libra_types::contract_event","",26,[[],["result",4]]],[11,"deserialize","","",27,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","libra_types::epoch_change","",28,[[],["result",4]]],[11,"deserialize","libra_types::epoch_state","",30,[[],["result",4]]],[11,"deserialize","libra_types::event","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","libra_types::get_with_proof","",33,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",35,[[],["result",4]]],[11,"deserialize","","",40,[[],["result",4]]],[11,"deserialize","libra_types::ledger_info","",46,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","libra_types::libra_timestamp","",48,[[],["result",4]]],[11,"deserialize","","",49,[[],["result",4]]],[11,"deserialize","libra_types::on_chain_config","",53,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",57,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","","",54,[[],["result",4]]],[11,"deserialize","","",62,[[],["result",4]]],[11,"deserialize","libra_types::proof::definition","",64,[[],["result",4]]],[11,"deserialize","","",65,[[],["result",4]]],[11,"deserialize","","",66,[[],["result",4]]],[11,"deserialize","","",67,[[],["result",4]]],[11,"deserialize","","",68,[[],["result",4]]],[11,"deserialize","","",69,[[],["result",4]]],[11,"deserialize","","",70,[[],["result",4]]],[11,"deserialize","","",71,[[],["result",4]]],[11,"deserialize","","",72,[[],["result",4]]],[11,"deserialize","","",73,[[],["result",4]]],[11,"deserialize","libra_types::proof","",79,[[],["result",4]]],[11,"deserialize","libra_types::transaction::authenticator","",92,[[],["result",4]]],[11,"deserialize","","",95,[[],["result",4]]],[11,"deserialize","libra_types::transaction","",97,[[],["result",4]]],[11,"deserialize","","",99,[[],["result",4]]],[11,"deserialize","","",100,[[],["result",4]]],[11,"deserialize","","",101,[[],["result",4]]],[11,"deserialize","","",102,[[],["result",4]]],[11,"deserialize","","",103,[[],["result",4]]],[11,"deserialize","","",104,[[],["result",4]]],[11,"deserialize","","",88,[[],["result",4]]],[11,"deserialize","","",106,[[],["result",4]]],[11,"deserialize","","",86,[[],["result",4]]],[11,"deserialize","","",89,[[],["result",4]]],[11,"deserialize","","",109,[[],["result",4]]],[11,"deserialize","","",110,[[],["result",4]]],[11,"deserialize","","",87,[[],["result",4]]],[11,"deserialize","","",90,[[],["result",4]]],[11,"deserialize","libra_types::validator_config","",115,[[],["result",4]]],[11,"deserialize","","",116,[[],["result",4]]],[11,"deserialize","libra_types::validator_info","",117,[[],["result",4]]],[11,"deserialize","libra_types::validator_verifier","",122,[[],["result",4]]],[11,"deserialize","","",123,[[],["result",4]]],[11,"deserialize","libra_types::vm_error","",124,[[],["result",4]]],[11,"deserialize","","",126,[[],["result",4]]],[11,"deserialize","libra_types::waypoint","",127,[[],["result",4]]],[11,"deserialize","libra_types::write_set","",128,[[],["result",4]]],[11,"deserialize","","",129,[[],["result",4]]],[11,"deserialize","","",130,[[],["result",4]]],[11,"arbitrary_with","libra_types::access_path","",0,[[]]],[11,"arbitrary_with","libra_types::account_config::resources::account","",10,[[]]],[11,"arbitrary_with","libra_types::account_config::resources::association_capability","",11,[[]]],[11,"arbitrary_with","libra_types::account_config::resources::balance","",12,[[]]],[11,"arbitrary_with","libra_types::account_config::resources::key_rotation_capability","",14,[[]]],[11,"arbitrary_with","libra_types::account_config::resources::vasp","",17,[[]]],[11,"arbitrary_with","libra_types::account_config::resources::withdraw_capability","",18,[[]]],[11,"arbitrary_with","libra_types::account_state_blob","",132,[[]]],[11,"arbitrary_with","","",20,[[]]],[11,"arbitrary_with","libra_types::block_info","",21,[[]]],[11,"arbitrary_with","libra_types::contract_event","",25,[[]]],[11,"arbitrary_with","libra_types::epoch_change","",28,[[]]],[11,"arbitrary_with","libra_types::epoch_state","",30,[[]]],[11,"arbitrary_with","libra_types::event","",31,[[]]],[11,"arbitrary_with","libra_types::get_with_proof","",33,[[]]],[11,"arbitrary_with","","",35,[[]]],[11,"arbitrary_with","","",40,[[]]],[11,"arbitrary_with","libra_types::ledger_info","",46,[[]]],[11,"arbitrary_with","libra_types::mempool_status","",50,[[]]],[11,"arbitrary_with","","",51,[[]]],[11,"arbitrary_with","libra_types::on_chain_config","",57,[[]]],[11,"arbitrary_with","libra_types::proof::definition","",69,[[]]],[11,"arbitrary_with","","",70,[[]]],[11,"arbitrary_with","","",71,[[]]],[11,"arbitrary_with","","",72,[[]]],[11,"arbitrary_with","","",64,[[]]],[11,"arbitrary_with","","",65,[[]]],[11,"arbitrary_with","","",66,[[]]],[11,"arbitrary_with","","",67,[[]]],[11,"arbitrary_with","","",68,[[]]],[11,"arbitrary_with","libra_types::proof","",79,[[]]],[11,"arbitrary_with","libra_types::write_set","",128,[[]]],[11,"arbitrary_with","","",129,[[]]],[11,"arbitrary_with","libra_types::transaction","",97,[[]]],[11,"arbitrary_with","libra_types::proptest_types","",140,[[]]],[11,"arbitrary","","",140,[[]]],[11,"arbitrary_with","","",80,[[]]],[11,"arbitrary_with","libra_types::transaction","",104,[[]]],[11,"arbitrary_with","libra_types::proptest_types","",81,[[]]],[11,"arbitrary_with","libra_types::transaction","",105,[[]]],[11,"arbitrary_with","","",106,[[]]],[11,"arbitrary_with","libra_types::vm_error","",126,[[]]],[11,"arbitrary_with","libra_types::transaction","",89,[[]]],[11,"arbitrary_with","","",88,[[]]],[11,"arbitrary_with","","",100,[[]]],[11,"arbitrary_with","","",99,[[]]],[11,"arbitrary_with","libra_types::ledger_info","",45,[[]]],[11,"arbitrary_with","libra_types::get_with_proof","",34,[[]]],[11,"arbitrary_with","libra_types::proptest_types","",82,[[]]],[11,"arbitrary_with","libra_types::event","",32,[[]]],[11,"arbitrary_with","libra_types::contract_event","",26,[[]]],[11,"arbitrary_with","libra_types::transaction","",110,[[]]],[11,"arbitrary_with","libra_types::proptest_types","",83,[[]]],[11,"arbitrary_with","libra_types::transaction","",87,[[]]],[11,"arbitrary_with","libra_types::block_metadata","",22,[[]]],[11,"arbitrary_with","libra_types::proptest_types","",84,[[]]],[11,"arbitrary_with","libra_types::transaction::authenticator","",95,[[]]],[11,"arbitrary_with","libra_types::transaction","",86,[[]]],[11,"arbitrary_with","","",109,[[]]],[11,"arbitrary_with","","",90,[[]]],[11,"arbitrary_with","libra_types::validator_config","",116,[[]]],[11,"arbitrary_with","libra_types::validator_info","",117,[[]]],[11,"arbitrary_with","libra_types::validator_verifier","",122,[[]]],[11,"arbitrary_with","","",123,[[]]],[11,"arbitrary_with","libra_types::vm_error","",124,[[]]],[11,"to_bytes","libra_types::transaction::authenticator","",95,[[],["vec",3]]],[11,"type_params","libra_types::account_config::resources::balance","",12,[[],[["typetag",4],["vec",3]]]],[11,"new","libra_types::account_address","",131,[[],["accountaddress",3]]],[18,"LENGTH","","The number of bytes in an address.",131,null],[18,"DEFAULT","","",131,null],[11,"random","","",131,[[],["accountaddress",3]]],[11,"short_str","","",131,[[],["string",3]]],[11,"to_vec","","",131,[[],["vec",3]]],[11,"from_hex_literal","","",131,[[],[["accountaddress",3],["error",3],["result",4]]]],[11,"from_identity_public_key","","",131,[[["publickey",3]],["accountaddress",3]]],[11,"value_strategy","libra_types::write_set","",128,[[]]],[11,"deletion_strategy","","",128,[[]]],[11,"script_strategy","libra_types::transaction","",105,[[]]],[11,"module_strategy","","",105,[[]]],[11,"write_set_strategy","","",105,[[]]],[11,"genesis_strategy","","",105,[[]]],[11,"script_strategy","","",88,[[]]],[11,"module_strategy","","",88,[[]]],[11,"write_set_strategy","","",88,[[]]],[11,"genesis_strategy","","Similar to `write_set_strategy` except generates a valid…",88,[[]]]],"p":[[3,"AccessPath"],[3,"BurnEvent"],[3,"CancelBurnEvent"],[3,"MintEvent"],[3,"NewBlockEvent"],[3,"NewEpochEvent"],[3,"PreburnEvent"],[3,"ReceivedPaymentEvent"],[3,"SentPaymentEvent"],[3,"UpgradeEvent"],[3,"AccountResource"],[3,"AssociationCapabilityResource"],[3,"BalanceResource"],[3,"CurrencyInfoResource"],[3,"KeyRotationCapabilityResource"],[4,"AccountRole"],[3,"ParentVASP"],[3,"ChildVASP"],[3,"WithdrawCapabilityResource"],[3,"AccountState"],[3,"AccountStateWithProof"],[3,"BlockInfo"],[3,"BlockMetadata"],[3,"LibraBlockResource"],[3,"NewBlockEvent"],[3,"EventWithProof"],[4,"ContractEvent"],[3,"ContractEventV0"],[3,"EpochChangeProof"],[8,"Verifier"],[3,"EpochState"],[3,"EventKey"],[3,"EventHandle"],[3,"UpdateToLatestLedgerRequest"],[3,"UpdateToLatestLedgerResponse"],[4,"RequestItem"],[13,"GetAccountTransactionBySequenceNumber"],[13,"GetAccountState"],[13,"GetEventsByEventAccessPath"],[13,"GetTransactions"],[4,"ResponseItem"],[13,"GetAccountTransactionBySequenceNumber"],[13,"GetAccountState"],[13,"GetEventsByEventAccessPath"],[13,"GetTransactions"],[4,"LedgerInfoWithSignatures"],[3,"LedgerInfo"],[3,"LedgerInfoWithV0"],[3,"LibraTimestampResource"],[3,"LibraTimestamp"],[3,"MempoolStatus"],[4,"MempoolStatusCode"],[8,"MoveStorage"],[3,"LibraVersion"],[3,"VMConfig"],[4,"VMPublishingOption"],[3,"RegisteredCurrencies"],[3,"ValidatorSet"],[8,"ConfigStorage"],[8,"OnChainConfig"],[3,"ConfigID"],[3,"OnChainConfigPayload"],[3,"ConfigurationResource"],[3,"InMemoryAccumulator"],[3,"AccumulatorProof"],[3,"SparseMerkleProof"],[3,"AccumulatorConsistencyProof"],[3,"AccumulatorRangeProof"],[3,"SparseMerkleRangeProof"],[3,"TransactionInfoWithProof"],[3,"AccountStateProof"],[3,"EventProof"],[3,"TransactionListProof"],[3,"AccumulatorExtensionProof"],[4,"NodeDirection"],[3,"Position"],[3,"FrozenSubTreeIterator"],[3,"FrozenSubtreeSiblingIterator"],[3,"MerkleTreeInternalNode"],[3,"SparseMerkleLeafNode"],[3,"RawTransactionGen"],[3,"SignatureCheckedTransactionGen"],[3,"ContractEventGen"],[3,"TransactionToCommitGen"],[3,"LedgerInfoWithSignaturesGen"],[4,"TransactionArgument"],[3,"TransactionWithProof"],[3,"TransactionListWithProof"],[4,"TransactionPayload"],[4,"TransactionStatus"],[4,"Transaction"],[4,"Scheme"],[4,"TransactionAuthenticator"],[13,"Ed25519"],[13,"MultiEd25519"],[3,"AuthenticationKey"],[3,"AuthenticationKeyPreimage"],[3,"ChangeSet"],[8,"TransactionSigner"],[3,"Module"],[3,"Script"],[3,"ScriptABI"],[3,"ArgumentABI"],[3,"TypeArgumentABI"],[3,"RawTransaction"],[3,"SignatureCheckedTransaction"],[3,"SignedTransaction"],[3,"VMValidatorResult"],[3,"TransactionOutput"],[3,"TransactionInfo"],[3,"TransactionToCommit"],[4,"TrustedStateChange"],[13,"Version"],[13,"Epoch"],[3,"TrustedState"],[3,"ValidatorConfigResource"],[3,"ValidatorConfig"],[3,"ValidatorInfo"],[3,"ValidatorSigner"],[4,"VerifyError"],[13,"TooLittleVotingPower"],[13,"TooManySignatures"],[3,"ValidatorConsensusInfo"],[3,"ValidatorVerifier"],[3,"VMStatus"],[4,"StatusType"],[4,"StatusCode"],[3,"Waypoint"],[4,"WriteOp"],[3,"WriteSet"],[3,"WriteSetMut"],[3,"AccountAddress"],[3,"AccountStateBlob"],[3,"AccountStateBlobHasher"],[3,"ContractEventHasher"],[3,"ContractEventV0Hasher"],[3,"LedgerInfoHasher"],[3,"SparseMerkleLeafNodeHasher"],[3,"AncestorSiblingIterator"],[3,"AncestorIterator"],[3,"AccountInfoUniverse"],[3,"RawTransactionHasher"],[3,"TransactionInfoHasher"],[3,"TransactionHasher"],[3,"AuthenticationKeyHasher"],[3,"Ledger2WaypointConverterHasher"]]},\
"libra_vault_client":{"doc":"","i":[[3,"Client","libra_vault_client","Client provides a client around the restful interface to a…",null,null],[3,"KeyBackup","","Key backup / restore format Example: { \\\"policy\\\":{…",null,null],[3,"KeyBackupPolicy","","",null,null],[3,"KeyBackupInfo","","",null,null],[3,"BackupInfo","","",null,null],[3,"ReadResponse","","Provides a simple wrapper for all read APIs.",null,null],[12,"creation_time","","",0,null],[12,"value","","",0,null],[12,"version","","",0,null],[3,"Policy","","This data structure is used to represent both policies…",null,null],[3,"PolicyPaths","","Represents the policy for a given path.",null,null],[3,"PathPolicy","","Represents the set of capabilities used within a policy.",null,null],[4,"Error","","",null,null],[13,"HttpError","","",1,null],[13,"InternalError","","",1,null],[13,"MissingField","","",1,null],[13,"NotFound","","",1,null],[13,"SerializationError","","",1,null],[4,"Capability","","The various set of capabilities available to a policy…",null,null],[13,"Create","","",2,null],[13,"Delete","","",2,null],[13,"Deny","","",2,null],[13,"List","","",2,null],[13,"Read","","",2,null],[13,"Sudo","","",2,null],[13,"Update","","",2,null],[11,"new","","",3,[[["string",3],["option",4]]]],[11,"delete_policy","","",3,[[],[["error",4],["result",4]]]],[11,"list_policies","","",3,[[],[["error",4],["vec",3],["result",4]]]],[11,"read_policy","","Retrieves the policy at the given policy name.",3,[[],[["result",4],["policy",3],["error",4]]]],[11,"set_policy","","Create a new policy in Vault, see the explanation for…",3,[[["policy",3]],[["error",4],["result",4]]]],[11,"create_token","","Creates a new token or identity for accessing Vault. The…",3,[[["vec",3]],[["string",3],["error",4],["result",4]]]],[11,"list_secrets","","List all stored secrets",3,[[],[["error",4],["vec",3],["result",4]]]],[11,"delete_secret","","Delete a specific secret store",3,[[],[["error",4],["result",4]]]],[11,"read_secret","","Read a key/value pair from a given secret store.",3,[[],[["result",4],["readresponse",3],["error",4]]]],[11,"create_ed25519_key","","",3,[[],[["error",4],["result",4]]]],[11,"delete_key","","",3,[[],[["error",4],["result",4]]]],[11,"export_ed25519_key","","",3,[[["option",4]],[["result",4],["ed25519privatekey",3],["error",4]]]],[11,"import_ed25519_key","","",3,[[["ed25519privatekey",3]],[["error",4],["result",4]]]],[11,"list_keys","","",3,[[],[["error",4],["vec",3],["result",4]]]],[11,"read_ed25519_key","","",3,[[],[["error",4],["result",4],["vec",3]]]],[11,"rotate_key","","",3,[[],[["error",4],["result",4]]]],[11,"sign_ed25519","","",3,[[["option",4]],[["ed25519signature",3],["error",4],["result",4]]]],[11,"write_secret","","Create or update a key/value pair in a given secret store.",3,[[],[["error",4],["result",4]]]],[11,"unsealed","","Returns whether or not the vault is unsealed (can be read…",3,[[],[["result",4],["error",4]]]],[11,"new","","",4,[[["ed25519privatekey",3]]]],[11,"new","","",0,[[["string",3]]]],[11,"new","","",5,[[]]],[11,"add_policy","","",5,[[["capability",4],["vec",3]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"initialize","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"initialize","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"vzip","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"initialize","","",8,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"initialize","","",5,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"initialize","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"initialize","","",10,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",1,[[["decodeerror",4]]]],[11,"from","","",1,[[["cryptomaterialerror",4]]]],[11,"from","","",1,[[["error",3]]]],[11,"from","","",1,[[["response",3]]]],[11,"from","","",1,[[["error",3]]]],[11,"clone","","",5,[[],["policy",3]]],[11,"clone","","",9,[[],["policypaths",3]]],[11,"clone","","",10,[[],["pathpolicy",3]]],[11,"clone","","",2,[[],["capability",4]]],[11,"default","","",6,[[],["keybackuppolicy",3]]],[11,"default","","",7,[[],["keybackupinfo",3]]],[11,"default","","",8,[[],["backupinfo",3]]],[11,"default","","",5,[[],["policy",3]]],[11,"default","","",9,[[],["policypaths",3]]],[11,"default","","",10,[[],["pathpolicy",3]]],[11,"eq","","",1,[[["error",4]]]],[11,"ne","","",1,[[["error",4]]]],[11,"eq","","",4,[[["keybackup",3]]]],[11,"ne","","",4,[[["keybackup",3]]]],[11,"eq","","",6,[[["keybackuppolicy",3]]]],[11,"ne","","",6,[[["keybackuppolicy",3]]]],[11,"eq","","",7,[[["keybackupinfo",3]]]],[11,"ne","","",7,[[["keybackupinfo",3]]]],[11,"eq","","",8,[[["backupinfo",3]]]],[11,"ne","","",8,[[["backupinfo",3]]]],[11,"eq","","",5,[[["policy",3]]]],[11,"ne","","",5,[[["policy",3]]]],[11,"eq","","",9,[[["policypaths",3]]]],[11,"ne","","",9,[[["policypaths",3]]]],[11,"eq","","",10,[[["pathpolicy",3]]]],[11,"ne","","",10,[[["pathpolicy",3]]]],[11,"eq","","",2,[[["capability",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"try_from","","",5,[[["value",4]],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]]],"p":[[3,"ReadResponse"],[4,"Error"],[4,"Capability"],[3,"Client"],[3,"KeyBackup"],[3,"Policy"],[3,"KeyBackupPolicy"],[3,"KeyBackupInfo"],[3,"BackupInfo"],[3,"PolicyPaths"],[3,"PathPolicy"]]},\
"libra_vm":{"doc":"The VM runtime","i":[[3,"LibraVM","libra_vm","A wrapper to make VMRuntime standalone and thread safe.",null,null],[0,"data_cache","","Scratchpad for on chain values during the execution.",null,null],[3,"StateViewCache","libra_vm::data_cache","A local cache for a given a `StateView`. The cache is…",null,null],[3,"RemoteStorage","","",null,null],[11,"new","","Create a `StateViewCache` give a `StateView`. Hold updates…",0,[[["stateview",8]]]],[11,"new","","",1,[[["stateview",8]]]],[11,"new","libra_vm","",2,[[]]],[11,"init_with_config","","",2,[[["libraversion",3],["vmconfig",3]]]],[11,"internals","","Provides access to some internal APIs of the Libra VM.",2,[[],["libravminternals",3]]],[11,"load_configs","","",2,[[["stateview",8]]]],[11,"get_gas_schedule","","",2,[[],[["vmresult",6],["costtable",3]]]],[11,"get_libra_version","","",2,[[],[["vmresult",6],["libraversion",3]]]],[11,"failed_transaction_cleanup","","Generates a transaction output for a transaction that…",2,[[["transactionmetadata",3],["stateviewcache",3],["costtable",3],["gasunits",3],["identstr",3],["vmstatus",3],["gascarrier",6]],["transactionoutput",3]]],[0,"transaction_metadata","","",null,null],[3,"TransactionMetadata","libra_vm::transaction_metadata","",null,null],[12,"sender","","",3,null],[12,"authentication_key_preimage","","",3,null],[12,"sequence_number","","",3,null],[12,"max_gas_amount","","",3,null],[12,"gas_unit_price","","",3,null],[12,"transaction_size","","",3,null],[12,"expiration_time","","",3,null],[11,"new","","",3,[[["signedtransaction",3]]]],[11,"max_gas_amount","","",3,[[],[["gasunits",3],["gascarrier",6]]]],[11,"gas_unit_price","","",3,[[],[["gasprice",3],["gascarrier",6]]]],[11,"sender","","",3,[[],["accountaddress",3]]],[11,"authentication_key_preimage","","",3,[[]]],[11,"sequence_number","","",3,[[]]],[11,"transaction_size","","",3,[[],[["gascarrier",6],["abstractmemorysize",3]]]],[11,"expiration_time","","",3,[[]]],[0,"system_module_names","libra_vm","Names of modules, functions, and types used by Libra System.",null,null],[5,"association_capability_struct_tag","libra_vm::system_module_names","",null,[[],["structtag",3]]],[5,"association_module_publishing_capability_struct_tag","","",null,[[],["structtag",3]]],[7,"LIBRA_TRANSACTION_TIMEOUT","","The ModuleId for the LibraTransactionTimeout module",null,null],[7,"EVENT_MODULE","","The ModuleId for the Event",null,null],[7,"VALIDATOR_CONFIG_MODULE","","The ModuleId for the validator config",null,null],[7,"LIBRA_SYSTEM_MODULE","","The ModuleId for the libra system module",null,null],[7,"LIBRA_WRITESET_MANAGER_MODULE","","The ModuleId for the libra writeset manager module",null,null],[7,"LIBRA_BLOCK_MODULE","","The ModuleId for the libra block module",null,null],[7,"LIBRA_CONFIG_MODULE","","",null,null],[7,"GAS_SCHEDULE_MODULE","","The ModuleId for the gas schedule module",null,null],[7,"ASSOCIATION_MODULE","","",null,null],[7,"CREATE_ACCOUNT_NAME","","",null,null],[7,"PROLOGUE_NAME","","",null,null],[7,"WRITESET_EPILOGUE_NAME","","",null,null],[7,"SUCCESS_EPILOGUE_NAME","","",null,null],[7,"FAILURE_EPILOGUE_NAME","","",null,null],[7,"BUMP_SEQUENCE_NUMBER_NAME","","",null,null],[7,"BLOCK_PROLOGUE","","",null,null],[7,"DISTRIBUTE_TXN_FEES","","",null,null],[7,"ASSOCIATION_CAPABILITY_STRUCT_NAME","","",null,null],[7,"BASE_ASSOCIATION_CAPABILITY_TYPE_NAME","","",null,null],[7,"ASSOCIATION_MODULE_PUBLISHING_TYPE_NAME","","",null,null],[8,"VMValidator","libra_vm","This trait describes the VM\'s validation interfaces.",null,null],[10,"validate_transaction","","Executes the prologue of the Libra Account and verifies…",4,[[["stateview",8],["signedtransaction",3]],["vmvalidatorresult",3]]],[8,"VMExecutor","","This trait describes the VM\'s execution interface.",null,null],[10,"execute_block","","Executes a block of transactions and returns output for…",5,[[["vec",3],["stateview",8],["transaction",4]],[["vec",3],["result",4],["vmstatus",3]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","libra_vm::data_cache","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","libra_vm::transaction_metadata","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"validate_transaction","libra_vm","Determine if a transaction is valid. Will return `None` if…",2,[[["stateview",8],["signedtransaction",3]],["vmvalidatorresult",3]]],[11,"execute_block","","Execute a block of `transactions`. The output vector will…",2,[[["vec",3],["stateview",8],["transaction",4]],[["vmresult",6],["vec",3]]]],[11,"clone","","",2,[[],["libravm",3]]],[11,"default","libra_vm::transaction_metadata","",3,[[]]],[11,"get","libra_vm::data_cache","",0,[[["accesspath",3]],[["vmresult",6],["option",4]]]],[11,"get","","",1,[[["accesspath",3]],[["vmresult",6],["option",4]]]]],"p":[[3,"StateViewCache"],[3,"RemoteStorage"],[3,"LibraVM"],[3,"TransactionMetadata"],[8,"VMValidator"],[8,"VMExecutor"]]},\
"libra_wallet":{"doc":"","i":[[3,"Mnemonic","libra_wallet","Mnemonic seed for deterministic key derivation based on…",null,null],[3,"WalletLibrary","","WalletLibrary contains all the information needed to…",null,null],[0,"io_utils","","Utils for read/write A module to generate, store and load…",null,null],[5,"recover","libra_wallet::io_utils","Recover wallet from the path specified.",null,[[],[["walletlibrary",3],["result",6]]]],[5,"write_recovery","","Write wallet seed to file.",null,[[["walletlibrary",3]],["result",6]]],[17,"DELIMITER","","Delimiter used to ser/deserialize account data.",null,null],[11,"from","libra_wallet","Generate mnemonic from string.",0,[[],[["result",6],["mnemonic",3]]]],[11,"mnemonic","","Generate mnemonic from entropy byte-array.",0,[[],[["result",6],["mnemonic",3]]]],[11,"write","","Write mnemonic to output_file_path.",0,[[["path",3]],["result",6]]],[11,"read","","Read mnemonic from input_file_path.",0,[[["path",3]],["result",6]]],[11,"new","","Constructor that generates a Mnemonic from OS randomness…",1,[[]]],[11,"new_from_mnemonic","","Constructor that instantiates a new WalletLibrary from…",1,[[["mnemonic",3]]]],[11,"mnemonic","","Function that returns the string representation of the…",1,[[],["string",3]]],[11,"write_recovery","","Function that writes the wallet Mnemonic to file NOTE:…",1,[[["path",3]],["result",6]]],[11,"recover","","Recover wallet from input_file_path",1,[[["path",3]],[["walletlibrary",3],["result",6]]]],[11,"key_leaf","","Get the current ChildNumber in u64 format",1,[[]]],[11,"generate_addresses","","Function that iterates from the current key_leaf until the…",1,[[],["result",6]]],[11,"new_address_at_child_number","","Function that allows to get the address of a particular…",1,[[["childnumber",3]],[["result",6],["accountaddress",3]]]],[11,"new_address","","Function that generates a new key and adds it to the…",1,[[],["result",6]]],[11,"get_addresses","","Returns a list of all addresses controlled by this wallet…",1,[[],[["result",6],["vec",3]]]],[11,"sign_txn","","Simple public function that allows to sign a Libra…",1,[[["rawtransaction",3]],[["result",6],["signedtransaction",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"sign_txn","","",1,[[["rawtransaction",3]],[["result",6],["error",3],["signedtransaction",3]]]]],"p":[[3,"Mnemonic"],[3,"WalletLibrary"]]},\
"libra_workspace_hack":{"doc":"","i":[],"p":[]},\
"libradb":{"doc":"This crate provides [`LibraDB`] which represents physical…","i":[[3,"LibraDB","libradb","This holds a handle to the underlying DB responsible for…",null,null],[5,"test_save_blocks_impl","","",null,[[["vec",3]]]],[0,"test_helper","","This module provides reusable helpers in tests.",null,null],[5,"arb_blocks_to_commit_impl","libradb::test_helper","This returns a `proptest` `Strategy` that yields an…",null,[[]]],[5,"arb_blocks_to_commit","","",null,[[]]],[5,"arb_mock_genesis","","",null,[[]]],[0,"backup","libradb","",null,null],[3,"BackupHandler","libradb::backup","`BackupHandler` provides functionalities for LibraDB data…",null,null],[11,"get_transaction_iter","","Gets an iterator that yields a range of transactions.",0,[[["version",6]],[["result",6],["transactioniter",3]]]],[11,"get_transaction_info_iter","","Gets an iterator that yields a range of transaction infos.",0,[[["version",6]],[["transactioninfoiter",3],["result",6]]]],[11,"get_account_iter","","Gets an iterator which can yield all accounts in the state…",0,[[["version",6]],[["result",6],["box",3]]]],[11,"get_account_state_range_proof","","Gets the proof that proves a range of accounts.",0,[[["version",6],["hashvalue",3]],[["sparsemerklerangeproof",3],["result",6]]]],[11,"get_latest_state_root","","Gets the latest version and state root hash.",0,[[],["result",6]]],[11,"get_state_root_proof","","Gets the proof of the state root at specified version.…",0,[[["version",6]],["result",6]]],[0,"errors","libradb","This module defines error types used by `LibraDB`.",null,null],[4,"LibraDbError","libradb::errors","This enum defines errors commonly used among `LibraDB` APIs.",null,null],[13,"NotFound","","A requested item is not found.",1,null],[13,"TooManyRequested","","Requested too many items.",1,null],[0,"schema","libradb","This module defines representation of Libra core data…",null,null],[0,"fuzzing","libradb::schema","",null,null],[5,"fuzz_decode","libradb::schema::fuzzing","",null,[[]]],[7,"LIBRA_STORAGE_CF_SIZE_BYTES","libradb","",null,null],[7,"LIBRA_STORAGE_COMMITTED_TXNS","","",null,null],[7,"LIBRA_STORAGE_LATEST_TXN_VERSION","","",null,null],[11,"open","","",2,[[["asref",8],["option",4],["path",3],["clone",8]],["result",6]]],[11,"new_for_test","","This opens db in non-readonly mode, without the pruner.",2,[[["asref",8],["clone",8],["path",3]]]],[11,"get_epoch_change_ledger_infos","","Returns ledger infos reflecting epoch bumps starting with…",2,[[],["result",6]]],[11,"get_transaction_with_proof","","",2,[[["version",6]],[["result",6],["transactionwithproof",3]]]],[11,"update_to_latest_ledger","","This backs the `UpdateToLatestLedger` public read API…",2,[[["vec",3],["requestitem",4],["version",6]],["result",6]]],[11,"get_backup_handler","","Gets an instance of `BackupHandler` for data backup purpose.",2,[[],["backuphandler",3]]],[11,"restore_account_state","","",2,[[["hashvalue",3],["version",6]],["result",6]]],[11,"get_state_restore_receiver","","",2,[[["hashvalue",3],["version",6]],[["jellyfishmerklerestore",3],["result",6]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","libradb::backup","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","libradb::errors","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clone","libradb::backup","",0,[[],["backuphandler",3]]],[11,"fmt","libradb::errors","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"update_to_latest_ledger","libradb","",2,[[["vec",3],["requestitem",4],["version",6]],["result",6]]],[11,"get_epoch_change_ledger_infos","","",2,[[],[["result",6],["epochchangeproof",3]]]],[11,"get_latest_account_state","","",2,[[["accountaddress",3]],[["option",4],["result",6]]]],[11,"get_latest_ledger_info","","",2,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"get_txn_by_account","","Returns a transaction that is the `seq_num`-th one…",2,[[["version",6],["accountaddress",3]],[["option",4],["result",6]]]],[11,"get_transactions","","Gets a batch of transactions for the purpose of…",2,[[["version",6]],[["transactionlistwithproof",3],["result",6]]]],[11,"get_events","","",2,[[["eventkey",3]],[["result",6],["vec",3]]]],[11,"get_ledger_info","","",2,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"get_state_proof_with_ledger_info","","",2,[[["ledgerinfowithsignatures",4]],["result",6]]],[11,"get_state_proof","","",2,[[],["result",6]]],[11,"get_account_state_with_proof","","",2,[[["version",6],["accountaddress",3]],[["result",6],["accountstatewithproof",3]]]],[11,"get_startup_info","","",2,[[],[["result",6],["option",4]]]],[11,"get_account_state_with_proof_by_version","","",2,[[["version",6],["accountaddress",3]],["result",6]]],[11,"get_latest_state_root","","",2,[[],["result",6]]],[11,"get_latest_tree_state","","",2,[[],[["result",6],["treestate",3]]]],[11,"save_transactions","","`first_version` is the version of the first transaction in…",2,[[["ledgerinfowithsignatures",4],["option",4],["version",6]],["result",6]]]],"p":[[3,"BackupHandler"],[4,"LibraDbError"],[3,"LibraDB"]]},\
"memsocket":{"doc":"","i":[[3,"MemoryListener","memsocket","An in-memory socket server, listening for connections.",null,null],[3,"Incoming","","Stream returned by the `MemoryListener::incoming` function…",null,null],[3,"MemorySocket","","An in-memory stream between two local sockets.",null,null],[11,"bind","","Creates a new `MemoryListener` which will be bound to the…",0,[[],["result",6]]],[11,"local_addr","","Returns the local address that this listener is bound to.",0,[[]]],[11,"incoming","","Consumes this listener, returning a stream of the sockets…",0,[[],["incoming",3]]],[11,"new_pair","","Construct both sides of an in-memory socket.",1,[[]]],[11,"connect","","Create a new in-memory Socket connected to the specified…",1,[[],[["memorysocket",3],["result",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"try_poll_next","","",2,[[["pin",3],["context",3]],[["option",4],["poll",4]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"drop","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"poll_next","","",2,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",1,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_write","","Attempt to write bytes from `buf` into the outgoing channel.",1,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_flush","","Attempt to flush the channel. Cannot Fail.",1,[[["context",3],["pin",3]],[["poll",4],["result",6]]]],[11,"poll_close","","Attempt to close the channel. Cannot Fail.",1,[[["context",3],["pin",3]],[["poll",4],["result",6]]]]],"p":[[3,"MemoryListener"],[3,"MemorySocket"],[3,"Incoming"]]},\
"move_core_types":{"doc":"Core types for Move.","i":[[0,"account_address","move_core_types","",null,null],[3,"AccountAddress","move_core_types::account_address","A struct that represents an account address.",null,null],[3,"AccountAddressHasher","","",null,null],[11,"new","","",0,[[]]],[18,"LENGTH","","The number of bytes in an address.",0,null],[18,"DEFAULT","","",0,null],[11,"random","","",0,[[]]],[11,"short_str","","",0,[[],["string",3]]],[11,"to_vec","","",0,[[],["vec",3]]],[11,"from_hex_literal","","",0,[[],["result",6]]],[11,"from_identity_public_key","","",0,[[["publickey",3]]]],[0,"gas_schedule","move_core_types","This module lays out the basic abstract costing schedule…",null,null],[3,"AbstractMemorySize","move_core_types::gas_schedule","A newtype wrapper that represents the (abstract) memory…",null,null],[3,"GasUnits","","A newtype wrapper around the underlying carrier for the…",null,null],[3,"GasPrice","","A newtype wrapper around the gas price for each unit of…",null,null],[3,"GasConstants","","",null,null],[12,"global_memory_per_byte_cost","","The cost per-byte written to global storage. TODO: Fill…",1,null],[12,"global_memory_per_byte_write_cost","","The cost per-byte written to storage. TODO: Fill this in…",1,null],[12,"min_transaction_gas_units","","We charge one unit of gas per-byte for the first 600 bytes",1,null],[12,"large_transaction_cutoff","","Any transaction over this size will be charged…",1,null],[12,"instrinsic_gas_per_byte","","The units of gas that should be charged per byte for every…",1,null],[12,"maximum_number_of_gas_units","","1 nanosecond should equal one unit of computational gas.…",1,null],[12,"min_price_per_gas_unit","","The minimum gas price that a transaction can be submitted…",1,null],[12,"max_price_per_gas_unit","","The maximum gas unit price that a transaction can be…",1,null],[12,"max_transaction_size_in_bytes","","",1,null],[3,"CostTable","","The cost tables, keyed by the serialized form of the…",null,null],[12,"instruction_table","","",2,null],[12,"native_table","","",2,null],[12,"gas_constants","","",2,null],[3,"GasCost","","The `GasCost` tracks: - instruction cost: how much…",null,null],[12,"instruction_gas","","",3,null],[12,"memory_gas","","",3,null],[5,"words_in","","Computes the number of words rounded up",null,[[["abstractmemorysize",3],["gascarrier",6]],[["abstractmemorysize",3],["gascarrier",6]]]],[6,"GasCarrier","","The underlying carrier for gas-related units and costs.…",null,null],[17,"ZERO_GAS_UNITS","","Zero cost.",null,null],[17,"MAX_ABSTRACT_MEMORY_SIZE","","The maximum size representable by AbstractMemorySize",null,null],[17,"WORD_SIZE","","The word size that we charge by",null,null],[17,"CONST_SIZE","","The size in words for a non-string or address constant on…",null,null],[17,"REFERENCE_SIZE","","The size in words for a reference on the stack",null,null],[17,"STRUCT_SIZE","","The size of a struct in words",null,null],[17,"DEFAULT_ACCOUNT_SIZE","","For V1 all accounts will be 32 words",null,null],[17,"LARGE_TRANSACTION_CUTOFF","","Any transaction over this size will be charged…",null,null],[8,"GasAlgebra","","A trait encoding the operations permitted on the…",null,null],[10,"new","","Project a value into the gas algebra.",4,[[]]],[10,"get","","Get the carrier.",4,[[]]],[11,"map","","Map a function `f` of one argument over the underlying data.",4,[[["fn",8]]]],[11,"map2","","Map a function `f` of two arguments over the underlying…",4,[[["fn",8]]]],[11,"app","","Apply a function `f` of two arguments to the carrier.…",4,[[["fn",8]]]],[11,"unitary_cast","","We allow casting between GasAlgebras as long as they have…",4,[[],["gasalgebra",8]]],[11,"add","","Add the two `GasAlgebra`s together.",4,[[]]],[11,"sub","","Subtract one `GasAlgebra` from the other.",4,[[]]],[11,"mul","","Multiply two `GasAlgebra`s together.",4,[[]]],[11,"div","","Divide one `GasAlgebra` by the other.",4,[[]]],[11,"instruction_cost","","",2,[[],["gascost",3]]],[11,"native_cost","","",2,[[],["gascost",3]]],[11,"new","","",3,[[["gascarrier",6]]]],[11,"total","","Take a GasCost from our gas schedule and convert it to a…",3,[[],[["gascarrier",6],["gasunits",3]]]],[0,"identifier","move_core_types","An identifier is the name of an entity (module, resource,…",null,null],[3,"Identifier","move_core_types::identifier","An owned identifier.",null,null],[3,"IdentStr","","A borrowed identifier.",null,null],[11,"new","","Creates a new `Identifier` instance.",5,[[],["result",6]]],[11,"is_valid","","Returns true if this string is a valid identifier.",5,[[]]],[11,"is_self","","Returns if this identifier is \\\"\\\". TODO: remove once we…",5,[[]]],[11,"from_utf8","","Converts a vector of bytes to an `Identifier`.",5,[[["vec",3]],["result",6]]],[11,"as_ident_str","","Creates a borrowed version of `self`.",5,[[],["identstr",3]]],[11,"into_string","","Converts this `Identifier` into a `String`.",5,[[],["string",3]]],[11,"into_bytes","","Converts this `Identifier` into a UTF-8-encoded byte…",5,[[],["vec",3]]],[11,"new","","",6,[[],[["identstr",3],["result",6]]]],[11,"is_valid","","Returns true if this string is a valid identifier.",6,[[]]],[11,"len","","Returns the length of `self` in bytes.",6,[[]]],[11,"is_empty","","Returns `true` if `self` has a length of zero bytes.",6,[[]]],[11,"as_str","","Converts `self` to a `&str`.",6,[[]]],[11,"as_bytes","","Converts `self` to a byte slice.",6,[[]]],[0,"language_storage","move_core_types","",null,null],[3,"StructTag","move_core_types::language_storage","",null,null],[12,"address","","",7,null],[12,"module","","",7,null],[12,"name","","",7,null],[12,"type_params","","",7,null],[3,"StructTagHasher","","",null,null],[3,"ResourceKey","","Represents the intitial key into global storage where we…",null,null],[3,"ModuleId","","Represents the initial key into global storage where we…",null,null],[3,"ModuleIdHasher","","",null,null],[4,"TypeTag","","",null,null],[13,"Bool","","",8,null],[13,"U8","","",8,null],[13,"U64","","",8,null],[13,"U128","","",8,null],[13,"Address","","",8,null],[13,"Signer","","",8,null],[13,"Vector","","",8,null],[13,"Struct","","",8,null],[17,"CODE_TAG","","",null,null],[17,"RESOURCE_TAG","","",null,null],[17,"CORE_CODE_ADDRESS","","",null,null],[11,"access_vector","","",7,[[],["vec",3]]],[11,"address","","",9,[[],["accountaddress",3]]],[11,"type_","","",9,[[],["structtag",3]]],[11,"new","","",9,[[["accountaddress",3],["structtag",3]]]],[11,"new","","",10,[[["accountaddress",3],["identifier",3]]]],[11,"name","","",10,[[],["identstr",3]]],[11,"address","","",10,[[],["accountaddress",3]]],[11,"access_vector","","",10,[[],["vec",3]]],[0,"move_resource","move_core_types","",null,null],[8,"MoveResource","move_core_types::move_resource","",null,null],[18,"MODULE_NAME","","",11,null],[18,"STRUCT_NAME","","",11,null],[11,"module_identifier","","",11,[[],["identifier",3]]],[11,"struct_identifier","","",11,[[],["identifier",3]]],[11,"type_params","","",11,[[],[["vec",3],["typetag",4]]]],[11,"struct_tag","","",11,[[],["structtag",3]]],[11,"resource_path","","",11,[[],["vec",3]]],[0,"parser","move_core_types","",null,null],[5,"parse_type_tags","move_core_types::parser","",null,[[],[["result",6],["vec",3]]]],[5,"parse_transaction_arguments","","",null,[[],[["result",6],["vec",3]]]],[5,"parse_transaction_argument","","",null,[[],[["result",6],["transactionargument",4]]]],[0,"proptest_types","move_core_types","",null,null],[0,"transaction_argument","","",null,null],[4,"TransactionArgument","move_core_types::transaction_argument","",null,null],[13,"U8","","",12,null],[13,"U64","","",12,null],[13,"U128","","",12,null],[13,"Address","","",12,null],[13,"U8Vector","","",12,null],[13,"Bool","","",12,null],[0,"value","move_core_types","",null,null],[3,"MoveStruct","move_core_types::value","",null,null],[3,"MoveStructLayout","","",null,null],[4,"MoveValue","","",null,null],[13,"U8","","",13,null],[13,"U64","","",13,null],[13,"U128","","",13,null],[13,"Bool","","",13,null],[13,"Address","","",13,null],[13,"Vector","","",13,null],[13,"Struct","","",13,null],[13,"Signer","","",13,null],[4,"MoveTypeLayout","","",null,null],[13,"Bool","","",14,null],[13,"U8","","",14,null],[13,"U64","","",14,null],[13,"U128","","",14,null],[13,"Address","","",14,null],[13,"Vector","","",14,null],[13,"Struct","","",14,null],[13,"Signer","","",14,null],[11,"simple_deserialize","","",13,[[["movetypelayout",4]],["aresult",6]]],[11,"simple_serialize","","",13,[[],[["vec",3],["option",4]]]],[11,"vector_u8","","",13,[[["vec",3]]]],[11,"new","","",15,[[["movevalue",4],["vec",3]]]],[11,"simple_deserialize","","",15,[[["movestructlayout",3]],["aresult",6]]],[11,"fields","","",15,[[]]],[11,"into_inner","","",15,[[],[["movevalue",4],["vec",3]]]],[11,"new","","",16,[[["vec",3],["movetypelayout",4]]]],[11,"fields","","",16,[[]]],[11,"from","move_core_types::account_address","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"encode_hex","","",0,[[]]],[11,"encode_hex_upper","","",0,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"initialize","","",17,[[]]],[11,"from","move_core_types::gas_schedule","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"test_only_hash","","",18,[[],["hashvalue",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"test_only_hash","","",19,[[],["hashvalue",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"test_only_hash","","",20,[[],["hashvalue",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","move_core_types::identifier","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","move_core_types::language_storage","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"clear","","",21,[[]]],[11,"initialize","","",21,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"clear","","",22,[[]]],[11,"initialize","","",22,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"vzip","","",8,[[]]],[11,"from","move_core_types::transaction_argument","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"test_only_hash","","",12,[[],["hashvalue",3]]],[11,"vzip","","",12,[[]]],[11,"from","move_core_types::value","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"test_only_hash","","",15,[[],["hashvalue",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"test_only_hash","","",13,[[],["hashvalue",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"new","move_core_types::gas_schedule","",18,[[["gascarrier",6]]]],[11,"get","","",18,[[],["gascarrier",6]]],[11,"new","","",19,[[["gascarrier",6]]]],[11,"get","","",19,[[],["gascarrier",6]]],[11,"new","","",20,[[["gascarrier",6]]]],[11,"get","","",20,[[],["gascarrier",6]]],[11,"as_ref","move_core_types::account_address","",0,[[]]],[11,"as_ref","move_core_types::identifier","",5,[[],["identstr",3]]],[11,"from","","",5,[[["identstr",3]]]],[11,"clone","move_core_types::account_address","",0,[[],["accountaddress",3]]],[11,"clone","","",17,[[],["accountaddresshasher",3]]],[11,"clone","move_core_types::gas_schedule","",18,[[],["abstractmemorysize",3]]],[11,"clone","","",19,[[],["gasunits",3]]],[11,"clone","","",20,[[],["gasprice",3]]],[11,"clone","","",1,[[],["gasconstants",3]]],[11,"clone","","",2,[[],["costtable",3]]],[11,"clone","","",3,[[],["gascost",3]]],[11,"clone","move_core_types::identifier","",5,[[],["identifier",3]]],[11,"clone","move_core_types::language_storage","",8,[[],["typetag",4]]],[11,"clone","","",7,[[],["structtag",3]]],[11,"clone","","",21,[[],["structtaghasher",3]]],[11,"clone","","",9,[[],["resourcekey",3]]],[11,"clone","","",10,[[],["moduleid",3]]],[11,"clone","","",22,[[],["moduleidhasher",3]]],[11,"clone","move_core_types::transaction_argument","",12,[[],["transactionargument",4]]],[11,"default","move_core_types::account_address","",17,[[]]],[11,"default","","",0,[[],["accountaddress",3]]],[11,"default","move_core_types::gas_schedule","",1,[[]]],[11,"default","move_core_types::language_storage","",21,[[]]],[11,"default","","",22,[[]]],[11,"cmp","move_core_types::account_address","",0,[[["accountaddress",3]],["ordering",4]]],[11,"cmp","move_core_types::identifier","",5,[[["identifier",3]],["ordering",4]]],[11,"cmp","","",6,[[["identstr",3]],["ordering",4]]],[11,"cmp","move_core_types::language_storage","",8,[[["typetag",4]],["ordering",4]]],[11,"cmp","","",7,[[["structtag",3]],["ordering",4]]],[11,"cmp","","",9,[[["resourcekey",3]],["ordering",4]]],[11,"cmp","","",10,[[["moduleid",3]],["ordering",4]]],[11,"eq","move_core_types::account_address","",0,[[["accountaddress",3]]]],[11,"ne","","",0,[[["accountaddress",3]]]],[11,"eq","move_core_types::gas_schedule","",18,[[["abstractmemorysize",3]]]],[11,"ne","","",18,[[["abstractmemorysize",3]]]],[11,"eq","","",19,[[["gasunits",3]]]],[11,"ne","","",19,[[["gasunits",3]]]],[11,"eq","","",20,[[["gasprice",3]]]],[11,"ne","","",20,[[["gasprice",3]]]],[11,"eq","","",1,[[["gasconstants",3]]]],[11,"ne","","",1,[[["gasconstants",3]]]],[11,"eq","","",2,[[["costtable",3]]]],[11,"ne","","",2,[[["costtable",3]]]],[11,"eq","","",3,[[["gascost",3]]]],[11,"ne","","",3,[[["gascost",3]]]],[11,"eq","move_core_types::identifier","",5,[[["identifier",3]]]],[11,"ne","","",5,[[["identifier",3]]]],[11,"eq","","",6,[[["identstr",3]]]],[11,"ne","","",6,[[["identstr",3]]]],[11,"eq","move_core_types::language_storage","",8,[[["typetag",4]]]],[11,"ne","","",8,[[["typetag",4]]]],[11,"eq","","",7,[[["structtag",3]]]],[11,"ne","","",7,[[["structtag",3]]]],[11,"eq","","",9,[[["resourcekey",3]]]],[11,"ne","","",9,[[["resourcekey",3]]]],[11,"eq","","",10,[[["moduleid",3]]]],[11,"ne","","",10,[[["moduleid",3]]]],[11,"eq","move_core_types::transaction_argument","",12,[[["transactionargument",4]]]],[11,"ne","","",12,[[["transactionargument",4]]]],[11,"eq","move_core_types::value","",15,[[["movestruct",3]]]],[11,"ne","","",15,[[["movestruct",3]]]],[11,"eq","","",13,[[["movevalue",4]]]],[11,"ne","","",13,[[["movevalue",4]]]],[11,"partial_cmp","move_core_types::account_address","",0,[[["accountaddress",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["accountaddress",3]]]],[11,"le","","",0,[[["accountaddress",3]]]],[11,"gt","","",0,[[["accountaddress",3]]]],[11,"ge","","",0,[[["accountaddress",3]]]],[11,"partial_cmp","move_core_types::identifier","",5,[[["identifier",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["identifier",3]]]],[11,"le","","",5,[[["identifier",3]]]],[11,"gt","","",5,[[["identifier",3]]]],[11,"ge","","",5,[[["identifier",3]]]],[11,"partial_cmp","","",6,[[["identstr",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["identstr",3]]]],[11,"le","","",6,[[["identstr",3]]]],[11,"gt","","",6,[[["identstr",3]]]],[11,"ge","","",6,[[["identstr",3]]]],[11,"partial_cmp","move_core_types::language_storage","",8,[[["typetag",4]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["typetag",4]]]],[11,"le","","",8,[[["typetag",4]]]],[11,"gt","","",8,[[["typetag",4]]]],[11,"ge","","",8,[[["typetag",4]]]],[11,"partial_cmp","","",7,[[["structtag",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["structtag",3]]]],[11,"le","","",7,[[["structtag",3]]]],[11,"gt","","",7,[[["structtag",3]]]],[11,"ge","","",7,[[["structtag",3]]]],[11,"partial_cmp","","",9,[[["resourcekey",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["resourcekey",3]]]],[11,"le","","",9,[[["resourcekey",3]]]],[11,"gt","","",9,[[["resourcekey",3]]]],[11,"ge","","",9,[[["resourcekey",3]]]],[11,"partial_cmp","","",10,[[["moduleid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["moduleid",3]]]],[11,"le","","",10,[[["moduleid",3]]]],[11,"gt","","",10,[[["moduleid",3]]]],[11,"ge","","",10,[[["moduleid",3]]]],[11,"to_owned","move_core_types::identifier","",6,[[],["identifier",3]]],[11,"deref","","",5,[[],["identstr",3]]],[11,"fmt","move_core_types::account_address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::gas_schedule","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::identifier","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::language_storage","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::transaction_argument","",12,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::value","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::account_address","",0,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::identifier","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","move_core_types::language_storage","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","move_core_types::account_address","",0,[[]]],[11,"hash","move_core_types::gas_schedule","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","move_core_types::identifier","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","move_core_types::language_storage","",8,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","move_core_types::transaction_argument","",12,[[]]],[11,"borrow","move_core_types::identifier","",5,[[],["identstr",3]]],[11,"try_from","move_core_types::account_address","Tries to convert the provided byte array into Address.",0,[[],[["accountaddress",3],["result",6]]]],[11,"try_from","","Tries to convert the provided byte array into Address.",0,[[],[["accountaddress",3],["result",6]]]],[11,"try_from","","Tries to convert the provided byte buffer into Address.",0,[[["vec",3]],[["accountaddress",3],["result",6]]]],[11,"try_from","","",0,[[["string",3]],[["accountaddress",3],["result",6]]]],[11,"from_str","","",0,[[],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"write","","",17,[[],["result",6]]],[11,"flush","","",17,[[],["result",6]]],[11,"write","move_core_types::language_storage","",21,[[],["result",6]]],[11,"flush","","",21,[[],["result",6]]],[11,"write","","",22,[[],["result",6]]],[11,"flush","","",22,[[],["result",6]]],[11,"hash","move_core_types::account_address","",0,[[],["hashvalue",3]]],[11,"hash","move_core_types::language_storage","",7,[[],["hashvalue",3]]],[11,"hash","","",10,[[],["hashvalue",3]]],[11,"seed","move_core_types::account_address","",17,[[]]],[11,"update","","",17,[[]]],[11,"finish","","",17,[[],["hashvalue",3]]],[11,"seed","move_core_types::language_storage","",21,[[]]],[11,"update","","",21,[[]]],[11,"finish","","",21,[[],["hashvalue",3]]],[11,"seed","","",22,[[]]],[11,"update","","",22,[[]]],[11,"finish","","",22,[[],["hashvalue",3]]],[11,"serialize","move_core_types::account_address","",0,[[],["result",4]]],[11,"serialize","move_core_types::gas_schedule","",18,[[],["result",4]]],[11,"serialize","","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","move_core_types::identifier","",5,[[],["result",4]]],[11,"serialize","move_core_types::language_storage","",8,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",10,[[],["result",4]]],[11,"serialize","move_core_types::transaction_argument","",12,[[],["result",4]]],[11,"serialize","move_core_types::value","",13,[[["serializer",8]],["result",4]]],[11,"serialize","","",15,[[["serializer",8]],["result",4]]],[11,"deserialize","move_core_types::account_address","",0,[[],["result",4]]],[11,"deserialize","move_core_types::gas_schedule","",18,[[],["result",4]]],[11,"deserialize","","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","move_core_types::identifier","",5,[[],["result",4]]],[11,"deserialize","move_core_types::language_storage","",8,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",10,[[],["result",4]]],[11,"deserialize","move_core_types::transaction_argument","",12,[[],["result",4]]],[11,"arbitrary_with","move_core_types::account_address","",0,[[]]],[11,"arbitrary_with","move_core_types::identifier","",5,[[]]],[11,"arbitrary_with","move_core_types::language_storage","",10,[[]]],[11,"arbitrary_with","","",8,[[]]],[11,"arbitrary_with","move_core_types::transaction_argument","",12,[[]]],[11,"ref_cast","move_core_types::identifier","",6,[[]]],[11,"ref_cast_mut","","",6,[[]]]],"p":[[3,"AccountAddress"],[3,"GasConstants"],[3,"CostTable"],[3,"GasCost"],[8,"GasAlgebra"],[3,"Identifier"],[3,"IdentStr"],[3,"StructTag"],[4,"TypeTag"],[3,"ResourceKey"],[3,"ModuleId"],[8,"MoveResource"],[4,"TransactionArgument"],[4,"MoveValue"],[4,"MoveTypeLayout"],[3,"MoveStruct"],[3,"MoveStructLayout"],[3,"AccountAddressHasher"],[3,"AbstractMemorySize"],[3,"GasUnits"],[3,"GasPrice"],[3,"StructTagHasher"],[3,"ModuleIdHasher"]]},\
"move_coverage":{"doc":"","i":[[0,"coverage_map","move_coverage","",null,null],[3,"CoverageMap","move_coverage::coverage_map","",null,null],[12,"module_maps","","",0,null],[3,"ModuleCoverageMap","","",null,null],[12,"module_addr","","",1,null],[12,"module_name","","",1,null],[12,"function_maps","","",1,null],[5,"output_map_to_file","","",null,[[["asref",8],["path",3]],["result",6]]],[6,"FunctionCoverage","","",null,null],[11,"update_coverage_from_trace_file","","Takes in a file containing a raw VM trace, and returns an…",0,[[["asref",8],["path",3]]]],[11,"from_trace_file","","Takes in a file containing a raw VM trace, and returns a…",0,[[["asref",8],["path",3]]]],[11,"from_binary_file","","Takes in a file containing a serialized coverage map and…",0,[[["asref",8],["path",3]]]],[11,"new","","",1,[[["accountaddress",3],["identifier",3]]]],[11,"insert","","",1,[[["identifier",3]]]],[11,"get_function_coverage","","",1,[[["identstr",3]],[["option",4],["functioncoverage",6]]]],[0,"source_coverage","move_coverage","",null,null],[3,"FunctionSourceCoverage","move_coverage::source_coverage","",null,null],[12,"fn_is_native","","",2,null],[12,"uncovered_locations","","",2,null],[3,"SourceCoverageBuilder","","",null,null],[3,"SourceCoverage","","",null,null],[12,"annotated_lines","","",3,null],[4,"AbstractSegment","","",null,null],[13,"Bounded","","",4,null],[12,"start","move_coverage::source_coverage::AbstractSegment","",5,null],[12,"end","","",5,null],[13,"BoundedRight","move_coverage::source_coverage","",4,null],[12,"end","move_coverage::source_coverage::AbstractSegment","",6,null],[13,"BoundedLeft","move_coverage::source_coverage","",4,null],[12,"start","move_coverage::source_coverage::AbstractSegment","",7,null],[4,"StringSegment","move_coverage::source_coverage","",null,null],[13,"Covered","","",8,null],[13,"Uncovered","","",8,null],[6,"AnnotatedLine","","",null,null],[11,"new","","",9,[[["compiledmodule",3],["coveragemap",3],["sourcemap",3]]]],[11,"compute_source_coverage","","",9,[[["path",3]],["sourcecoverage",3]]],[11,"output_source_coverage","","",3,[[],["result",6]]],[0,"summary","move_coverage","",null,null],[3,"ModuleSummaryOptions","move_coverage::summary","",null,null],[12,"summarize_function_coverage","","",10,null],[3,"ModuleSummary","","",null,null],[12,"module_name","","",11,null],[12,"function_summaries","","",11,null],[3,"FunctionSummary","","",null,null],[12,"fn_is_native","","",12,null],[12,"total_number_of_instructions","","",12,null],[12,"covered_instructions","","",12,null],[5,"percent_coverage_for_counts","","",null,[[]]],[11,"new","","",11,[[["compiledmodule",3],["coveragemap",3],["modulesummaryoptions",3]]]],[11,"summarize_csv","","Summarizes the modules coverage in CSV format",11,[[],["result",6]]],[11,"summarize_human","","Summarizes the modules coverage, and returns the total…",11,[[],["result",6]]],[11,"percent_coverage","","",12,[[]]],[11,"from","move_coverage::coverage_map","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"from","move_coverage::source_coverage","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"test_only_hash","","",8,[[],["hashvalue",3]]],[11,"vzip","","",8,[[]]],[11,"from","move_coverage::summary","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"test_only_hash","","",10,[[],["hashvalue",3]]],[11,"vzip","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"initialize","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"test_only_hash","","",11,[[],["hashvalue",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"test_only_hash","","",12,[[],["hashvalue",3]]],[11,"vzip","","",12,[[]]],[11,"clone","move_coverage::source_coverage","",2,[[],["functionsourcecoverage",3]]],[11,"default","move_coverage::summary","",10,[[]]],[11,"fmt","move_coverage::coverage_map","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","move_coverage::source_coverage","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","move_coverage::summary","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"deserialize","move_coverage::coverage_map","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","move_coverage::summary","",10,[[],["result",4]]],[11,"deserialize","","",11,[[],["result",4]]],[11,"deserialize","","",12,[[],["result",4]]],[11,"serialize","move_coverage::coverage_map","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","move_coverage::source_coverage","",2,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","move_coverage::summary","",10,[[],["result",4]]],[11,"serialize","","",11,[[],["result",4]]],[11,"serialize","","",12,[[],["result",4]]]],"p":[[3,"CoverageMap"],[3,"ModuleCoverageMap"],[3,"FunctionSourceCoverage"],[3,"SourceCoverage"],[4,"AbstractSegment"],[13,"Bounded"],[13,"BoundedRight"],[13,"BoundedLeft"],[4,"StringSegment"],[3,"SourceCoverageBuilder"],[3,"ModuleSummaryOptions"],[3,"ModuleSummary"],[3,"FunctionSummary"]]},\
"move_ir_types":{"doc":"Base types for the Move IR.","i":[[0,"ast","move_ir_types","",null,null],[3,"Program","move_ir_types::ast","A set of move modules and a Move transaction script",null,null],[12,"modules","","The modules to publish",0,null],[12,"script","","The transaction script to execute",0,null],[3,"Script","","The move transaction script to be executed",null,null],[12,"imports","","The dependencies of `main`, i.e. of the transaction script",1,null],[12,"explicit_dependency_declarations","","Explicit declaration of dependencies. If not provided,…",1,null],[12,"main","","The transaction script\'s `main` procedure",1,null],[3,"ModuleName","","Newtype for a name of a module",null,null],[3,"QualifiedModuleIdent","","Newtype of the address + the module name `addr.m`",null,null],[12,"name","","Name for the module. Will be unique among modules…",2,null],[12,"address","","Address that this module is published under",2,null],[3,"ModuleDefinition","","A Move module",null,null],[12,"name","","name of the module",3,null],[12,"imports","","the module\'s dependencies",3,null],[12,"explicit_dependency_declarations","","Explicit declaration of dependencies. If not provided,…",3,null],[12,"structs","","the structs (including resources) that the module defines",3,null],[12,"functions","","the procedure that the module defines",3,null],[12,"synthetics","","the synthetic, specification variables the module defines.",3,null],[3,"ModuleDependency","","Explicitly given dependency",null,null],[12,"name","","Qualified identifer of the dependency",4,null],[12,"structs","","The structs (including resources) that the dependency…",4,null],[12,"functions","","The signatures of functions that the dependency defines",4,null],[3,"ImportDefinition","","A dependency/import declaration",null,null],[12,"ident","","the dependency `addr.m` or `Transaction.m`",5,null],[12,"alias","","the alias for that dependency `m`",5,null],[3,"Var_","","Newtype for a variable/local",null,null],[3,"TypeVar_","","New type that represents a type variable. Used to declare…",null,null],[3,"QualifiedStructIdent","","Identifier for a struct definition. Tells us where to look…",null,null],[12,"module","","Module name and address in which the struct is contained",6,null],[12,"name","","Name for the struct class. Should be unique among structs…",6,null],[3,"Field_","","The field newtype",null,null],[3,"StructName","","Newtype for the name of a struct",null,null],[3,"StructDefinition_","","A Move struct",null,null],[12,"is_nominal_resource","","The struct will have kind resource if…",7,null],[12,"name","","Human-readable name for the struct that also serves as a…",7,null],[12,"type_formals","","Kind constraints of the type parameters",7,null],[12,"fields","","the fields each instance has",7,null],[12,"invariants","","the invariants for this struct",7,null],[3,"StructDependency","","An explicit struct dependency",null,null],[12,"is_nominal_resource","","The struct will have kind resource if…",8,null],[12,"name","","Human-readable name for the struct that also serves as a…",8,null],[12,"type_formals","","Kind constraints of the type parameters",8,null],[3,"FunctionName","","Newtype for the name of a function",null,null],[3,"FunctionSignature","","The signature of a function",null,null],[12,"formals","","Possibly-empty list of (formal name, formal type) pairs.…",9,null],[12,"return_type","","Optional return types",9,null],[12,"type_formals","","Possibly-empty list of (TypeVar, Kind) pairs.s.",9,null],[3,"FunctionDependency","","An explicit function dependency",null,null],[12,"name","","Name of the function dependency",10,null],[12,"signature","","Signature of the function dependency",10,null],[3,"Function_","","A Move function/procedure",null,null],[12,"visibility","","The visibility (public or internal)",11,null],[12,"signature","","The type signature",11,null],[12,"acquires","","List of nominal resources (declared in this module) that…",11,null],[12,"specifications","","List of specifications for the Move prover (experimental)",11,null],[12,"body","","The code for the procedure",11,null],[3,"IfElse","","Struct defining an if statement",null,null],[12,"cond","","the if\'s condition",12,null],[12,"if_block","","the block taken if the condition is `true`",12,null],[12,"else_block","","the block taken if the condition is `false`",12,null],[3,"While","","Struct defining a while statement",null,null],[12,"cond","","The condition for a while statement",13,null],[12,"block","","The block taken if the condition is `true`",13,null],[3,"Loop","","Struct defining a loop statement",null,null],[12,"block","","The body of the loop",14,null],[3,"Block_","","`{ s }`",null,null],[12,"stmts","","The statements that make up the block",15,null],[3,"BlockLabel","","",null,null],[12,"0","","",16,null],[3,"NopLabel","","",null,null],[12,"0","","",17,null],[4,"ScriptOrModule","","A script or a module, used to represent the two types of…",null,null],[13,"Script","","The script to execute.",18,null],[13,"Module","","The module to publish.",18,null],[4,"ModuleIdent","","Either a qualified module name like `addr.m` or…",null,null],[13,"Transaction","","",19,null],[13,"Qualified","","",19,null],[4,"Kind","","The kind of a type. Analogous to `vm::file_format::Kind`.",null,null],[13,"All","","Represents the super set of all types.",20,null],[13,"Resource","","`Resource` types must follow move semantics and various…",20,null],[13,"Copyable","","`Copyable` types do not need to follow the `Resource` rules.",20,null],[4,"Type","","The type of a single value",null,null],[13,"Address","","`address`",21,null],[13,"Signer","","`signer`",21,null],[13,"U8","","`u8`",21,null],[13,"U64","","`u64`",21,null],[13,"U128","","`u128`",21,null],[13,"Bool","","`bool`",21,null],[13,"Vector","","`vector`",21,null],[13,"Struct","","A module defined struct",21,null],[13,"Reference","","A reference type, the bool flag indicates whether the…",21,null],[13,"TypeParameter","","A type parameter",21,null],[4,"StructDefinitionFields","","The fields of a Move struct definition",null,null],[13,"Move","","The fields are declared",22,null],[12,"fields","move_ir_types::ast::StructDefinitionFields","",23,null],[13,"Native","move_ir_types::ast","The struct is a type provided by the VM",22,null],[4,"FunctionVisibility","","Public or internal modifier for a procedure",null,null],[13,"Public","","The procedure can be invoked anywhere `public`",24,null],[13,"Internal","","The procedure can be invoked only internally `<no modifier>`",24,null],[4,"FunctionBody","","The body of a Move function",null,null],[13,"Move","","The body is declared `locals` are all of the declared…",25,null],[12,"locals","move_ir_types::ast::FunctionBody","",26,null],[12,"code","","",26,null],[13,"Bytecode","move_ir_types::ast","",25,null],[12,"locals","move_ir_types::ast::FunctionBody","",27,null],[12,"code","","",27,null],[13,"Native","move_ir_types::ast","The body is provided by the runtime",25,null],[4,"Builtin","","Builtin \\\"function\\\"-like operators that often have a…",null,null],[13,"Exists","","Check if there is a struct object (`StructName` resolved…",28,null],[13,"BorrowGlobal","","Get a reference to the resource(`StructName` resolved by…",28,null],[13,"GetTxnSender","","Returns the address of the current transaction\'s sender",28,null],[13,"MoveFrom","","Remove a resource of the given type from the account with…",28,null],[13,"MoveToSender","","Publish an instantiated struct object into sender\'s account.",28,null],[13,"MoveTo","","Publish an instantiated struct object into signer\'s…",28,null],[13,"Freeze","","Convert a mutable reference into an immutable one",28,null],[13,"ToU8","","Cast an integer into u8.",28,null],[13,"ToU64","","Cast an integer into u64.",28,null],[13,"ToU128","","Cast an integer into u128.",28,null],[4,"FunctionCall_","","Enum for different function calls",null,null],[13,"Builtin","","functions defined in the host environment",29,null],[13,"ModuleFunctionCall","","The call of a module defined procedure",29,null],[12,"module","move_ir_types::ast::FunctionCall_","",30,null],[12,"name","","",30,null],[12,"type_actuals","","",30,null],[4,"LValue_","move_ir_types::ast","Enum for Move lvalues",null,null],[13,"Var","","`x`",31,null],[13,"Mutate","","`*e`",31,null],[13,"Pop","","`_`",31,null],[4,"Cmd_","","Enum for Move commands",null,null],[13,"Assign","","`l_1, ..., l_n = e`",32,null],[13,"Unpack","","`n { f_1: x_1, ... , f_j: x_j  } = e`",32,null],[13,"Abort","","`abort e`",32,null],[13,"Return","","`return e_1, ... , e_j`",32,null],[13,"Break","","`break`",32,null],[13,"Continue","","`continue`",32,null],[13,"Exp","","",32,null],[4,"Statement","","",null,null],[13,"CommandStatement","","`c;`",33,null],[13,"IfElseStatement","","`if (e) { s_1 } else { s_2 }`",33,null],[13,"WhileStatement","","`while (e) { s }`",33,null],[13,"LoopStatement","","`loop { s }`",33,null],[13,"EmptyStatement","","no-op that eases parsing in some places",33,null],[4,"CopyableVal_","","Bottom of the value hierarchy. These values can be…",null,null],[13,"Address","","An address in the global storage",34,null],[13,"U8","","An unsigned 8-bit integer",34,null],[13,"U64","","An unsigned 64-bit integer",34,null],[13,"U128","","An unsigned 128-bit integer",34,null],[13,"Bool","","true or false",34,null],[13,"ByteArray","","`b\\\"<bytes>\\\"`",34,null],[4,"UnaryOp","","Enum for unary operators",null,null],[13,"Not","","Boolean negation",35,null],[4,"BinOp","","Enum for binary operators",null,null],[13,"Add","","`+`",36,null],[13,"Sub","","`-`",36,null],[13,"Mul","","`*`",36,null],[13,"Mod","","`%`",36,null],[13,"Div","","`/`",36,null],[13,"BitOr","","`|`",36,null],[13,"BitAnd","","`&`",36,null],[13,"Xor","","`^`",36,null],[13,"Shl","","`<<`",36,null],[13,"Shr","","`>>`",36,null],[13,"And","","`&&`",36,null],[13,"Or","","`||`",36,null],[13,"Eq","","`==`",36,null],[13,"Neq","","`!=`",36,null],[13,"Lt","","`<`",36,null],[13,"Gt","","`>`",36,null],[13,"Le","","`<=`",36,null],[13,"Ge","","`>=`",36,null],[13,"Subrange","","\'..\'  only used in specs",36,null],[4,"Exp_","","Enum for all expressions",null,null],[13,"Dereference","","`*e`",37,null],[13,"UnaryExp","","`op e`",37,null],[13,"BinopExp","","`e_1 op e_2`",37,null],[13,"Value","","Wrapper to lift `CopyableVal` into `Exp` `v`",37,null],[13,"Pack","","Takes the given field values and instantiates the struct…",37,null],[13,"Borrow","","`&e.f`, `&mut e.f`",37,null],[12,"is_mutable","move_ir_types::ast::Exp_","mutable or not",38,null],[12,"exp","","the expression containing the reference",38,null],[12,"field","","the field being borrowed",38,null],[13,"Move","move_ir_types::ast","`move(x)`",37,null],[13,"Copy","","`copy(x)`",37,null],[13,"BorrowLocal","","`&x` or `&mut x`",37,null],[13,"FunctionCall","","`f(e)` or `f(e_1, e_2, ..., e_j)`",37,null],[13,"ExprList","","(e_1, e_2, e_3, ..., e_j)",37,null],[4,"Bytecode_","","",null,null],[13,"Pop","","",39,null],[13,"Ret","","",39,null],[13,"Nop","","",39,null],[13,"BrTrue","","",39,null],[13,"BrFalse","","",39,null],[13,"Branch","","",39,null],[13,"LdU8","","",39,null],[13,"LdU64","","",39,null],[13,"LdU128","","",39,null],[13,"CastU8","","",39,null],[13,"CastU64","","",39,null],[13,"CastU128","","",39,null],[13,"LdByteArray","","",39,null],[13,"LdAddr","","",39,null],[13,"LdTrue","","",39,null],[13,"LdFalse","","",39,null],[13,"CopyLoc","","",39,null],[13,"MoveLoc","","",39,null],[13,"StLoc","","",39,null],[13,"Call","","",39,null],[13,"Pack","","",39,null],[13,"Unpack","","",39,null],[13,"ReadRef","","",39,null],[13,"WriteRef","","",39,null],[13,"FreezeRef","","",39,null],[13,"MutBorrowLoc","","",39,null],[13,"ImmBorrowLoc","","",39,null],[13,"MutBorrowField","","",39,null],[13,"ImmBorrowField","","",39,null],[13,"MutBorrowGlobal","","",39,null],[13,"ImmBorrowGlobal","","",39,null],[13,"Add","","",39,null],[13,"Sub","","",39,null],[13,"Mul","","",39,null],[13,"Mod","","",39,null],[13,"Div","","",39,null],[13,"BitOr","","",39,null],[13,"BitAnd","","",39,null],[13,"Xor","","",39,null],[13,"Or","","",39,null],[13,"And","","",39,null],[13,"Not","","",39,null],[13,"Eq","","",39,null],[13,"Neq","","",39,null],[13,"Lt","","",39,null],[13,"Gt","","",39,null],[13,"Le","","",39,null],[13,"Ge","","",39,null],[13,"Abort","","",39,null],[13,"GetTxnSenderAddress","","",39,null],[13,"Exists","","",39,null],[13,"MoveFrom","","",39,null],[13,"MoveToSender","","",39,null],[13,"MoveTo","","",39,null],[13,"Shl","","",39,null],[13,"Shr","","",39,null],[6,"Var","","The type of a variable with a location",null,null],[6,"TypeVar","","The type of a type variable with a location.",null,null],[6,"Field","","A field coupled with source location information",null,null],[6,"Fields","","A field map",null,null],[6,"StructDefinition","","The type of a StructDefinition along with its source…",null,null],[6,"Function","","The type of a Function coupled with its source location…",null,null],[6,"FunctionCall","","The type for a function call and its location",null,null],[6,"LValue","","",null,null],[6,"Cmd","","The type of a command with its location",null,null],[6,"Block","","The type of a Block coupled with source location…",null,null],[6,"CopyableVal","","The type of a value and its location",null,null],[6,"ExpFields","","The type for fields and their bound expressions",null,null],[6,"Exp","","The type for a `Exp_` and its location",null,null],[6,"BytecodeBlocks","","",null,null],[6,"BytecodeBlock","","",null,null],[6,"Bytecode","","",null,null],[11,"new","","Create a new `Program` from modules and transaction script",0,[[["vec",3],["moduledefinition",3],["script",3]]]],[11,"new","","Create a new `Script` from the imports and the main function",1,[[["vec",3],["moduledependency",3],["importdefinition",3],["function",6],["vec",3]]]],[11,"body","","Accessor for the body of the \'main\' procedure",1,[[],["block_",3]]],[11,"get_external_deps","","Return a vector of `ModuleId` for the external dependencies.",1,[[],[["vec",3],["moduleid",3]]]],[11,"new","","Create a new `ModuleName` from a string",40,[[["string",3]]]],[11,"self_name","","Name for the current module handle",40,[[]]],[11,"module_self","","Create a new `ModuleName` from `self_name`.",40,[[]]],[11,"into_inner","","Converts self into a string.",40,[[],["string",3]]],[11,"as_inner","","Accessor for the name of the module",40,[[]]],[11,"new","","Creates a new fully qualified module identifier from the…",2,[[["accountaddress",3],["modulename",3]]]],[11,"name","","Accessor for the name of the fully qualified module…",2,[[],["modulename",3]]],[11,"address","","Accessor for the address at which the module is published",2,[[],["accountaddress",3]]],[11,"name","","",19,[[],["modulename",3]]],[11,"new","","Creates a new `ModuleDefinition` from its string name,…",3,[[["vec",3],["vec",3],["importdefinition",3],["vec",3],["vec",3],["syntheticdefinition",6],["moduledependency",3],["structdefinition",6],["vec",3]],["result",6]]],[11,"get_external_deps","","Return a vector of `ModuleId` for the external dependencies.",3,[[],[["vec",3],["moduleid",3]]]],[11,"struct","","Creates a new struct type",21,[[["vec",3],["type",4],["qualifiedstructident",3]],["type",4]]],[11,"reference","","Creates a new reference type from its mutability and…",21,[[["type",4]],["type",4]]],[11,"address","","Creates a new address type",21,[[],["type",4]]],[11,"u64","","Creates a new u64 type",21,[[],["type",4]]],[11,"bool","","Creates a new bool type",21,[[],["type",4]]],[11,"new","","Creates a new StructType handle from the name of the…",6,[[["modulename",3],["structname",3]]]],[11,"module","","Accessor for the module alias",6,[[],["modulename",3]]],[11,"name","","Accessor for the struct name",6,[[],["structname",3]]],[11,"new","","Creates a new import definition from a module identifier…",5,[[["modulename",3],["moduleident",4],["option",4]]]],[11,"new","","Create a new `Field_` from a string",41,[[["string",3]]]],[11,"into_inner","","Converts self into a string.",41,[[],["string",3]]],[11,"as_inner","","Accessor for the name of the struct",41,[[]]],[11,"new","","Create a new `StructName` from a string",42,[[["string",3]]]],[11,"into_inner","","Converts self into a string.",42,[[],["string",3]]],[11,"as_inner","","Accessor for the name of the struct",42,[[]]],[11,"move_declared","","Creates a new StructDefinition from the resource kind…",7,[[["vec",3],["invariant",6],["vec",3],["type",4],["fields",6]],["result",6]]],[11,"native","","Creates a new StructDefinition from the resource kind…",7,[[["vec",3]],["result",6]]],[11,"new","","Create a new `FunctionName` from a string",43,[[["string",3]]]],[11,"into_inner","","Converts self into a string.",43,[[],["string",3]]],[11,"as_inner","","Accessor for the name of the function",43,[[]]],[11,"new","","Creates a new function signature from the parameters and…",9,[[["vec",3],["vec",3],["type",4],["vec",3]]]],[11,"new","","Creates a new function declaration from the components of…",11,[[["vec",3],["vec",3],["functionvisibility",4],["condition",6],["vec",3],["type",4],["vec",3],["functionbody",4],["vec",3],["structname",3]]]],[11,"new","","Creates a new `Var` from a string.",44,[[["string",3]]]],[11,"into_inner","","Converts self into a string.",44,[[],["string",3]]],[11,"name","","Accessor for the name of the var",44,[[]]],[11,"new","","Creates a new `TypeVar` from an String.",45,[[["string",3]]]],[11,"into_inner","","Converts self into a string.",45,[[],["string",3]]],[11,"name","","Accessor for the name of the var.",45,[[]]],[11,"module_call","","Creates a `FunctionCall::ModuleFunctionCall` variant",29,[[["modulename",3],["functionname",3],["vec",3],["type",4]]]],[11,"builtin","","Creates a `FunctionCall::Builtin` variant with no location…",29,[[["builtin",4]],["functioncall",6]]],[11,"return_empty","","Creates a command that returns no values",32,[[]]],[11,"return_","","Creates a command that returns a single value",32,[[["exp",6]]]],[11,"if_block","","Creates an if-statement with no else branch",12,[[["exp",6],["block",6]]]],[11,"if_else","","Creates an if-statement with an else branch",12,[[["exp",6],["block",6]]]],[11,"cmd","","Lifts a command into a statement",33,[[["cmd",6]]]],[11,"if_block","","Creates an `Statement::IfElseStatement` variant with no…",33,[[["exp",6],["block",6]]]],[11,"if_else","","Creates an `Statement::IfElseStatement` variant with an…",33,[[["exp",6],["block",6]]]],[11,"new","","Creates a new block from the vector of statements",15,[[["vec",3],["statement",4]]]],[11,"empty","","Creates an empty block",15,[[]]],[11,"address","","Creates a new address `Exp` with no location information",37,[[["accountaddress",3]],["exp",6]]],[11,"value","","Creates a new value `Exp` with no location information",37,[[["copyableval_",4]],["exp",6]]],[11,"u64","","Creates a new u64 `Exp` with no location information",37,[[],["exp",6]]],[11,"bool","","Creates a new bool `Exp` with no location information",37,[[],["exp",6]]],[11,"byte_array","","Creates a new bytearray `Exp` with no location information",37,[[["vec",3]],["exp",6]]],[11,"instantiate","","Creates a new pack/struct-instantiation `Exp` with no…",37,[[["expfields",6],["vec",3],["type",4],["structname",3]],["exp",6]]],[11,"binop","","Creates a new binary operator `Exp` with no location…",37,[[["exp",6],["binop",4]],["exp",6]]],[11,"add","","Creates a new `e+e` `Exp` with no location information",37,[[["exp",6]],["exp",6]]],[11,"sub","","Creates a new `e-e` `Exp` with no location information",37,[[["exp",6]],["exp",6]]],[11,"dereference","","Creates a new `*e` `Exp` with no location information",37,[[["exp",6]],["exp",6]]],[11,"borrow","","Creates a new borrow field `Exp` with no location…",37,[[["field_",3],["box",3],["exp",6]],["exp",6]]],[11,"copy","","Creates a new copy-local `Exp` with no location information",37,[[["var",6]],["exp",6]]],[11,"move_","","Creates a new move-local `Exp` with no location information",37,[[["var",6]],["exp",6]]],[11,"function_call","","Creates a new function call `Exp` with no location…",37,[[["functioncall",6],["exp",6]],["exp",6]]],[11,"expr_list","","",37,[[["vec",3],["exp",6]],["exp",6]]],[0,"location","move_ir_types","",null,null],[3,"Loc","move_ir_types::location","",null,null],[3,"Spanned","","",null,null],[12,"loc","","",46,null],[12,"value","","",46,null],[5,"sp","","Function used to have nearly tuple-like syntax for…",null,[[["loc",3]],["spanned",3]]],[11,"new","","",47,[[["span",3]],["loc",3]]],[11,"file","","",47,[[]]],[11,"span","","",47,[[],["span",3]]],[11,"new","","",46,[[["loc",3]],["spanned",3]]],[11,"unsafe_no_loc","","",46,[[],["spanned",3]]],[0,"spec_language_ast","move_ir_types","",null,null],[3,"Invariant_","move_ir_types::spec_language_ast","An invariant over a resource.",null,null],[12,"modifier","","A free string (for now) which specifies the function of…",48,null],[12,"target","","An optional synthetic variable to which the below…",48,null],[12,"exp","","A specification expression.",48,null],[3,"SyntheticDefinition_","","A synthetic variable definition.",null,null],[12,"name","","",49,null],[12,"type_","","",49,null],[4,"FieldOrIndex","","AST for the Move Prover specification language.",null,null],[13,"Field","","",50,null],[13,"Index","","",50,null],[4,"StorageLocation","","A location that can store a value",null,null],[13,"Formal","","A formal of the current procedure",51,null],[13,"GlobalResource","","A resource of type `type_` stored in global storage at…",51,null],[12,"type_","move_ir_types::spec_language_ast::StorageLocation","",52,null],[12,"type_actuals","","",52,null],[12,"address","","",52,null],[13,"AccessPath","move_ir_types::spec_language_ast","An access path rooted at `base` with nonempty offsets in…",51,null],[12,"base","move_ir_types::spec_language_ast::StorageLocation","",53,null],[12,"fields_and_indices","","",53,null],[13,"TxnSenderAddress","move_ir_types::spec_language_ast","Sender address for the current transaction",51,null],[13,"Address","","Account address constant",51,null],[13,"Ret","","The ith return value of the current procedure",51,null],[4,"SpecExp","","An expression in the specification language",null,null],[13,"Constant","","A Move constant",54,null],[13,"StorageLocation","","A spec language storage location",54,null],[13,"GlobalExists","","Lifting the Move exists operator to a storage location",54,null],[12,"type_","move_ir_types::spec_language_ast::SpecExp","",55,null],[12,"type_actuals","","",55,null],[12,"address","","",55,null],[13,"Dereference","move_ir_types::spec_language_ast","Dereference of a storage location (written *s)",54,null],[13,"Reference","","Reference to a storage location (written &s)",54,null],[13,"Not","","Negation of a boolean expression (written !e),",54,null],[13,"Binop","","Binary operators also suported by Move",54,null],[13,"Update","","Update expr (i := 1 inside [])",54,null],[13,"Old","","Value of expression evaluated in the state before function…",54,null],[13,"Call","","Call to a helper function.",54,null],[4,"Condition_","","A specification directive to be verified",null,null],[13,"Ensures","","Postconditions",56,null],[13,"Requires","","Preconditions",56,null],[13,"AbortsIf","","If the given expression is true, the procedure must…",56,null],[13,"SucceedsIf","","If the given expression is true, the procedure must…",56,null],[6,"Condition","","Specification directive with span.",null,null],[6,"Invariant","","Invariant with span.",null,null],[6,"SyntheticDefinition","","Synthetic with span.",null,null],[14,"sp","move_ir_types","Macro used to create a tuple-like pattern match for Spanned",null,null],[11,"from","move_ir_types::ast","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"to_string","","",40,[[],["string",3]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"to_string","","",41,[[],["string",3]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"to_string","","",42,[[],["string",3]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"into_iter","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"test_only_hash","","",16,[[],["hashvalue",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"test_only_hash","","",17,[[],["hashvalue",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"to_string","","",20,[[],["string",3]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"to_string","","",31,[[],["string",3]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"to_string","","",32,[[],["string",3]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"to_string","","",33,[[],["string",3]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"to_string","","",34,[[],["string",3]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"to_string","","",35,[[],["string",3]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"to_string","","",36,[[],["string",3]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","move_ir_types::location","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"test_only_hash","","",47,[[],["hashvalue",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"to_string","","",46,[[],["string",3]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","move_ir_types::spec_language_ast","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"next","move_ir_types::ast","",1,[[],[["option",4],["statement",4]]]],[11,"next","","",15,[[],[["option",4],["statement",4]]]],[11,"clone","","",0,[[],["program",3]]],[11,"clone","","",18,[[],["scriptormodule",4]]],[11,"clone","","",1,[[],["script",3]]],[11,"clone","","",40,[[],["modulename",3]]],[11,"clone","","",2,[[],["qualifiedmoduleident",3]]],[11,"clone","","",3,[[],["moduledefinition",3]]],[11,"clone","","",19,[[],["moduleident",4]]],[11,"clone","","",4,[[],["moduledependency",3]]],[11,"clone","","",5,[[],["importdefinition",3]]],[11,"clone","","",44,[[],["var_",3]]],[11,"clone","","",45,[[],["typevar_",3]]],[11,"clone","","",20,[[],["kind",4]]],[11,"clone","","",21,[[],["type",4]]],[11,"clone","","",6,[[],["qualifiedstructident",3]]],[11,"clone","","",41,[[],["field_",3]]],[11,"clone","","",42,[[],["structname",3]]],[11,"clone","","",7,[[],["structdefinition_",3]]],[11,"clone","","",8,[[],["structdependency",3]]],[11,"clone","","",22,[[],["structdefinitionfields",4]]],[11,"clone","","",43,[[],["functionname",3]]],[11,"clone","","",9,[[],["functionsignature",3]]],[11,"clone","","",10,[[],["functiondependency",3]]],[11,"clone","","",24,[[],["functionvisibility",4]]],[11,"clone","","",25,[[],["functionbody",4]]],[11,"clone","","",11,[[],["function_",3]]],[11,"clone","","",28,[[],["builtin",4]]],[11,"clone","","",29,[[],["functioncall_",4]]],[11,"clone","","",31,[[],["lvalue_",4]]],[11,"clone","","",32,[[],["cmd_",4]]],[11,"clone","","",12,[[],["ifelse",3]]],[11,"clone","","",13,[[],["while",3]]],[11,"clone","","",14,[[],["loop",3]]],[11,"clone","","",33,[[],["statement",4]]],[11,"clone","","",15,[[],["block_",3]]],[11,"clone","","",34,[[],["copyableval_",4]]],[11,"clone","","",35,[[],["unaryop",4]]],[11,"clone","","",36,[[],["binop",4]]],[11,"clone","","",37,[[],["exp_",4]]],[11,"clone","","",16,[[],["blocklabel",3]]],[11,"clone","","",17,[[],["noplabel",3]]],[11,"clone","","",39,[[],["bytecode_",4]]],[11,"clone","move_ir_types::location","",47,[[],["loc",3]]],[11,"clone","","",46,[[],["spanned",3]]],[11,"clone","move_ir_types::spec_language_ast","",50,[[],["fieldorindex",4]]],[11,"clone","","",51,[[],["storagelocation",4]]],[11,"clone","","",54,[[],["specexp",4]]],[11,"clone","","",56,[[],["condition_",4]]],[11,"clone","","",48,[[],["invariant_",3]]],[11,"clone","","",49,[[],["syntheticdefinition_",3]]],[11,"cmp","move_ir_types::ast","",40,[[["modulename",3]],["ordering",4]]],[11,"cmp","","",2,[[["qualifiedmoduleident",3]],["ordering",4]]],[11,"cmp","","",19,[[["moduleident",4]],["ordering",4]]],[11,"cmp","","",44,[[["var_",3]],["ordering",4]]],[11,"cmp","","",6,[[["qualifiedstructident",3]],["ordering",4]]],[11,"cmp","","",41,[[["field_",3]],["ordering",4]]],[11,"cmp","","",42,[[["structname",3]],["ordering",4]]],[11,"cmp","","",43,[[["functionname",3]],["ordering",4]]],[11,"cmp","","",16,[[["blocklabel",3]],["ordering",4]]],[11,"cmp","","",17,[[["noplabel",3]],["ordering",4]]],[11,"cmp","move_ir_types::location","",47,[[["loc",3]],["ordering",4]]],[11,"cmp","","",46,[[["spanned",3]],["ordering",4]]],[11,"eq","move_ir_types::ast","",40,[[["modulename",3]]]],[11,"ne","","",40,[[["modulename",3]]]],[11,"eq","","",2,[[["qualifiedmoduleident",3]]]],[11,"ne","","",2,[[["qualifiedmoduleident",3]]]],[11,"eq","","",3,[[["moduledefinition",3]]]],[11,"ne","","",3,[[["moduledefinition",3]]]],[11,"eq","","",19,[[["moduleident",4]]]],[11,"ne","","",19,[[["moduleident",4]]]],[11,"eq","","",4,[[["moduledependency",3]]]],[11,"ne","","",4,[[["moduledependency",3]]]],[11,"eq","","",5,[[["importdefinition",3]]]],[11,"ne","","",5,[[["importdefinition",3]]]],[11,"eq","","",44,[[["var_",3]]]],[11,"ne","","",44,[[["var_",3]]]],[11,"eq","","",45,[[["typevar_",3]]]],[11,"ne","","",45,[[["typevar_",3]]]],[11,"eq","","",20,[[["kind",4]]]],[11,"eq","","",21,[[["type",4]]]],[11,"ne","","",21,[[["type",4]]]],[11,"eq","","",6,[[["qualifiedstructident",3]]]],[11,"ne","","",6,[[["qualifiedstructident",3]]]],[11,"eq","","",41,[[["field_",3]]]],[11,"ne","","",41,[[["field_",3]]]],[11,"eq","","",42,[[["structname",3]]]],[11,"ne","","",42,[[["structname",3]]]],[11,"eq","","",7,[[["structdefinition_",3]]]],[11,"ne","","",7,[[["structdefinition_",3]]]],[11,"eq","","",8,[[["structdependency",3]]]],[11,"ne","","",8,[[["structdependency",3]]]],[11,"eq","","",22,[[["structdefinitionfields",4]]]],[11,"ne","","",22,[[["structdefinitionfields",4]]]],[11,"eq","","",43,[[["functionname",3]]]],[11,"ne","","",43,[[["functionname",3]]]],[11,"eq","","",9,[[["functionsignature",3]]]],[11,"ne","","",9,[[["functionsignature",3]]]],[11,"eq","","",10,[[["functiondependency",3]]]],[11,"ne","","",10,[[["functiondependency",3]]]],[11,"eq","","",24,[[["functionvisibility",4]]]],[11,"eq","","",25,[[["functionbody",4]]]],[11,"ne","","",25,[[["functionbody",4]]]],[11,"eq","","",11,[[["function_",3]]]],[11,"ne","","",11,[[["function_",3]]]],[11,"eq","","",28,[[["builtin",4]]]],[11,"ne","","",28,[[["builtin",4]]]],[11,"eq","","",29,[[["functioncall_",4]]]],[11,"ne","","",29,[[["functioncall_",4]]]],[11,"eq","","",31,[[["lvalue_",4]]]],[11,"ne","","",31,[[["lvalue_",4]]]],[11,"eq","","",32,[[["cmd_",4]]]],[11,"ne","","",32,[[["cmd_",4]]]],[11,"eq","","",12,[[["ifelse",3]]]],[11,"ne","","",12,[[["ifelse",3]]]],[11,"eq","","",13,[[["while",3]]]],[11,"ne","","",13,[[["while",3]]]],[11,"eq","","",14,[[["loop",3]]]],[11,"ne","","",14,[[["loop",3]]]],[11,"eq","","",33,[[["statement",4]]]],[11,"ne","","",33,[[["statement",4]]]],[11,"eq","","",15,[[["block_",3]]]],[11,"ne","","",15,[[["block_",3]]]],[11,"eq","","",34,[[["copyableval_",4]]]],[11,"ne","","",34,[[["copyableval_",4]]]],[11,"eq","","",35,[[["unaryop",4]]]],[11,"eq","","",36,[[["binop",4]]]],[11,"eq","","",37,[[["exp_",4]]]],[11,"ne","","",37,[[["exp_",4]]]],[11,"eq","","",16,[[["blocklabel",3]]]],[11,"ne","","",16,[[["blocklabel",3]]]],[11,"eq","","",17,[[["noplabel",3]]]],[11,"ne","","",17,[[["noplabel",3]]]],[11,"eq","","",39,[[["bytecode_",4]]]],[11,"ne","","",39,[[["bytecode_",4]]]],[11,"eq","","",1,[[["script",3]]]],[11,"eq","move_ir_types::location","",47,[[["loc",3]]]],[11,"ne","","",47,[[["loc",3]]]],[11,"eq","","",46,[[["spanned",3]]]],[11,"eq","move_ir_types::spec_language_ast","",50,[[["fieldorindex",4]]]],[11,"ne","","",50,[[["fieldorindex",4]]]],[11,"eq","","",51,[[["storagelocation",4]]]],[11,"ne","","",51,[[["storagelocation",4]]]],[11,"eq","","",54,[[["specexp",4]]]],[11,"ne","","",54,[[["specexp",4]]]],[11,"eq","","",56,[[["condition_",4]]]],[11,"ne","","",56,[[["condition_",4]]]],[11,"eq","","",48,[[["invariant_",3]]]],[11,"ne","","",48,[[["invariant_",3]]]],[11,"eq","","",49,[[["syntheticdefinition_",3]]]],[11,"ne","","",49,[[["syntheticdefinition_",3]]]],[11,"partial_cmp","move_ir_types::ast","",40,[[["modulename",3]],[["option",4],["ordering",4]]]],[11,"lt","","",40,[[["modulename",3]]]],[11,"le","","",40,[[["modulename",3]]]],[11,"gt","","",40,[[["modulename",3]]]],[11,"ge","","",40,[[["modulename",3]]]],[11,"partial_cmp","","",2,[[["qualifiedmoduleident",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["qualifiedmoduleident",3]]]],[11,"le","","",2,[[["qualifiedmoduleident",3]]]],[11,"gt","","",2,[[["qualifiedmoduleident",3]]]],[11,"ge","","",2,[[["qualifiedmoduleident",3]]]],[11,"partial_cmp","","",19,[[["moduleident",4]],[["option",4],["ordering",4]]]],[11,"lt","","",19,[[["moduleident",4]]]],[11,"le","","",19,[[["moduleident",4]]]],[11,"gt","","",19,[[["moduleident",4]]]],[11,"ge","","",19,[[["moduleident",4]]]],[11,"partial_cmp","","",44,[[["var_",3]],[["option",4],["ordering",4]]]],[11,"lt","","",44,[[["var_",3]]]],[11,"le","","",44,[[["var_",3]]]],[11,"gt","","",44,[[["var_",3]]]],[11,"ge","","",44,[[["var_",3]]]],[11,"partial_cmp","","",6,[[["qualifiedstructident",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["qualifiedstructident",3]]]],[11,"le","","",6,[[["qualifiedstructident",3]]]],[11,"gt","","",6,[[["qualifiedstructident",3]]]],[11,"ge","","",6,[[["qualifiedstructident",3]]]],[11,"partial_cmp","","",41,[[["field_",3]],[["option",4],["ordering",4]]]],[11,"lt","","",41,[[["field_",3]]]],[11,"le","","",41,[[["field_",3]]]],[11,"gt","","",41,[[["field_",3]]]],[11,"ge","","",41,[[["field_",3]]]],[11,"partial_cmp","","",42,[[["structname",3]],[["option",4],["ordering",4]]]],[11,"lt","","",42,[[["structname",3]]]],[11,"le","","",42,[[["structname",3]]]],[11,"gt","","",42,[[["structname",3]]]],[11,"ge","","",42,[[["structname",3]]]],[11,"partial_cmp","","",43,[[["functionname",3]],[["option",4],["ordering",4]]]],[11,"lt","","",43,[[["functionname",3]]]],[11,"le","","",43,[[["functionname",3]]]],[11,"gt","","",43,[[["functionname",3]]]],[11,"ge","","",43,[[["functionname",3]]]],[11,"partial_cmp","","",16,[[["blocklabel",3]],[["option",4],["ordering",4]]]],[11,"lt","","",16,[[["blocklabel",3]]]],[11,"le","","",16,[[["blocklabel",3]]]],[11,"gt","","",16,[[["blocklabel",3]]]],[11,"ge","","",16,[[["blocklabel",3]]]],[11,"partial_cmp","","",17,[[["noplabel",3]],[["option",4],["ordering",4]]]],[11,"lt","","",17,[[["noplabel",3]]]],[11,"le","","",17,[[["noplabel",3]]]],[11,"gt","","",17,[[["noplabel",3]]]],[11,"ge","","",17,[[["noplabel",3]]]],[11,"partial_cmp","move_ir_types::location","",47,[[["loc",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",46,[[["spanned",3]],[["ordering",4],["option",4]]]],[11,"fmt","move_ir_types::ast","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","move_ir_types::location","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","move_ir_types::spec_language_ast","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","move_ir_types::ast","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","move_ir_types::location","",46,[[["formatter",3]],["result",6]]],[11,"hash","move_ir_types::ast","",40,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",44,[[]]],[11,"hash","","",45,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",41,[[]]],[11,"hash","","",42,[[]]],[11,"hash","","",43,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","move_ir_types::location","",46,[[]]],[11,"deserialize","move_ir_types::ast","",16,[[],["result",4]]],[11,"deserialize","","",17,[[],["result",4]]],[11,"deserialize","move_ir_types::location","",47,[[],["result",4]]],[11,"serialize","move_ir_types::ast","",16,[[],["result",4]]],[11,"serialize","","",17,[[],["result",4]]],[11,"serialize","move_ir_types::location","",47,[[],["result",4]]]],"p":[[3,"Program"],[3,"Script"],[3,"QualifiedModuleIdent"],[3,"ModuleDefinition"],[3,"ModuleDependency"],[3,"ImportDefinition"],[3,"QualifiedStructIdent"],[3,"StructDefinition_"],[3,"StructDependency"],[3,"FunctionSignature"],[3,"FunctionDependency"],[3,"Function_"],[3,"IfElse"],[3,"While"],[3,"Loop"],[3,"Block_"],[3,"BlockLabel"],[3,"NopLabel"],[4,"ScriptOrModule"],[4,"ModuleIdent"],[4,"Kind"],[4,"Type"],[4,"StructDefinitionFields"],[13,"Move"],[4,"FunctionVisibility"],[4,"FunctionBody"],[13,"Move"],[13,"Bytecode"],[4,"Builtin"],[4,"FunctionCall_"],[13,"ModuleFunctionCall"],[4,"LValue_"],[4,"Cmd_"],[4,"Statement"],[4,"CopyableVal_"],[4,"UnaryOp"],[4,"BinOp"],[4,"Exp_"],[13,"Borrow"],[4,"Bytecode_"],[3,"ModuleName"],[3,"Field_"],[3,"StructName"],[3,"FunctionName"],[3,"Var_"],[3,"TypeVar_"],[3,"Spanned"],[3,"Loc"],[3,"Invariant_"],[3,"SyntheticDefinition_"],[4,"FieldOrIndex"],[4,"StorageLocation"],[13,"GlobalResource"],[13,"AccessPath"],[4,"SpecExp"],[13,"GlobalExists"],[4,"Condition_"]]},\
"move_lang":{"doc":"","i":[[5,"move_check","move_lang","Given a set of targets and a set of dependencies - Checks…",null,[[["option",4],["address",3]],["result",6]]],[5,"move_check_no_report","","Move check but it returns the errors instead of reporting…",null,[[["option",4],["address",3]],["result",6]]],[5,"move_compile","","Given a set of targets and a set of dependencies - Checks…",null,[[["option",4],["address",3]],["result",6]]],[5,"move_compile_no_report","","Move compile but it returns the errors instead of…",null,[[["option",4],["address",3]],["result",6]]],[5,"move_compile_to_expansion_no_report","","Move compile up to expansion phase, returning errors…",null,[[["option",4],["address",3]],["result",6]]],[5,"sanity_check_compiled_units","","Runs the bytecode verifier on the compiled units Fails if…",null,[[["vec",3],["compiledunit",4],["filessourcetext",6]]]],[5,"output_compiled_units","","Given a file map and a set of compiled programs, saves the…",null,[[["vec",3],["compiledunit",4],["filessourcetext",6]],["result",6]]],[5,"find_move_filenames","","",null,[[],[["vec",3],["result",6]]]],[5,"is_permitted_printable_char","","Determine if a character is an allowed eye-visible…",null,[[]]],[5,"is_permitted_newline_char","","Determine if a character is a permitted newline character.",null,[[]]],[5,"is_permitted_char","","Determine if a character is permitted character.",null,[[]]],[0,"cfgir","","",null,null],[5,"refine_inference_and_verify","move_lang::cfgir","",null,[[["errors",6],["functionsignature",3],["uniquemap",3],["btreemap",3],["btreeset",3],["blockcfg",3]]]],[5,"optimize","","",null,[[["uniquemap",3],["functionsignature",3],["blockcfg",3]]]],[0,"ast","","",null,null],[3,"Program","move_lang::cfgir::ast","",null,null],[12,"modules","","",0,null],[12,"scripts","","",0,null],[3,"Script","","",null,null],[12,"loc","","",1,null],[12,"function_name","","",1,null],[12,"function","","",1,null],[3,"ModuleDefinition","","",null,null],[12,"is_source_module","","",2,null],[12,"dependency_order","","`dependency_order` is the topological order/rank in the…",2,null],[12,"structs","","",2,null],[12,"functions","","",2,null],[3,"Function","","",null,null],[12,"visibility","","",3,null],[12,"signature","","",3,null],[12,"acquires","","",3,null],[12,"body","","",3,null],[4,"FunctionBody_","","",null,null],[13,"Native","","",4,null],[13,"Defined","","",4,null],[12,"locals","move_lang::cfgir::ast::FunctionBody_","",5,null],[12,"start","","",5,null],[12,"blocks","","",5,null],[5,"remap_labels","move_lang::cfgir::ast","",null,[[["btreemap",3],["label",3],["basicblocks",6]]]],[6,"FunctionBody","","",null,null],[6,"BasicBlocks","","",null,null],[6,"BasicBlock","","",null,null],[0,"command_line","move_lang","",null,null],[5,"parse_address","move_lang::command_line","",null,[[],[["string",3],["result",4],["address",3]]]],[17,"DEPENDENCY","","",null,null],[17,"DEPENDENCY_SHORT","","",null,null],[17,"SENDER","","",null,null],[17,"SENDER_SHORT","","",null,null],[17,"OUT_DIR","","",null,null],[17,"OUT_DIR_SHORT","","",null,null],[17,"DEFAULT_OUTPUT_DIR","","",null,null],[17,"SOURCE_MAP","","",null,null],[17,"SOURCE_MAP_SHORT","","",null,null],[0,"compiled_unit","move_lang","",null,null],[3,"VarInfo","move_lang::compiled_unit","",null,null],[12,"type_","","",6,null],[12,"index","","",6,null],[3,"SpecInfo","","",null,null],[12,"offset","","",7,null],[12,"used_locals","","",7,null],[3,"FunctionInfo","","",null,null],[12,"spec_info","","",8,null],[12,"parameters","","",8,null],[4,"CompiledUnit","","",null,null],[13,"Module","","",9,null],[12,"ident","move_lang::compiled_unit::CompiledUnit","",10,null],[12,"module","","",10,null],[12,"source_map","","",10,null],[12,"function_infos","","",10,null],[13,"Script","move_lang::compiled_unit","",9,null],[12,"loc","move_lang::compiled_unit::CompiledUnit","",11,null],[12,"key","","",11,null],[12,"script","","",11,null],[12,"source_map","","",11,null],[12,"function_info","","",11,null],[5,"verify_units","move_lang::compiled_unit","",null,[[["vec",3],["compiledunit",4]]]],[11,"name","","",9,[[],["string",3]]],[11,"serialize","","",9,[[],["vec",3]]],[11,"serialize_debug","","",9,[[],["vec",3]]],[11,"serialize_source_map","","",9,[[],["vec",3]]],[11,"verify","","",9,[[]]],[0,"errors","move_lang","",null,null],[5,"check_errors","move_lang::errors","",null,[[["errors",6]],[["result",4],["errors",6]]]],[5,"report_errors","","",null,[[["errors",6],["filessourcetext",6]]]],[5,"report_errors_to_buffer","","",null,[[["errors",6],["filessourcetext",6]],["vec",3]]],[5,"report_errors_to_color_buffer","","",null,[[["errors",6],["filessourcetext",6]],["vec",3]]],[6,"Errors","","",null,null],[6,"Error","","",null,null],[6,"ErrorSlice","","",null,null],[6,"HashableError","","",null,null],[6,"FilesSourceText","","",null,null],[0,"expansion","move_lang","",null,null],[0,"ast","move_lang::expansion","",null,null],[3,"Program","move_lang::expansion::ast","",null,null],[12,"modules","","",12,null],[12,"scripts","","",12,null],[3,"Script","","",null,null],[12,"loc","","",13,null],[12,"function_name","","",13,null],[12,"function","","",13,null],[12,"specs","","",13,null],[3,"ModuleDefinition","","",null,null],[12,"loc","","",14,null],[12,"is_source_module","","",14,null],[12,"structs","","",14,null],[12,"functions","","",14,null],[12,"specs","","",14,null],[3,"StructDefinition","","",null,null],[12,"loc","","",15,null],[12,"resource_opt","","",15,null],[12,"type_parameters","","",15,null],[12,"fields","","",15,null],[3,"FunctionSignature","","",null,null],[12,"type_parameters","","",16,null],[12,"parameters","","",16,null],[12,"return_type","","",16,null],[3,"SpecId","","",null,null],[3,"Function","","",null,null],[12,"loc","","",17,null],[12,"visibility","","",17,null],[12,"signature","","",17,null],[12,"acquires","","",17,null],[12,"body","","",17,null],[12,"specs","","",17,null],[3,"SpecBlock_","","",null,null],[12,"target","","",18,null],[12,"members","","",18,null],[3,"PragmaProperty_","","",null,null],[12,"name","","",19,null],[12,"value","","",19,null],[4,"StructFields","","",null,null],[13,"Defined","","",20,null],[13,"Native","","",20,null],[4,"FunctionBody_","","",null,null],[13,"Defined","","",21,null],[13,"Native","","",21,null],[4,"SpecBlockMember_","","",null,null],[13,"Condition","","",22,null],[12,"kind","move_lang::expansion::ast::SpecBlockMember_","",23,null],[12,"exp","","",23,null],[13,"Function","move_lang::expansion::ast","",22,null],[12,"name","move_lang::expansion::ast::SpecBlockMember_","",24,null],[12,"signature","","",24,null],[12,"body","","",24,null],[13,"Variable","move_lang::expansion::ast","",22,null],[12,"is_global","move_lang::expansion::ast::SpecBlockMember_","",25,null],[12,"name","","",25,null],[12,"type_parameters","","",25,null],[12,"type_","","",25,null],[13,"Include","move_lang::expansion::ast","",22,null],[12,"exp","move_lang::expansion::ast::SpecBlockMember_","",26,null],[13,"Apply","move_lang::expansion::ast","",22,null],[12,"exp","move_lang::expansion::ast::SpecBlockMember_","",27,null],[12,"patterns","","",27,null],[12,"exclusion_patterns","","",27,null],[13,"Pragma","move_lang::expansion::ast","",22,null],[12,"properties","move_lang::expansion::ast::SpecBlockMember_","",28,null],[4,"ModuleAccess_","move_lang::expansion::ast","",null,null],[13,"Name","","",29,null],[13,"ModuleAccess","","",29,null],[4,"Type_","","",null,null],[13,"Unit","","",30,null],[13,"Multiple","","",30,null],[13,"Apply","","",30,null],[13,"Ref","","",30,null],[13,"Fun","","",30,null],[13,"UnresolvedError","","",30,null],[4,"LValue_","","",null,null],[13,"Var","","",31,null],[13,"Unpack","","",31,null],[4,"ExpDotted_","","",null,null],[13,"Exp","","",32,null],[13,"Dot","","",32,null],[4,"Value_","","",null,null],[13,"Address","","",33,null],[13,"U8","","",33,null],[13,"U64","","",33,null],[13,"U128","","",33,null],[13,"Bool","","",33,null],[13,"Bytearray","","",33,null],[4,"Exp_","","",null,null],[13,"Value","","",34,null],[13,"InferredNum","","",34,null],[13,"Move","","",34,null],[13,"Copy","","",34,null],[13,"Name","","",34,null],[13,"Call","","",34,null],[13,"Pack","","",34,null],[13,"IfElse","","",34,null],[13,"While","","",34,null],[13,"Loop","","",34,null],[13,"Block","","",34,null],[13,"Lambda","","",34,null],[13,"Assign","","",34,null],[13,"FieldMutate","","",34,null],[13,"Mutate","","",34,null],[13,"Return","","",34,null],[13,"Abort","","",34,null],[13,"Break","","",34,null],[13,"Continue","","",34,null],[13,"Dereference","","",34,null],[13,"UnaryExp","","",34,null],[13,"BinopExp","","",34,null],[13,"ExpList","","",34,null],[13,"Unit","","",34,null],[12,"trailing","move_lang::expansion::ast::Exp_","",35,null],[13,"Borrow","move_lang::expansion::ast","",34,null],[13,"ExpDotted","","",34,null],[13,"Index","","",34,null],[13,"Cast","","",34,null],[13,"Annotate","","",34,null],[13,"Spec","","",34,null],[13,"UnresolvedError","","",34,null],[4,"SequenceItem_","","",null,null],[13,"Seq","","",36,null],[13,"Declare","","",36,null],[13,"Bind","","",36,null],[6,"Fields","","",null,null],[6,"FunctionBody","","",null,null],[6,"SpecBlock","","",null,null],[6,"SpecBlockMember","","",null,null],[6,"PragmaProperty","","",null,null],[6,"ModuleAccess","","",null,null],[6,"Type","","",null,null],[6,"LValue","","",null,null],[6,"LValueList_","","",null,null],[6,"LValueList","","",null,null],[6,"ExpDotted","","",null,null],[6,"Value","","",null,null],[6,"Exp","","",null,null],[6,"Sequence","","",null,null],[6,"SequenceItem","","",null,null],[11,"new","","",37,[[]]],[11,"inner","","",37,[[]]],[0,"hlir","move_lang","",null,null],[0,"ast","move_lang::hlir","",null,null],[3,"Program","move_lang::hlir::ast","",null,null],[12,"modules","","",38,null],[12,"scripts","","",38,null],[3,"Script","","",null,null],[12,"loc","","",39,null],[12,"function_name","","",39,null],[12,"function","","",39,null],[3,"ModuleDefinition","","",null,null],[12,"is_source_module","","",40,null],[12,"dependency_order","","`dependency_order` is the topological order/rank in the…",40,null],[12,"structs","","",40,null],[12,"functions","","",40,null],[3,"StructDefinition","","",null,null],[12,"resource_opt","","",41,null],[12,"type_parameters","","",41,null],[12,"fields","","",41,null],[3,"FunctionSignature","","",null,null],[12,"type_parameters","","",42,null],[12,"parameters","","",42,null],[12,"return_type","","",42,null],[3,"Function","","",null,null],[12,"visibility","","",43,null],[12,"signature","","",43,null],[12,"acquires","","",43,null],[12,"body","","",43,null],[3,"Label","","",null,null],[12,"0","","",44,null],[3,"ModuleCall","","",null,null],[12,"module","","",45,null],[12,"name","","",45,null],[12,"type_arguments","","",45,null],[12,"arguments","","",45,null],[12,"acquires","","",45,null],[3,"Exp","","",null,null],[12,"ty","","",46,null],[12,"exp","","",46,null],[4,"StructFields","","",null,null],[13,"Defined","","",47,null],[13,"Native","","",47,null],[4,"FunctionBody_","","",null,null],[13,"Native","","",48,null],[13,"Defined","","",48,null],[12,"locals","move_lang::hlir::ast::FunctionBody_","",49,null],[12,"body","","",49,null],[4,"TypeName_","move_lang::hlir::ast","",null,null],[13,"Builtin","","",50,null],[13,"ModuleType","","",50,null],[4,"BaseType_","","",null,null],[13,"Param","","",51,null],[13,"Apply","","",51,null],[13,"Unreachable","","",51,null],[13,"UnresolvedError","","",51,null],[4,"SingleType_","","",null,null],[13,"Base","","",52,null],[13,"Ref","","",52,null],[4,"Type_","","",null,null],[13,"Unit","","",53,null],[13,"Single","","",53,null],[13,"Multiple","","",53,null],[4,"Statement_","","",null,null],[13,"Command","","",54,null],[13,"IfElse","","",54,null],[12,"cond","move_lang::hlir::ast::Statement_","",55,null],[12,"if_block","","",55,null],[12,"else_block","","",55,null],[13,"While","move_lang::hlir::ast","",54,null],[12,"cond","move_lang::hlir::ast::Statement_","",56,null],[12,"block","","",56,null],[13,"Loop","move_lang::hlir::ast","",54,null],[12,"block","move_lang::hlir::ast::Statement_","",57,null],[12,"has_break","","",57,null],[12,"has_return_abort","","",57,null],[4,"Command_","move_lang::hlir::ast","",null,null],[13,"Assign","","",58,null],[13,"Mutate","","",58,null],[13,"Abort","","",58,null],[13,"Return","","",58,null],[13,"Break","","",58,null],[13,"Continue","","",58,null],[13,"IgnoreAndPop","","",58,null],[12,"pop_num","move_lang::hlir::ast::Command_","",59,null],[12,"exp","","",59,null],[13,"Jump","move_lang::hlir::ast","",58,null],[13,"JumpIf","","",58,null],[12,"cond","move_lang::hlir::ast::Command_","",60,null],[12,"if_true","","",60,null],[12,"if_false","","",60,null],[4,"LValue_","move_lang::hlir::ast","",null,null],[13,"Ignore","","",61,null],[13,"Var","","",61,null],[13,"Unpack","","",61,null],[4,"BuiltinFunction_","","",null,null],[13,"MoveToSender","","",62,null],[13,"MoveTo","","",62,null],[13,"MoveFrom","","",62,null],[13,"BorrowGlobal","","",62,null],[13,"Exists","","",62,null],[4,"UnannotatedExp_","","",null,null],[13,"Unit","","",63,null],[12,"trailing","move_lang::hlir::ast::UnannotatedExp_","",64,null],[13,"Value","move_lang::hlir::ast","",63,null],[13,"Move","","",63,null],[12,"from_user","move_lang::hlir::ast::UnannotatedExp_","",65,null],[12,"var","","",65,null],[13,"Copy","move_lang::hlir::ast","",63,null],[12,"from_user","move_lang::hlir::ast::UnannotatedExp_","",66,null],[12,"var","","",66,null],[13,"ModuleCall","move_lang::hlir::ast","",63,null],[13,"Builtin","","",63,null],[13,"Freeze","","",63,null],[13,"Dereference","","",63,null],[13,"UnaryExp","","",63,null],[13,"BinopExp","","",63,null],[13,"Pack","","",63,null],[13,"ExpList","","",63,null],[13,"Borrow","","",63,null],[13,"BorrowLocal","","",63,null],[13,"Cast","","",63,null],[13,"Unreachable","","",63,null],[13,"Spec","","",63,null],[13,"UnresolvedError","","",63,null],[4,"ExpListItem","","",null,null],[13,"Single","","",67,null],[13,"Splat","","",67,null],[5,"exp","","",null,[[["type",6],["unannotatedexp",6]],["exp",3]]],[6,"FunctionBody","","",null,null],[6,"TypeName","","",null,null],[6,"BaseType","","",null,null],[6,"SingleType","","",null,null],[6,"Type","","",null,null],[6,"Statement","","",null,null],[6,"Block","","",null,null],[6,"BasicBlocks","","",null,null],[6,"BasicBlock","","",null,null],[6,"Command","","",null,null],[6,"LValue","","",null,null],[6,"BuiltinFunction","","",null,null],[6,"UnannotatedExp","","",null,null],[11,"is_parameter","","",42,[[["var",3]]]],[11,"is_terminal","","",58,[[]]],[11,"is_exit","","",58,[[]]],[11,"is_unit","","",58,[[]]],[11,"successors","","",58,[[],[["label",3],["btreeset",3]]]],[11,"is_unit","","",46,[[]]],[11,"is_unit","","",63,[[]]],[11,"builtin","","",51,[[["loc",3],["builtintypename_",4],["vec",3],["basetype",6]],["basetype",6]]],[11,"kind","","",51,[[],["kind",6]]],[11,"bool","","",51,[[["loc",3]],["basetype",6]]],[11,"address","","",51,[[["loc",3]],["basetype",6]]],[11,"u64","","",51,[[["loc",3]],["basetype",6]]],[11,"base","","",52,[[["basetype",6]],["singletype",6]]],[11,"bool","","",52,[[["loc",3]],["singletype",6]]],[11,"address","","",52,[[["loc",3]],["singletype",6]]],[11,"u64","","",52,[[["loc",3]],["singletype",6]]],[11,"kind","","",52,[[["loc",3]],["kind",6]]],[11,"base","","",53,[[["basetype",6]],["type",6]]],[11,"single","","",53,[[["singletype",6]],["type",6]]],[11,"bool","","",53,[[["loc",3]],["type",6]]],[11,"address","","",53,[[["loc",3]],["type",6]]],[11,"u64","","",53,[[["loc",3]],["type",6]]],[11,"type_at_index","","",53,[[],["singletype",6]]],[11,"from_vec","","",53,[[["loc",3],["vec",3],["singletype",6]],["type",6]]],[0,"ir_translation","move_lang","",null,null],[5,"fix_syntax_and_write","move_lang::ir_translation","",null,[[["path",3],["string",3]]]],[0,"naming","move_lang","",null,null],[0,"ast","move_lang::naming","",null,null],[3,"Program","move_lang::naming::ast","",null,null],[12,"modules","","",68,null],[12,"scripts","","",68,null],[3,"Script","","",null,null],[12,"loc","","",69,null],[12,"function_name","","",69,null],[12,"function","","",69,null],[3,"ModuleDefinition","","",null,null],[12,"is_source_module","","",70,null],[12,"dependency_order","","`dependency_order` is the topological order/rank in the…",70,null],[12,"structs","","",70,null],[12,"functions","","",70,null],[3,"StructDefinition","","",null,null],[12,"resource_opt","","",71,null],[12,"type_parameters","","",71,null],[12,"fields","","",71,null],[3,"FunctionSignature","","",null,null],[12,"type_parameters","","",72,null],[12,"parameters","","",72,null],[12,"return_type","","",72,null],[3,"Function","","",null,null],[12,"visibility","","",73,null],[12,"signature","","",73,null],[12,"acquires","","",73,null],[12,"body","","",73,null],[3,"TParamID","","",null,null],[12,"0","","",74,null],[3,"TParam","","",null,null],[12,"id","","",75,null],[12,"user_specified_name","","",75,null],[12,"kind","","",75,null],[3,"TVar","","",null,null],[4,"StructFields","","",null,null],[13,"Defined","","",76,null],[13,"Native","","",76,null],[4,"FunctionBody_","","",null,null],[13,"Defined","","",77,null],[13,"Native","","",77,null],[4,"BuiltinTypeName_","","",null,null],[13,"Address","","",78,null],[13,"Signer","","",78,null],[13,"U8","","",78,null],[13,"U64","","",78,null],[13,"U128","","",78,null],[13,"Vector","","",78,null],[13,"Bool","","",78,null],[4,"TypeName_","","",null,null],[13,"Multiple","","",79,null],[13,"Builtin","","",79,null],[13,"ModuleType","","",79,null],[4,"Type_","","",null,null],[13,"Unit","","",80,null],[13,"Ref","","",80,null],[13,"Param","","",80,null],[13,"Apply","","",80,null],[13,"Var","","",80,null],[13,"Anything","","",80,null],[13,"UnresolvedError","","",80,null],[4,"LValue_","","",null,null],[13,"Ignore","","",81,null],[13,"Var","","",81,null],[13,"Unpack","","",81,null],[4,"ExpDotted_","","",null,null],[13,"Exp","","",82,null],[13,"Dot","","",82,null],[4,"BuiltinFunction_","","",null,null],[13,"MoveToSender","","",83,null],[13,"MoveTo","","",83,null],[13,"MoveFrom","","",83,null],[13,"BorrowGlobal","","",83,null],[13,"Exists","","",83,null],[13,"Freeze","","",83,null],[13,"Assert","","",83,null],[4,"Exp_","","",null,null],[13,"Value","","",84,null],[13,"InferredNum","","",84,null],[13,"Move","","",84,null],[13,"Copy","","",84,null],[13,"Use","","",84,null],[13,"ModuleCall","","",84,null],[13,"Builtin","","",84,null],[13,"IfElse","","",84,null],[13,"While","","",84,null],[13,"Loop","","",84,null],[13,"Block","","",84,null],[13,"Assign","","",84,null],[13,"FieldMutate","","",84,null],[13,"Mutate","","",84,null],[13,"Return","","",84,null],[13,"Abort","","",84,null],[13,"Break","","",84,null],[13,"Continue","","",84,null],[13,"Dereference","","",84,null],[13,"UnaryExp","","",84,null],[13,"BinopExp","","",84,null],[13,"Pack","","",84,null],[13,"ExpList","","",84,null],[13,"Unit","","",84,null],[12,"trailing","move_lang::naming::ast::Exp_","",85,null],[13,"DerefBorrow","move_lang::naming::ast","",84,null],[13,"Borrow","","",84,null],[13,"Cast","","",84,null],[13,"Annotate","","",84,null],[13,"Spec","","",84,null],[13,"UnresolvedError","","",84,null],[4,"SequenceItem_","","",null,null],[13,"Seq","","",86,null],[13,"Declare","","",86,null],[13,"Bind","","",86,null],[6,"FunctionBody","","",null,null],[6,"BuiltinTypeName","","",null,null],[6,"TypeName","","",null,null],[6,"Type","","",null,null],[6,"LValue","","",null,null],[6,"LValueList_","","",null,null],[6,"LValueList","","",null,null],[6,"ExpDotted","","",null,null],[6,"BuiltinFunction","","",null,null],[6,"Exp","","",null,null],[6,"Sequence","","",null,null],[6,"SequenceItem","","",null,null],[18,"ADDRESS","","",78,null],[18,"SIGNER","","",78,null],[18,"U_8","","",78,null],[18,"U_64","","",78,null],[18,"U_128","","",78,null],[18,"BOOL","","",78,null],[18,"VECTOR","","",78,null],[11,"all_names","","",78,[[],["btreeset",3]]],[11,"numeric","","",78,[[],[["btreeset",3],["builtintypename_",4]]]],[11,"bits","","",78,[[],[["btreeset",3],["builtintypename_",4]]]],[11,"ordered","","",78,[[],[["btreeset",3],["builtintypename_",4]]]],[11,"is_numeric","","",78,[[]]],[11,"resolve","","",78,[[],["option",4]]],[11,"tparam_constraints","","",78,[[["loc",3]],[["vec",3],["kind",6]]]],[11,"next","","",74,[[],["tparamid",3]]],[11,"next","","",87,[[],["tvar",3]]],[18,"MOVE_TO_SENDER","","",83,null],[18,"MOVE_TO","","",83,null],[18,"MOVE_FROM","","",83,null],[18,"BORROW_GLOBAL","","",83,null],[18,"BORROW_GLOBAL_MUT","","",83,null],[18,"EXISTS","","",83,null],[18,"FREEZE","","",83,null],[18,"ASSERT","","",83,null],[11,"all_names","","",83,[[],["btreeset",3]]],[11,"resolve","","",83,[[["type",6],["option",4]],["option",4]]],[11,"builtin_","","",80,[[["builtintypename",6],["type",6],["vec",3]],["type_",4]]],[11,"builtin","","",80,[[["loc",3],["builtintypename",6],["type",6],["vec",3]],["type",6]]],[11,"bool","","",80,[[["loc",3]],["type",6]]],[11,"address","","",80,[[["loc",3]],["type",6]]],[11,"signer","","",80,[[["loc",3]],["type",6]]],[11,"u8","","",80,[[["loc",3]],["type",6]]],[11,"u64","","",80,[[["loc",3]],["type",6]]],[11,"u128","","",80,[[["loc",3]],["type",6]]],[11,"vector","","",80,[[["loc",3],["type",6]],["type",6]]],[11,"multiple","","",80,[[["loc",3],["type",6],["vec",3]],["type",6]]],[11,"multiple_","","",80,[[["loc",3],["type",6],["vec",3]],["type_",4]]],[11,"builtin_name","","",80,[[],[["builtintypename",6],["option",4]]]],[11,"type_","move_lang::expansion::ast","",33,[[["loc",3]],["type",6]]],[0,"parser","move_lang","",null,null],[0,"ast","move_lang::parser","",null,null],[3,"Program","move_lang::parser::ast","",null,null],[12,"source_definitions","","",88,null],[12,"lib_definitions","","",88,null],[3,"Script","","",null,null],[12,"loc","","",89,null],[12,"uses","","",89,null],[12,"function","","",89,null],[12,"specs","","",89,null],[3,"ModuleName","","",null,null],[12,"0","","",90,null],[3,"ModuleIdent_","","",null,null],[12,"name","","",91,null],[12,"address","","",91,null],[3,"ModuleIdent","","",null,null],[12,"0","","",92,null],[3,"ModuleDefinition","","",null,null],[12,"loc","","",93,null],[12,"name","","",93,null],[12,"members","","",93,null],[3,"Field","","",null,null],[12,"0","","",94,null],[3,"StructName","","",null,null],[12,"0","","",95,null],[3,"StructDefinition","","",null,null],[12,"loc","","",96,null],[12,"resource_opt","","",96,null],[12,"name","","",96,null],[12,"type_parameters","","",96,null],[12,"fields","","",96,null],[3,"FunctionName","","",null,null],[12,"0","","",97,null],[3,"FunctionSignature","","",null,null],[12,"type_parameters","","",98,null],[12,"parameters","","",98,null],[12,"return_type","","",98,null],[3,"Function","","",null,null],[12,"loc","","",99,null],[12,"visibility","","",99,null],[12,"signature","","",99,null],[12,"acquires","","",99,null],[12,"name","","",99,null],[12,"body","","",99,null],[3,"SpecBlock_","","",null,null],[12,"target","","",100,null],[12,"uses","","",100,null],[12,"members","","",100,null],[3,"PragmaProperty_","","",null,null],[12,"name","","",101,null],[12,"value","","",101,null],[3,"SpecApplyPattern_","","",null,null],[12,"visibility","","",102,null],[12,"name_pattern","","",102,null],[12,"type_parameters","","",102,null],[3,"Var","","",null,null],[12,"0","","",103,null],[4,"Definition","","",null,null],[13,"Module","","",104,null],[13,"Address","","",104,null],[13,"Script","","",104,null],[4,"Use","","",null,null],[13,"Module","","",105,null],[13,"Members","","",105,null],[4,"ModuleMember","","",null,null],[13,"Function","","",106,null],[13,"Struct","","",106,null],[13,"Spec","","",106,null],[13,"Use","","",106,null],[4,"StructFields","","",null,null],[13,"Defined","","",107,null],[13,"Native","","",107,null],[4,"FunctionVisibility","","",null,null],[13,"Public","","",108,null],[13,"Internal","","",108,null],[4,"FunctionBody_","","",null,null],[13,"Defined","","",109,null],[13,"Native","","",109,null],[4,"SpecBlockTarget_","","",null,null],[13,"Code","","",110,null],[13,"Module","","",110,null],[13,"Function","","",110,null],[13,"Structure","","",110,null],[13,"Schema","","",110,null],[4,"SpecApplyFragment_","","",null,null],[13,"Wildcard","","",111,null],[13,"NamePart","","",111,null],[4,"SpecBlockMember_","","",null,null],[13,"Condition","","",112,null],[12,"kind","move_lang::parser::ast::SpecBlockMember_","",113,null],[12,"exp","","",113,null],[13,"Function","move_lang::parser::ast","",112,null],[12,"name","move_lang::parser::ast::SpecBlockMember_","",114,null],[12,"signature","","",114,null],[12,"body","","",114,null],[13,"Variable","move_lang::parser::ast","",112,null],[12,"is_global","move_lang::parser::ast::SpecBlockMember_","",115,null],[12,"name","","",115,null],[12,"type_parameters","","",115,null],[12,"type_","","",115,null],[13,"Include","move_lang::parser::ast","",112,null],[12,"exp","move_lang::parser::ast::SpecBlockMember_","",116,null],[13,"Apply","move_lang::parser::ast","",112,null],[12,"exp","move_lang::parser::ast::SpecBlockMember_","",117,null],[12,"patterns","","",117,null],[12,"exclusion_patterns","","",117,null],[13,"Pragma","move_lang::parser::ast","",112,null],[12,"properties","move_lang::parser::ast::SpecBlockMember_","",118,null],[4,"SpecConditionKind","move_lang::parser::ast","",null,null],[13,"Assert","","",119,null],[13,"Assume","","",119,null],[13,"Decreases","","",119,null],[13,"AbortsIf","","",119,null],[13,"SucceedsIf","","",119,null],[13,"Ensures","","",119,null],[13,"Requires","","",119,null],[13,"RequiresModule","","",119,null],[13,"Invariant","","",119,null],[13,"InvariantUpdate","","",119,null],[13,"InvariantPack","","",119,null],[13,"InvariantUnpack","","",119,null],[13,"InvariantModule","","",119,null],[4,"InvariantKind","","",null,null],[13,"Data","","",120,null],[13,"Update","","",120,null],[13,"Pack","","",120,null],[13,"Unpack","","",120,null],[13,"Module","","",120,null],[4,"ModuleAccess_","","",null,null],[13,"Name","","",121,null],[13,"ModuleAccess","","",121,null],[13,"QualifiedModuleAccess","","",121,null],[4,"Kind_","","",null,null],[13,"Unknown","","",122,null],[13,"Resource","","",122,null],[13,"Affine","","",122,null],[13,"Copyable","","",122,null],[4,"Type_","","",null,null],[13,"Apply","","",123,null],[13,"Ref","","",123,null],[13,"Fun","","",123,null],[13,"Unit","","",123,null],[13,"Multiple","","",123,null],[4,"Bind_","","",null,null],[13,"Var","","",124,null],[13,"Unpack","","",124,null],[4,"Value_","","",null,null],[13,"Address","","",125,null],[13,"U8","","",125,null],[13,"U64","","",125,null],[13,"U128","","",125,null],[13,"Bool","","",125,null],[13,"HexString","","",125,null],[13,"ByteString","","",125,null],[4,"UnaryOp_","","",null,null],[13,"Not","","",126,null],[4,"BinOp_","","",null,null],[13,"Add","","",127,null],[13,"Sub","","",127,null],[13,"Mul","","",127,null],[13,"Mod","","",127,null],[13,"Div","","",127,null],[13,"BitOr","","",127,null],[13,"BitAnd","","",127,null],[13,"Xor","","",127,null],[13,"Shl","","",127,null],[13,"Shr","","",127,null],[13,"Range","","",127,null],[13,"Implies","","",127,null],[13,"And","","",127,null],[13,"Or","","",127,null],[13,"Eq","","",127,null],[13,"Neq","","",127,null],[13,"Lt","","",127,null],[13,"Gt","","",127,null],[13,"Le","","",127,null],[13,"Ge","","",127,null],[4,"Exp_","","",null,null],[13,"Value","","",128,null],[13,"InferredNum","","",128,null],[13,"Move","","",128,null],[13,"Copy","","",128,null],[13,"Name","","",128,null],[13,"Call","","",128,null],[13,"Pack","","",128,null],[13,"IfElse","","",128,null],[13,"While","","",128,null],[13,"Loop","","",128,null],[13,"Block","","",128,null],[13,"Lambda","","",128,null],[13,"ExpList","","",128,null],[13,"Unit","","",128,null],[13,"Assign","","",128,null],[13,"Return","","",128,null],[13,"Abort","","",128,null],[13,"Break","","",128,null],[13,"Continue","","",128,null],[13,"Dereference","","",128,null],[13,"UnaryExp","","",128,null],[13,"BinopExp","","",128,null],[13,"Borrow","","",128,null],[13,"Dot","","",128,null],[13,"Index","","",128,null],[13,"Cast","","",128,null],[13,"Annotate","","",128,null],[13,"Spec","","",128,null],[13,"UnresolvedError","","",128,null],[4,"SequenceItem_","","",null,null],[13,"Seq","","",129,null],[13,"Declare","","",129,null],[13,"Bind","","",129,null],[6,"ResourceLoc","","",null,null],[6,"FunctionBody","","",null,null],[6,"SpecBlock","","",null,null],[6,"SpecBlockTarget","","",null,null],[6,"PragmaProperty","","",null,null],[6,"SpecApplyPattern","","",null,null],[6,"SpecApplyFragment","","",null,null],[6,"SpecBlockMember","","",null,null],[6,"ModuleAccess","","",null,null],[6,"Kind","","",null,null],[6,"Type","","",null,null],[6,"Bind","","",null,null],[6,"BindList","","",null,null],[6,"Value","","",null,null],[6,"UnaryOp","","",null,null],[6,"BinOp","","",null,null],[6,"Exp","","",null,null],[6,"Sequence","","",null,null],[6,"SequenceItem","","",null,null],[11,"loc","","",92,[[],["loc",3]]],[18,"SELF_NAME","","",90,null],[11,"starts_with_underscore","","",103,[[]]],[18,"VALUE_CONSTRAINT","","",122,null],[18,"RESOURCE_CONSTRAINT","","",122,null],[11,"is_resourceful","","",122,[[]]],[11,"unit","","",123,[[["loc",3]],["type",6]]],[18,"NOT","","",126,null],[11,"symbol","","",126,[[]]],[11,"is_pure","","",126,[[]]],[18,"ADD","","",127,null],[18,"SUB","","",127,null],[18,"MUL","","",127,null],[18,"MOD","","",127,null],[18,"DIV","","",127,null],[18,"BIT_OR","","",127,null],[18,"BIT_AND","","",127,null],[18,"XOR","","",127,null],[18,"SHL","","",127,null],[18,"SHR","","",127,null],[18,"AND","","",127,null],[18,"OR","","",127,null],[18,"EQ","","",127,null],[18,"NEQ","","",127,null],[18,"LT","","",127,null],[18,"GT","","",127,null],[18,"LE","","",127,null],[18,"GE","","",127,null],[18,"IMPLIES","","",127,null],[18,"RANGE","","",127,null],[11,"symbol","","",127,[[]]],[11,"is_pure","","",127,[[]]],[11,"is_spec_only","","",127,[[]]],[0,"shared","move_lang","",null,null],[3,"Address","move_lang::shared","",null,null],[3,"Counter","","",null,null],[5,"shortest_cycle","","",null,[[["digraphmap",6]],["vec",3]]],[5,"format_delim","","",null,[[["intoiterator",8]],["string",3]]],[5,"format_comma","","",null,[[["intoiterator",8]],["string",3]]],[0,"ast_debug","","",null,null],[3,"AstWriter","move_lang::shared::ast_debug","",null,null],[5,"print","","",null,[[]]],[5,"print_verbose","","",null,[[]]],[8,"AstDebug","","Simple trait used for pretty printing the various AST",null,null],[10,"ast_debug","","",130,[[["astwriter",3]]]],[11,"new_line","","",131,[[]]],[11,"write","","",131,[[]]],[11,"writeln","","",131,[[]]],[11,"indent","","",131,[[["fnonce",8]]]],[11,"block","","",131,[[["fnonce",8]]]],[11,"annotate","","",131,[[["fnonce",8]]]],[11,"list","","",131,[[["fnmut",8]]]],[11,"comma","","",131,[[["fnmut",8]]]],[11,"semicolon","","",131,[[["fnmut",8]]]],[0,"fake_natives","move_lang::shared","",null,null],[5,"is_fake_native","move_lang::shared::fake_natives","",null,[[["moduleident",3]]]],[0,"transaction","","\'Native\' functions that are actually bytecode isntructions…",null,null],[17,"MOD","move_lang::shared::fake_natives::transaction","",null,null],[17,"SENDER","","",null,null],[0,"remembering_unique_map","move_lang::shared","",null,null],[3,"RememberingUniqueMap","move_lang::shared::remembering_unique_map","wrapper around `UniqueMap` that remembers which values…",null,null],[3,"IntoIter","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[11,"new","","",132,[[]]],[11,"is_empty","","",132,[[]]],[11,"len","","",132,[[]]],[11,"add","","",132,[[],["result",4]]],[11,"key_gotten","","",132,[[]]],[11,"contains_key","","",132,[[]]],[11,"contains_key_","","",132,[[]]],[11,"get","","",132,[[],["option",4]]],[11,"get_mut","","",132,[[],["option",4]]],[11,"get_loc","","",132,[[],["option",4]]],[11,"remove","","",132,[[],["option",4]]],[11,"map","","",132,[[],["rememberinguniquemap",3]]],[11,"ref_map","","",132,[[],["rememberinguniquemap",3]]],[11,"union_with","","",132,[[]]],[11,"iter","","",132,[[],["iter",3]]],[11,"iter_mut","","",132,[[],["itermut",3]]],[11,"maybe_from_opt_iter","","",132,[[],[["result",4],["option",4]]]],[11,"maybe_from_iter","","",132,[[],[["result",4],["rememberinguniquemap",3]]]],[11,"into_inner","","",132,[[],["uniquemap",3]]],[11,"remember","","",132,[[],["btreeset",3]]],[0,"unique_map","move_lang::shared","",null,null],[3,"UniqueMap","move_lang::shared::unique_map","Unique wrapper around `BTreeMap` that throws on duplicate…",null,null],[3,"IntoIter","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[11,"new","","",133,[[]]],[11,"is_empty","","",133,[[]]],[11,"len","","",133,[[]]],[11,"add","","",133,[[],["result",4]]],[11,"contains_key","","",133,[[]]],[11,"contains_key_","","",133,[[]]],[11,"get","","",133,[[],["option",4]]],[11,"get_","","",133,[[],["option",4]]],[11,"get_mut","","",133,[[],["option",4]]],[11,"get_mut_","","",133,[[],["option",4]]],[11,"get_loc","","",133,[[],["option",4]]],[11,"get_loc_","","",133,[[],["option",4]]],[11,"remove","","",133,[[],["option",4]]],[11,"remove_","","",133,[[],["option",4]]],[11,"map","","",133,[[],["uniquemap",3]]],[11,"ref_map","","",133,[[],["uniquemap",3]]],[11,"union_with","","",133,[[]]],[11,"iter","","",133,[[],["iter",3]]],[11,"iter_mut","","",133,[[],["itermut",3]]],[11,"maybe_from_opt_iter","","",133,[[],[["option",4],["result",4]]]],[11,"maybe_from_iter","","",133,[[],[["result",4],["uniquemap",3]]]],[6,"Name","move_lang::shared","",null,null],[17,"ADDRESS_LENGTH","","",null,null],[8,"TName","","",null,null],[16,"Key","","",134,null],[16,"Loc","","",134,null],[10,"drop_loc","","",134,[[]]],[10,"clone_drop_loc","","",134,[[]]],[10,"add_loc","","",134,[[]]],[8,"Identifier","","",null,null],[10,"value","","",135,[[]]],[10,"loc","","",135,[[],["loc",3]]],[18,"LIBRA_CORE","","",136,null],[11,"new","","",136,[[]]],[11,"to_u8","","",136,[[]]],[11,"parse_str","","",136,[[],[["string",3],["result",4],["address",3]]]],[11,"next","","",137,[[]]],[0,"test_utils","move_lang","",null,null],[3,"StringError","move_lang::test_utils","",null,null],[5,"stdlib_files","","We need to replicate the specification of the…",null,[[],[["string",3],["vec",3]]]],[5,"read_env_var","","",null,[[],["string",3]]],[5,"read_bool_var","","",null,[[]]],[5,"error","","",null,[[["string",3]],["result",6]]],[5,"ir_tests","","",null,[[]]],[5,"translated_ir_test_name","","",null,[[],[["string",3],["option",4]]]],[17,"SENDER","","",null,null],[17,"STD_LIB_DIR","","",null,null],[17,"FUNCTIONAL_TEST_DIR","","",null,null],[17,"MOVE_CHECK_DIR","","",null,null],[17,"STD_LIB_TRANSACTION_SCRIPTS_DIR","","",null,null],[17,"PATH_TO_IR_TESTS","","",null,null],[17,"MIGRATION_SUB_DIR","","",null,null],[17,"TODO_EXTENSION","","",null,null],[17,"MOVE_EXTENSION","","",null,null],[17,"IR_EXTENSION","","",null,null],[17,"DEBUG_MODULE_FILE_NAME","","",null,null],[17,"COMPLETED_DIRECTORIES","","",null,null],[0,"typing","move_lang","",null,null],[0,"ast","move_lang::typing","",null,null],[3,"Program","move_lang::typing::ast","",null,null],[12,"modules","","",138,null],[12,"scripts","","",138,null],[3,"Script","","",null,null],[12,"loc","","",139,null],[12,"function_name","","",139,null],[12,"function","","",139,null],[3,"ModuleDefinition","","",null,null],[12,"is_source_module","","",140,null],[12,"dependency_order","","`dependency_order` is the topological order/rank in the…",140,null],[12,"structs","","",140,null],[12,"functions","","",140,null],[3,"Function","","",null,null],[12,"visibility","","",141,null],[12,"signature","","",141,null],[12,"acquires","","",141,null],[12,"body","","",141,null],[3,"ModuleCall","","",null,null],[12,"module","","",142,null],[12,"name","","",142,null],[12,"type_arguments","","",142,null],[12,"arguments","","",142,null],[12,"parameter_types","","",142,null],[12,"acquires","","",142,null],[3,"Exp","","",null,null],[12,"ty","","",143,null],[12,"exp","","",143,null],[4,"FunctionBody_","","",null,null],[13,"Defined","","",144,null],[13,"Native","","",144,null],[4,"LValue_","","",null,null],[13,"Ignore","","",145,null],[13,"Var","","",145,null],[13,"Unpack","","",145,null],[13,"BorrowUnpack","","",145,null],[4,"BuiltinFunction_","","",null,null],[13,"MoveToSender","","",146,null],[13,"MoveTo","","",146,null],[13,"MoveFrom","","",146,null],[13,"BorrowGlobal","","",146,null],[13,"Exists","","",146,null],[13,"Freeze","","",146,null],[13,"Assert","","",146,null],[4,"UnannotatedExp_","","",null,null],[13,"Unit","","",147,null],[12,"trailing","move_lang::typing::ast::UnannotatedExp_","",148,null],[13,"Value","move_lang::typing::ast","",147,null],[13,"InferredNum","","",147,null],[13,"Move","","",147,null],[12,"from_user","move_lang::typing::ast::UnannotatedExp_","",149,null],[12,"var","","",149,null],[13,"Copy","move_lang::typing::ast","",147,null],[12,"from_user","move_lang::typing::ast::UnannotatedExp_","",150,null],[12,"var","","",150,null],[13,"Use","move_lang::typing::ast","",147,null],[13,"ModuleCall","","",147,null],[13,"Builtin","","",147,null],[13,"IfElse","","",147,null],[13,"While","","",147,null],[13,"Loop","","",147,null],[12,"has_break","move_lang::typing::ast::UnannotatedExp_","",151,null],[12,"body","","",151,null],[13,"Block","move_lang::typing::ast","",147,null],[13,"Assign","","",147,null],[13,"Mutate","","",147,null],[13,"Return","","",147,null],[13,"Abort","","",147,null],[13,"Break","","",147,null],[13,"Continue","","",147,null],[13,"Dereference","","",147,null],[13,"UnaryExp","","",147,null],[13,"BinopExp","","",147,null],[13,"Pack","","",147,null],[13,"ExpList","","",147,null],[13,"Borrow","","",147,null],[13,"TempBorrow","","",147,null],[13,"BorrowLocal","","",147,null],[13,"Cast","","",147,null],[13,"Annotate","","",147,null],[13,"Spec","","",147,null],[13,"UnresolvedError","","",147,null],[4,"SequenceItem_","","",null,null],[13,"Seq","","",152,null],[13,"Declare","","",152,null],[13,"Bind","","",152,null],[4,"ExpListItem","","",null,null],[13,"Single","","",153,null],[13,"Splat","","",153,null],[5,"exp","","",null,[[["type",6],["unannotatedexp",6]],["exp",3]]],[5,"single_item","","",null,[[["exp",3]],["explistitem",4]]],[5,"splat_item","","",null,[[["loc",3],["exp",3]],["explistitem",4]]],[6,"FunctionBody","","",null,null],[6,"LValue","","",null,null],[6,"LValueList_","","",null,null],[6,"LValueList","","",null,null],[6,"BuiltinFunction","","",null,null],[6,"UnannotatedExp","","",null,null],[6,"Sequence","","",null,null],[6,"SequenceItem","","",null,null],[6,"CommentMap","move_lang","Types to represent comments.",null,null],[6,"MatchedFileCommentMap","","",null,null],[6,"FileCommentMap","","",null,null],[17,"MOVE_EXTENSION","","",null,null],[17,"MOVE_COMPILED_EXTENSION","","",null,null],[17,"SOURCE_MAP_EXTENSION","","",null,null],[11,"from","move_lang::cfgir::ast","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","move_lang::compiled_unit","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","move_lang::expansion::ast","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"equivalent","","",37,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","move_lang::hlir::ast","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"equivalent","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"borrow","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"equivalent","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"equivalent","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"from","move_lang::naming::ast","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"vzip","","",70,[[]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"vzip","","",71,[[]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"vzip","","",72,[[]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"vzip","","",73,[[]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"vzip","","",74,[[]]],[11,"equivalent","","",74,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"vzip","","",75,[[]]],[11,"equivalent","","",75,[[]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"vzip","","",87,[[]]],[11,"equivalent","","",87,[[]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"vzip","","",76,[[]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"vzip","","",77,[[]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"to_string","","",78,[[],["string",3]]],[11,"borrow","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"vzip","","",78,[[]]],[11,"equivalent","","",78,[[]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"to_string","","",79,[[],["string",3]]],[11,"borrow","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"vzip","","",79,[[]]],[11,"equivalent","","",79,[[]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"vzip","","",80,[[]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"vzip","","",81,[[]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"vzip","","",82,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"vzip","","",83,[[]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"vzip","","",84,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"vzip","","",86,[[]]],[11,"from","move_lang::parser::ast","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"vzip","","",88,[[]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"vzip","","",89,[[]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"to_string","","",90,[[],["string",3]]],[11,"borrow","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"vzip","","",90,[[]]],[11,"equivalent","","",90,[[]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"vzip","","",91,[[]]],[11,"equivalent","","",91,[[]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"to_string","","",92,[[],["string",3]]],[11,"borrow","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"vzip","","",92,[[]]],[11,"equivalent","","",92,[[]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"vzip","","",93,[[]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"to_string","","",94,[[],["string",3]]],[11,"borrow","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"vzip","","",94,[[]]],[11,"equivalent","","",94,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"to_string","","",95,[[],["string",3]]],[11,"borrow","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"vzip","","",95,[[]]],[11,"equivalent","","",95,[[]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"vzip","","",96,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"to_string","","",97,[[],["string",3]]],[11,"borrow","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"vzip","","",97,[[]]],[11,"equivalent","","",97,[[]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"vzip","","",98,[[]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"vzip","","",99,[[]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"vzip","","",100,[[]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"vzip","","",101,[[]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"vzip","","",102,[[]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"to_string","","",103,[[],["string",3]]],[11,"borrow","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"vzip","","",103,[[]]],[11,"equivalent","","",103,[[]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"vzip","","",104,[[]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"vzip","","",105,[[]]],[11,"equivalent","","",105,[[]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"vzip","","",106,[[]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"vzip","","",107,[[]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"vzip","","",108,[[]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"vzip","","",109,[[]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"vzip","","",110,[[]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"vzip","","",111,[[]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"vzip","","",112,[[]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"vzip","","",119,[[]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"vzip","","",120,[[]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"vzip","","",121,[[]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"vzip","","",122,[[]]],[11,"equivalent","","",122,[[]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"vzip","","",123,[[]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"vzip","","",124,[[]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"vzip","","",125,[[]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_string","","",126,[[],["string",3]]],[11,"borrow","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"vzip","","",126,[[]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_string","","",127,[[],["string",3]]],[11,"borrow","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"vzip","","",127,[[]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"vzip","","",128,[[]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"vzip","","",129,[[]]],[11,"from","move_lang::shared","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"to_string","","",136,[[],["string",3]]],[11,"borrow","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"vzip","","",136,[[]]],[11,"clear","","",136,[[]]],[11,"initialize","","",136,[[]]],[11,"encode_hex","","",136,[[]]],[11,"encode_hex_upper","","",136,[[]]],[11,"equivalent","","",136,[[]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"vzip","","",137,[[]]],[11,"equivalent","","",137,[[]]],[11,"from","move_lang::shared::ast_debug","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_string","","",131,[[],["string",3]]],[11,"borrow","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"vzip","","",131,[[]]],[11,"from","move_lang::shared::remembering_unique_map","",132,[[]]],[11,"into","","",132,[[]]],[11,"into_iter","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"vzip","","",132,[[]]],[11,"equivalent","","",132,[[]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"into_iter","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"borrow_mut","","",154,[[]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"vzip","","",154,[[]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"into_iter","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"borrow_mut","","",155,[[]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"vzip","","",155,[[]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"into_iter","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"borrow_mut","","",156,[[]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"vzip","","",156,[[]]],[11,"from","move_lang::shared::unique_map","",133,[[]]],[11,"into","","",133,[[]]],[11,"into_iter","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"vzip","","",133,[[]]],[11,"clear","","",133,[[]]],[11,"initialize","","",133,[[]]],[11,"equivalent","","",133,[[]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"into_iter","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"borrow_mut","","",157,[[]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"vzip","","",157,[[]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"into_iter","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"borrow_mut","","",158,[[]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"vzip","","",158,[[]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"into_iter","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"borrow_mut","","",159,[[]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"vzip","","",159,[[]]],[11,"from","move_lang::test_utils","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_string","","",160,[[],["string",3]]],[11,"borrow","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"borrow_mut","","",160,[[]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"vzip","","",160,[[]]],[11,"from","move_lang::typing::ast","",138,[[]]],[11,"into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"vzip","","",138,[[]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"vzip","","",139,[[]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"vzip","","",140,[[]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"vzip","","",141,[[]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"vzip","","",142,[[]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"vzip","","",143,[[]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"borrow_mut","","",144,[[]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"vzip","","",144,[[]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"borrow_mut","","",145,[[]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"vzip","","",145,[[]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_string","","",146,[[],["string",3]]],[11,"borrow","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"borrow_mut","","",146,[[]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"vzip","","",146,[[]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"borrow_mut","","",147,[[]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"vzip","","",147,[[]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"borrow_mut","","",152,[[]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"vzip","","",152,[[]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"borrow_mut","","",153,[[]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"vzip","","",153,[[]]],[11,"ast_debug","move_lang::cfgir::ast","",0,[[["astwriter",3]]]],[11,"ast_debug","","",1,[[["astwriter",3]]]],[11,"ast_debug","","",2,[[["astwriter",3]]]],[11,"ast_debug","move_lang","",161,[[["astwriter",3]]]],[11,"ast_debug","move_lang::expansion::ast","",12,[[["astwriter",3]]]],[11,"ast_debug","","",13,[[["astwriter",3]]]],[11,"ast_debug","","",14,[[["astwriter",3]]]],[11,"ast_debug","","",18,[[["astwriter",3]]]],[11,"ast_debug","","",22,[[["astwriter",3]]]],[11,"ast_debug","","",19,[[["astwriter",3]]]],[11,"ast_debug","","",16,[[["astwriter",3]]]],[11,"ast_debug","","",30,[[["astwriter",3]]]],[11,"ast_debug","","",29,[[["astwriter",3]]]],[11,"ast_debug","","",36,[[["astwriter",3]]]],[11,"ast_debug","","",33,[[["astwriter",3]]]],[11,"ast_debug","","",34,[[["astwriter",3]]]],[11,"ast_debug","","",32,[[["astwriter",3]]]],[11,"ast_debug","","",31,[[["astwriter",3]]]],[11,"ast_debug","move_lang::hlir::ast","",38,[[["astwriter",3]]]],[11,"ast_debug","","",39,[[["astwriter",3]]]],[11,"ast_debug","","",40,[[["astwriter",3]]]],[11,"ast_debug","","",42,[[["astwriter",3]]]],[11,"ast_debug","","",50,[[["astwriter",3]]]],[11,"ast_debug","","",51,[[["astwriter",3]]]],[11,"ast_debug","","",52,[[["astwriter",3]]]],[11,"ast_debug","","",53,[[["astwriter",3]]]],[11,"ast_debug","","",54,[[["astwriter",3]]]],[11,"ast_debug","","",58,[[["astwriter",3]]]],[11,"ast_debug","","",46,[[["astwriter",3]]]],[11,"ast_debug","","",63,[[["astwriter",3]]]],[11,"ast_debug","","",45,[[["astwriter",3]]]],[11,"ast_debug","","",62,[[["astwriter",3]]]],[11,"ast_debug","","",67,[[["astwriter",3]]]],[11,"ast_debug","","",61,[[["astwriter",3]]]],[11,"ast_debug","move_lang::naming::ast","",68,[[["astwriter",3]]]],[11,"ast_debug","","",69,[[["astwriter",3]]]],[11,"ast_debug","","",70,[[["astwriter",3]]]],[11,"ast_debug","","",72,[[["astwriter",3]]]],[11,"ast_debug","","",78,[[["astwriter",3]]]],[11,"ast_debug","","",79,[[["astwriter",3]]]],[11,"ast_debug","","",75,[[["astwriter",3]]]],[11,"ast_debug","","",80,[[["astwriter",3]]]],[11,"ast_debug","","",86,[[["astwriter",3]]]],[11,"ast_debug","","",84,[[["astwriter",3]]]],[11,"ast_debug","","",83,[[["astwriter",3]]]],[11,"ast_debug","","",82,[[["astwriter",3]]]],[11,"ast_debug","","",81,[[["astwriter",3]]]],[11,"ast_debug","move_lang::parser::ast","",88,[[["astwriter",3]]]],[11,"ast_debug","","",104,[[["astwriter",3]]]],[11,"ast_debug","","",89,[[["astwriter",3]]]],[11,"ast_debug","","",93,[[["astwriter",3]]]],[11,"ast_debug","","",106,[[["astwriter",3]]]],[11,"ast_debug","","",105,[[["astwriter",3]]]],[11,"ast_debug","","",96,[[["astwriter",3]]]],[11,"ast_debug","","",100,[[["astwriter",3]]]],[11,"ast_debug","","",110,[[["astwriter",3]]]],[11,"ast_debug","","",119,[[["astwriter",3]]]],[11,"ast_debug","","",112,[[["astwriter",3]]]],[11,"ast_debug","","",102,[[["astwriter",3]]]],[11,"ast_debug","","",111,[[["astwriter",3]]]],[11,"ast_debug","","",101,[[["astwriter",3]]]],[11,"ast_debug","","",99,[[["astwriter",3]]]],[11,"ast_debug","","",108,[[["astwriter",3]]]],[11,"ast_debug","","",98,[[["astwriter",3]]]],[11,"ast_debug","","",122,[[["astwriter",3]]]],[11,"ast_debug","","",123,[[["astwriter",3]]]],[11,"ast_debug","","",121,[[["astwriter",3]]]],[11,"ast_debug","","",129,[[["astwriter",3]]]],[11,"ast_debug","","",128,[[["astwriter",3]]]],[11,"ast_debug","","",127,[[["astwriter",3]]]],[11,"ast_debug","","",126,[[["astwriter",3]]]],[11,"ast_debug","","",125,[[["astwriter",3]]]],[11,"ast_debug","","",124,[[["astwriter",3]]]],[11,"ast_debug","move_lang::typing::ast","",138,[[["astwriter",3]]]],[11,"ast_debug","","",139,[[["astwriter",3]]]],[11,"ast_debug","","",140,[[["astwriter",3]]]],[11,"ast_debug","","",152,[[["astwriter",3]]]],[11,"ast_debug","","",147,[[["astwriter",3]]]],[11,"ast_debug","","",143,[[["astwriter",3]]]],[11,"ast_debug","","",142,[[["astwriter",3]]]],[11,"ast_debug","","",146,[[["astwriter",3]]]],[11,"ast_debug","","",153,[[["astwriter",3]]]],[11,"ast_debug","","",145,[[["astwriter",3]]]],[11,"drop_loc","move_lang::parser::ast","",90,[[]]],[11,"clone_drop_loc","","",90,[[]]],[11,"add_loc","","",90,[[["loc",3],["string",3]]]],[11,"drop_loc","","",94,[[]]],[11,"clone_drop_loc","","",94,[[]]],[11,"add_loc","","",94,[[["loc",3],["string",3]]]],[11,"drop_loc","","",95,[[]]],[11,"clone_drop_loc","","",95,[[]]],[11,"add_loc","","",95,[[["loc",3],["string",3]]]],[11,"drop_loc","","",97,[[]]],[11,"clone_drop_loc","","",97,[[]]],[11,"add_loc","","",97,[[["loc",3],["string",3]]]],[11,"drop_loc","","",103,[[]]],[11,"clone_drop_loc","","",103,[[]]],[11,"add_loc","","",103,[[["loc",3],["string",3]]]],[11,"drop_loc","","",92,[[]]],[11,"clone_drop_loc","","",92,[[]]],[11,"add_loc","","",92,[[],["moduleident",3]]],[11,"drop_loc","move_lang","",162,[[]]],[11,"clone_drop_loc","","",162,[[]]],[11,"add_loc","","",162,[[["loc",3],["string",3]]]],[11,"value","move_lang::parser::ast","",90,[[]]],[11,"loc","","",90,[[],["loc",3]]],[11,"value","","",94,[[]]],[11,"loc","","",94,[[],["loc",3]]],[11,"value","","",95,[[]]],[11,"loc","","",95,[[],["loc",3]]],[11,"value","","",97,[[]]],[11,"loc","","",97,[[],["loc",3]]],[11,"value","","",103,[[]]],[11,"loc","","",103,[[],["loc",3]]],[11,"as_ref","move_lang::shared","",136,[[]]],[11,"into_iter","move_lang::shared::remembering_unique_map","",132,[[]]],[11,"into_iter","move_lang::shared::unique_map","",133,[[]]],[11,"next","move_lang::shared::remembering_unique_map","",154,[[],["option",4]]],[11,"next","","",155,[[],["option",4]]],[11,"next","","",156,[[],["option",4]]],[11,"next","move_lang::shared::unique_map","",157,[[],["option",4]]],[11,"next","","",158,[[],["option",4]]],[11,"next","","",159,[[],["option",4]]],[11,"clone","move_lang::expansion::ast","",37,[[],["specid",3]]],[11,"clone","","",29,[[],["moduleaccess_",4]]],[11,"clone","move_lang::hlir::ast","",41,[[],["structdefinition",3]]],[11,"clone","","",47,[[],["structfields",4]]],[11,"clone","","",42,[[],["functionsignature",3]]],[11,"clone","","",50,[[],["typename_",4]]],[11,"clone","","",51,[[],["basetype_",4]]],[11,"clone","","",52,[[],["singletype_",4]]],[11,"clone","","",53,[[],["type_",4]]],[11,"clone","","",44,[[],["label",3]]],[11,"clone","move_lang::naming::ast","",71,[[],["structdefinition",3]]],[11,"clone","","",76,[[],["structfields",4]]],[11,"clone","","",72,[[],["functionsignature",3]]],[11,"clone","","",78,[[],["builtintypename_",4]]],[11,"clone","","",79,[[],["typename_",4]]],[11,"clone","","",74,[[],["tparamid",3]]],[11,"clone","","",75,[[],["tparam",3]]],[11,"clone","","",87,[[],["tvar",3]]],[11,"clone","","",80,[[],["type_",4]]],[11,"clone","move_lang::parser::ast","",90,[[],["modulename",3]]],[11,"clone","","",91,[[],["moduleident_",3]]],[11,"clone","","",92,[[],["moduleident",3]]],[11,"clone","","",94,[[],["field",3]]],[11,"clone","","",95,[[],["structname",3]]],[11,"clone","","",97,[[],["functionname",3]]],[11,"clone","","",108,[[],["functionvisibility",4]]],[11,"clone","","",122,[[],["kind_",4]]],[11,"clone","","",103,[[],["var",3]]],[11,"clone","move_lang::shared::remembering_unique_map","",132,[[],["rememberinguniquemap",3]]],[11,"clone","move_lang::shared::unique_map","",133,[[],["uniquemap",3]]],[11,"clone","move_lang::shared","",136,[[],["address",3]]],[11,"clone","","",137,[[],["counter",3]]],[11,"default","move_lang::shared::unique_map","",133,[[],["uniquemap",3]]],[11,"default","move_lang::shared","",136,[[],["address",3]]],[11,"cmp","move_lang::expansion::ast","",37,[[["specid",3]],["ordering",4]]],[11,"cmp","move_lang::hlir::ast","",50,[[["typename_",4]],["ordering",4]]],[11,"cmp","","",51,[[["basetype_",4]],["ordering",4]]],[11,"cmp","","",44,[[["label",3]],["ordering",4]]],[11,"cmp","move_lang::naming::ast","",78,[[["builtintypename_",4]],["ordering",4]]],[11,"cmp","","",79,[[["typename_",4]],["ordering",4]]],[11,"cmp","","",74,[[["tparamid",3]],["ordering",4]]],[11,"cmp","","",75,[[["tparam",3]],["ordering",4]]],[11,"cmp","","",87,[[["tvar",3]],["ordering",4]]],[11,"cmp","move_lang::parser::ast","",90,[[["modulename",3]],["ordering",4]]],[11,"cmp","","",91,[[["moduleident_",3]],["ordering",4]]],[11,"cmp","","",92,[[["moduleident",3]],["ordering",4]]],[11,"cmp","","",94,[[["field",3]],["ordering",4]]],[11,"cmp","","",95,[[["structname",3]],["ordering",4]]],[11,"cmp","","",97,[[["functionname",3]],["ordering",4]]],[11,"cmp","","",122,[[["kind_",4]],["ordering",4]]],[11,"cmp","","",103,[[["var",3]],["ordering",4]]],[11,"cmp","move_lang::shared","",136,[[["address",3]],["ordering",4]]],[11,"eq","move_lang::cfgir::ast","",4,[[["functionbody_",4]]]],[11,"ne","","",4,[[["functionbody_",4]]]],[11,"eq","","",3,[[["function",3]]]],[11,"ne","","",3,[[["function",3]]]],[11,"eq","move_lang::expansion::ast","",15,[[["structdefinition",3]]]],[11,"ne","","",15,[[["structdefinition",3]]]],[11,"eq","","",20,[[["structfields",4]]]],[11,"ne","","",20,[[["structfields",4]]]],[11,"eq","","",16,[[["functionsignature",3]]]],[11,"ne","","",16,[[["functionsignature",3]]]],[11,"eq","","",21,[[["functionbody_",4]]]],[11,"ne","","",21,[[["functionbody_",4]]]],[11,"eq","","",37,[[["specid",3]]]],[11,"ne","","",37,[[["specid",3]]]],[11,"eq","","",17,[[["function",3]]]],[11,"ne","","",17,[[["function",3]]]],[11,"eq","","",18,[[["specblock_",3]]]],[11,"ne","","",18,[[["specblock_",3]]]],[11,"eq","","",22,[[["specblockmember_",4]]]],[11,"ne","","",22,[[["specblockmember_",4]]]],[11,"eq","","",19,[[["pragmaproperty_",3]]]],[11,"ne","","",19,[[["pragmaproperty_",3]]]],[11,"eq","","",29,[[["moduleaccess_",4]]]],[11,"ne","","",29,[[["moduleaccess_",4]]]],[11,"eq","","",30,[[["type_",4]]]],[11,"ne","","",30,[[["type_",4]]]],[11,"eq","","",31,[[["lvalue_",4]]]],[11,"ne","","",31,[[["lvalue_",4]]]],[11,"eq","","",32,[[["expdotted_",4]]]],[11,"ne","","",32,[[["expdotted_",4]]]],[11,"eq","","",33,[[["value_",4]]]],[11,"ne","","",33,[[["value_",4]]]],[11,"eq","","",34,[[["exp_",4]]]],[11,"ne","","",34,[[["exp_",4]]]],[11,"eq","","",36,[[["sequenceitem_",4]]]],[11,"ne","","",36,[[["sequenceitem_",4]]]],[11,"eq","move_lang::hlir::ast","",41,[[["structdefinition",3]]]],[11,"ne","","",41,[[["structdefinition",3]]]],[11,"eq","","",47,[[["structfields",4]]]],[11,"ne","","",47,[[["structfields",4]]]],[11,"eq","","",42,[[["functionsignature",3]]]],[11,"ne","","",42,[[["functionsignature",3]]]],[11,"eq","","",48,[[["functionbody_",4]]]],[11,"ne","","",48,[[["functionbody_",4]]]],[11,"eq","","",43,[[["function",3]]]],[11,"ne","","",43,[[["function",3]]]],[11,"eq","","",50,[[["typename_",4]]]],[11,"ne","","",50,[[["typename_",4]]]],[11,"eq","","",51,[[["basetype_",4]]]],[11,"ne","","",51,[[["basetype_",4]]]],[11,"eq","","",52,[[["singletype_",4]]]],[11,"ne","","",52,[[["singletype_",4]]]],[11,"eq","","",53,[[["type_",4]]]],[11,"ne","","",53,[[["type_",4]]]],[11,"eq","","",54,[[["statement_",4]]]],[11,"ne","","",54,[[["statement_",4]]]],[11,"eq","","",44,[[["label",3]]]],[11,"ne","","",44,[[["label",3]]]],[11,"eq","","",58,[[["command_",4]]]],[11,"ne","","",58,[[["command_",4]]]],[11,"eq","","",61,[[["lvalue_",4]]]],[11,"ne","","",61,[[["lvalue_",4]]]],[11,"eq","","",45,[[["modulecall",3]]]],[11,"ne","","",45,[[["modulecall",3]]]],[11,"eq","","",62,[[["builtinfunction_",4]]]],[11,"ne","","",62,[[["builtinfunction_",4]]]],[11,"eq","","",63,[[["unannotatedexp_",4]]]],[11,"ne","","",63,[[["unannotatedexp_",4]]]],[11,"eq","","",46,[[["exp",3]]]],[11,"ne","","",46,[[["exp",3]]]],[11,"eq","","",67,[[["explistitem",4]]]],[11,"ne","","",67,[[["explistitem",4]]]],[11,"eq","move_lang::naming::ast","",71,[[["structdefinition",3]]]],[11,"ne","","",71,[[["structdefinition",3]]]],[11,"eq","","",76,[[["structfields",4]]]],[11,"ne","","",76,[[["structfields",4]]]],[11,"eq","","",72,[[["functionsignature",3]]]],[11,"ne","","",72,[[["functionsignature",3]]]],[11,"eq","","",77,[[["functionbody_",4]]]],[11,"ne","","",77,[[["functionbody_",4]]]],[11,"eq","","",73,[[["function",3]]]],[11,"ne","","",73,[[["function",3]]]],[11,"eq","","",78,[[["builtintypename_",4]]]],[11,"eq","","",79,[[["typename_",4]]]],[11,"ne","","",79,[[["typename_",4]]]],[11,"eq","","",74,[[["tparamid",3]]]],[11,"ne","","",74,[[["tparamid",3]]]],[11,"eq","","",75,[[["tparam",3]]]],[11,"ne","","",75,[[["tparam",3]]]],[11,"eq","","",87,[[["tvar",3]]]],[11,"ne","","",87,[[["tvar",3]]]],[11,"eq","","",80,[[["type_",4]]]],[11,"ne","","",80,[[["type_",4]]]],[11,"eq","","",81,[[["lvalue_",4]]]],[11,"ne","","",81,[[["lvalue_",4]]]],[11,"eq","","",82,[[["expdotted_",4]]]],[11,"ne","","",82,[[["expdotted_",4]]]],[11,"eq","","",83,[[["builtinfunction_",4]]]],[11,"ne","","",83,[[["builtinfunction_",4]]]],[11,"eq","","",84,[[["exp_",4]]]],[11,"ne","","",84,[[["exp_",4]]]],[11,"eq","","",86,[[["sequenceitem_",4]]]],[11,"ne","","",86,[[["sequenceitem_",4]]]],[11,"eq","move_lang::parser::ast","",105,[[["use",4]]]],[11,"ne","","",105,[[["use",4]]]],[11,"eq","","",90,[[["modulename",3]]]],[11,"ne","","",90,[[["modulename",3]]]],[11,"eq","","",91,[[["moduleident_",3]]]],[11,"ne","","",91,[[["moduleident_",3]]]],[11,"eq","","",92,[[["moduleident",3]]]],[11,"ne","","",92,[[["moduleident",3]]]],[11,"eq","","",94,[[["field",3]]]],[11,"ne","","",94,[[["field",3]]]],[11,"eq","","",95,[[["structname",3]]]],[11,"ne","","",95,[[["structname",3]]]],[11,"eq","","",96,[[["structdefinition",3]]]],[11,"ne","","",96,[[["structdefinition",3]]]],[11,"eq","","",107,[[["structfields",4]]]],[11,"ne","","",107,[[["structfields",4]]]],[11,"eq","","",97,[[["functionname",3]]]],[11,"ne","","",97,[[["functionname",3]]]],[11,"eq","","",98,[[["functionsignature",3]]]],[11,"ne","","",98,[[["functionsignature",3]]]],[11,"eq","","",108,[[["functionvisibility",4]]]],[11,"ne","","",108,[[["functionvisibility",4]]]],[11,"eq","","",109,[[["functionbody_",4]]]],[11,"ne","","",109,[[["functionbody_",4]]]],[11,"eq","","",99,[[["function",3]]]],[11,"ne","","",99,[[["function",3]]]],[11,"eq","","",100,[[["specblock_",3]]]],[11,"ne","","",100,[[["specblock_",3]]]],[11,"eq","","",110,[[["specblocktarget_",4]]]],[11,"ne","","",110,[[["specblocktarget_",4]]]],[11,"eq","","",101,[[["pragmaproperty_",3]]]],[11,"ne","","",101,[[["pragmaproperty_",3]]]],[11,"eq","","",102,[[["specapplypattern_",3]]]],[11,"ne","","",102,[[["specapplypattern_",3]]]],[11,"eq","","",111,[[["specapplyfragment_",4]]]],[11,"ne","","",111,[[["specapplyfragment_",4]]]],[11,"eq","","",112,[[["specblockmember_",4]]]],[11,"ne","","",112,[[["specblockmember_",4]]]],[11,"eq","","",119,[[["specconditionkind",4]]]],[11,"eq","","",120,[[["invariantkind",4]]]],[11,"eq","","",121,[[["moduleaccess_",4]]]],[11,"ne","","",121,[[["moduleaccess_",4]]]],[11,"eq","","",122,[[["kind_",4]]]],[11,"eq","","",123,[[["type_",4]]]],[11,"ne","","",123,[[["type_",4]]]],[11,"eq","","",103,[[["var",3]]]],[11,"ne","","",103,[[["var",3]]]],[11,"eq","","",124,[[["bind_",4]]]],[11,"ne","","",124,[[["bind_",4]]]],[11,"eq","","",125,[[["value_",4]]]],[11,"ne","","",125,[[["value_",4]]]],[11,"eq","","",126,[[["unaryop_",4]]]],[11,"eq","","",127,[[["binop_",4]]]],[11,"eq","","",128,[[["exp_",4]]]],[11,"ne","","",128,[[["exp_",4]]]],[11,"eq","","",129,[[["sequenceitem_",4]]]],[11,"ne","","",129,[[["sequenceitem_",4]]]],[11,"eq","move_lang::shared::remembering_unique_map","",132,[[["rememberinguniquemap",3]]]],[11,"eq","move_lang::shared::unique_map","",133,[[["uniquemap",3]]]],[11,"eq","move_lang::shared","",136,[[["address",3]]]],[11,"ne","","",136,[[["address",3]]]],[11,"eq","","",137,[[["counter",3]]]],[11,"ne","","",137,[[["counter",3]]]],[11,"eq","move_lang::typing::ast","",144,[[["functionbody_",4]]]],[11,"ne","","",144,[[["functionbody_",4]]]],[11,"eq","","",141,[[["function",3]]]],[11,"ne","","",141,[[["function",3]]]],[11,"eq","","",145,[[["lvalue_",4]]]],[11,"ne","","",145,[[["lvalue_",4]]]],[11,"eq","","",142,[[["modulecall",3]]]],[11,"ne","","",142,[[["modulecall",3]]]],[11,"eq","","",146,[[["builtinfunction_",4]]]],[11,"ne","","",146,[[["builtinfunction_",4]]]],[11,"eq","","",147,[[["unannotatedexp_",4]]]],[11,"ne","","",147,[[["unannotatedexp_",4]]]],[11,"eq","","",143,[[["exp",3]]]],[11,"ne","","",143,[[["exp",3]]]],[11,"eq","","",152,[[["sequenceitem_",4]]]],[11,"ne","","",152,[[["sequenceitem_",4]]]],[11,"eq","","",153,[[["explistitem",4]]]],[11,"ne","","",153,[[["explistitem",4]]]],[11,"partial_cmp","move_lang::expansion::ast","",37,[[["specid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",37,[[["specid",3]]]],[11,"le","","",37,[[["specid",3]]]],[11,"gt","","",37,[[["specid",3]]]],[11,"ge","","",37,[[["specid",3]]]],[11,"partial_cmp","move_lang::hlir::ast","",50,[[["typename_",4]],[["option",4],["ordering",4]]]],[11,"lt","","",50,[[["typename_",4]]]],[11,"le","","",50,[[["typename_",4]]]],[11,"gt","","",50,[[["typename_",4]]]],[11,"ge","","",50,[[["typename_",4]]]],[11,"partial_cmp","","",51,[[["basetype_",4]],[["option",4],["ordering",4]]]],[11,"lt","","",51,[[["basetype_",4]]]],[11,"le","","",51,[[["basetype_",4]]]],[11,"gt","","",51,[[["basetype_",4]]]],[11,"ge","","",51,[[["basetype_",4]]]],[11,"partial_cmp","","",44,[[["label",3]],[["option",4],["ordering",4]]]],[11,"lt","","",44,[[["label",3]]]],[11,"le","","",44,[[["label",3]]]],[11,"gt","","",44,[[["label",3]]]],[11,"ge","","",44,[[["label",3]]]],[11,"partial_cmp","move_lang::naming::ast","",78,[[["builtintypename_",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",79,[[["typename_",4]],[["option",4],["ordering",4]]]],[11,"lt","","",79,[[["typename_",4]]]],[11,"le","","",79,[[["typename_",4]]]],[11,"gt","","",79,[[["typename_",4]]]],[11,"ge","","",79,[[["typename_",4]]]],[11,"partial_cmp","","",74,[[["tparamid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",74,[[["tparamid",3]]]],[11,"le","","",74,[[["tparamid",3]]]],[11,"gt","","",74,[[["tparamid",3]]]],[11,"ge","","",74,[[["tparamid",3]]]],[11,"partial_cmp","","",75,[[["tparam",3]],[["option",4],["ordering",4]]]],[11,"lt","","",75,[[["tparam",3]]]],[11,"le","","",75,[[["tparam",3]]]],[11,"gt","","",75,[[["tparam",3]]]],[11,"ge","","",75,[[["tparam",3]]]],[11,"partial_cmp","","",87,[[["tvar",3]],[["option",4],["ordering",4]]]],[11,"lt","","",87,[[["tvar",3]]]],[11,"le","","",87,[[["tvar",3]]]],[11,"gt","","",87,[[["tvar",3]]]],[11,"ge","","",87,[[["tvar",3]]]],[11,"partial_cmp","move_lang::parser::ast","",90,[[["modulename",3]],[["option",4],["ordering",4]]]],[11,"lt","","",90,[[["modulename",3]]]],[11,"le","","",90,[[["modulename",3]]]],[11,"gt","","",90,[[["modulename",3]]]],[11,"ge","","",90,[[["modulename",3]]]],[11,"partial_cmp","","",91,[[["moduleident_",3]],[["option",4],["ordering",4]]]],[11,"lt","","",91,[[["moduleident_",3]]]],[11,"le","","",91,[[["moduleident_",3]]]],[11,"gt","","",91,[[["moduleident_",3]]]],[11,"ge","","",91,[[["moduleident_",3]]]],[11,"partial_cmp","","",92,[[["moduleident",3]],[["option",4],["ordering",4]]]],[11,"lt","","",92,[[["moduleident",3]]]],[11,"le","","",92,[[["moduleident",3]]]],[11,"gt","","",92,[[["moduleident",3]]]],[11,"ge","","",92,[[["moduleident",3]]]],[11,"partial_cmp","","",94,[[["field",3]],[["option",4],["ordering",4]]]],[11,"lt","","",94,[[["field",3]]]],[11,"le","","",94,[[["field",3]]]],[11,"gt","","",94,[[["field",3]]]],[11,"ge","","",94,[[["field",3]]]],[11,"partial_cmp","","",95,[[["structname",3]],[["option",4],["ordering",4]]]],[11,"lt","","",95,[[["structname",3]]]],[11,"le","","",95,[[["structname",3]]]],[11,"gt","","",95,[[["structname",3]]]],[11,"ge","","",95,[[["structname",3]]]],[11,"partial_cmp","","",97,[[["functionname",3]],[["option",4],["ordering",4]]]],[11,"lt","","",97,[[["functionname",3]]]],[11,"le","","",97,[[["functionname",3]]]],[11,"gt","","",97,[[["functionname",3]]]],[11,"ge","","",97,[[["functionname",3]]]],[11,"partial_cmp","","",122,[[["kind_",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",103,[[["var",3]],[["option",4],["ordering",4]]]],[11,"lt","","",103,[[["var",3]]]],[11,"le","","",103,[[["var",3]]]],[11,"gt","","",103,[[["var",3]]]],[11,"ge","","",103,[[["var",3]]]],[11,"partial_cmp","move_lang::shared","",136,[[["address",3]],[["option",4],["ordering",4]]]],[11,"lt","","",136,[[["address",3]]]],[11,"le","","",136,[[["address",3]]]],[11,"gt","","",136,[[["address",3]]]],[11,"ge","","",136,[[["address",3]]]],[11,"fmt","move_lang::cfgir::ast","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::compiled_unit","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::expansion::ast","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::hlir::ast","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::naming::ast","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::parser::ast","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::shared::remembering_unique_map","",132,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::shared::unique_map","",133,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::shared","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::test_utils","",160,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::typing::ast","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::expansion::ast","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::hlir::ast","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::naming::ast","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::parser::ast","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::shared::ast_debug","",131,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::shared","",136,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::test_utils","",160,[[["formatter",3]],["result",6]]],[11,"fmt","move_lang::typing::ast","",146,[[["formatter",3]],["result",6]]],[11,"hash","move_lang::expansion::ast","",37,[[]]],[11,"hash","move_lang::hlir::ast","",44,[[]]],[11,"hash","move_lang::naming::ast","",74,[[]]],[11,"hash","","",75,[[]]],[11,"hash","","",87,[[]]],[11,"hash","move_lang::parser::ast","",90,[[]]],[11,"hash","","",91,[[]]],[11,"hash","","",92,[[]]],[11,"hash","","",94,[[]]],[11,"hash","","",95,[[]]],[11,"hash","","",97,[[]]],[11,"hash","","",122,[[]]],[11,"hash","","",103,[[]]],[11,"hash","move_lang::shared","",136,[[]]],[11,"hash","","",137,[[]]],[11,"try_from","","",136,[[],[["string",3],["result",4],["address",3]]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"description","move_lang::test_utils","",160,[[]]]],"p":[[3,"Program"],[3,"Script"],[3,"ModuleDefinition"],[3,"Function"],[4,"FunctionBody_"],[13,"Defined"],[3,"VarInfo"],[3,"SpecInfo"],[3,"FunctionInfo"],[4,"CompiledUnit"],[13,"Module"],[13,"Script"],[3,"Program"],[3,"Script"],[3,"ModuleDefinition"],[3,"StructDefinition"],[3,"FunctionSignature"],[3,"Function"],[3,"SpecBlock_"],[3,"PragmaProperty_"],[4,"StructFields"],[4,"FunctionBody_"],[4,"SpecBlockMember_"],[13,"Condition"],[13,"Function"],[13,"Variable"],[13,"Include"],[13,"Apply"],[13,"Pragma"],[4,"ModuleAccess_"],[4,"Type_"],[4,"LValue_"],[4,"ExpDotted_"],[4,"Value_"],[4,"Exp_"],[13,"Unit"],[4,"SequenceItem_"],[3,"SpecId"],[3,"Program"],[3,"Script"],[3,"ModuleDefinition"],[3,"StructDefinition"],[3,"FunctionSignature"],[3,"Function"],[3,"Label"],[3,"ModuleCall"],[3,"Exp"],[4,"StructFields"],[4,"FunctionBody_"],[13,"Defined"],[4,"TypeName_"],[4,"BaseType_"],[4,"SingleType_"],[4,"Type_"],[4,"Statement_"],[13,"IfElse"],[13,"While"],[13,"Loop"],[4,"Command_"],[13,"IgnoreAndPop"],[13,"JumpIf"],[4,"LValue_"],[4,"BuiltinFunction_"],[4,"UnannotatedExp_"],[13,"Unit"],[13,"Move"],[13,"Copy"],[4,"ExpListItem"],[3,"Program"],[3,"Script"],[3,"ModuleDefinition"],[3,"StructDefinition"],[3,"FunctionSignature"],[3,"Function"],[3,"TParamID"],[3,"TParam"],[4,"StructFields"],[4,"FunctionBody_"],[4,"BuiltinTypeName_"],[4,"TypeName_"],[4,"Type_"],[4,"LValue_"],[4,"ExpDotted_"],[4,"BuiltinFunction_"],[4,"Exp_"],[13,"Unit"],[4,"SequenceItem_"],[3,"TVar"],[3,"Program"],[3,"Script"],[3,"ModuleName"],[3,"ModuleIdent_"],[3,"ModuleIdent"],[3,"ModuleDefinition"],[3,"Field"],[3,"StructName"],[3,"StructDefinition"],[3,"FunctionName"],[3,"FunctionSignature"],[3,"Function"],[3,"SpecBlock_"],[3,"PragmaProperty_"],[3,"SpecApplyPattern_"],[3,"Var"],[4,"Definition"],[4,"Use"],[4,"ModuleMember"],[4,"StructFields"],[4,"FunctionVisibility"],[4,"FunctionBody_"],[4,"SpecBlockTarget_"],[4,"SpecApplyFragment_"],[4,"SpecBlockMember_"],[13,"Condition"],[13,"Function"],[13,"Variable"],[13,"Include"],[13,"Apply"],[13,"Pragma"],[4,"SpecConditionKind"],[4,"InvariantKind"],[4,"ModuleAccess_"],[4,"Kind_"],[4,"Type_"],[4,"Bind_"],[4,"Value_"],[4,"UnaryOp_"],[4,"BinOp_"],[4,"Exp_"],[4,"SequenceItem_"],[8,"AstDebug"],[3,"AstWriter"],[3,"RememberingUniqueMap"],[3,"UniqueMap"],[8,"TName"],[8,"Identifier"],[3,"Address"],[3,"Counter"],[3,"Program"],[3,"Script"],[3,"ModuleDefinition"],[3,"Function"],[3,"ModuleCall"],[3,"Exp"],[4,"FunctionBody_"],[4,"LValue_"],[4,"BuiltinFunction_"],[4,"UnannotatedExp_"],[13,"Unit"],[13,"Move"],[13,"Copy"],[13,"Loop"],[4,"SequenceItem_"],[4,"ExpListItem"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"StringError"],[6,"BasicBlocks"],[6,"Name"]]},\
"move_lang_functional_tests":{"doc":"","i":[],"p":[]},\
"move_prover":{"doc":"","i":[[5,"run_move_prover","move_prover","",null,[[["options",3]],["result",6]]],[5,"run_move_prover_errors_to_stderr","","",null,[[["options",3]],["result",6]]],[0,"cli","","Functionality related to the command line interface of the…",null,null],[3,"Options","move_prover::cli","Represents options provided to the tool. Most of those…",null,null],[12,"prelude_path","","Path to the boogie prelude. The special string…",0,null],[12,"output_path","","The path to the boogie output which represents the…",0,null],[12,"verbosity_level","","Verbosity level for logging.",0,null],[12,"run_docgen","","Whether to run the documentation generator instead of the…",0,null],[12,"account_address","","An account address to use if none is specified in the…",0,null],[12,"move_sources","","The paths to the Move sources.",0,null],[12,"move_deps","","The paths to any dependencies for the Move sources. Those…",0,null],[12,"prover","","Options for the prover.",0,null],[12,"backend","","Options for the prover backend.",0,null],[12,"docgen","","Options for the documentation generator.",0,null],[3,"ProverOptions","","",null,null],[12,"generate_only","","Whether to only generate backend code.",1,null],[12,"native_stubs","","Whether to generate stubs for native functions.",1,null],[12,"minimize_execution_trace","","Whether to minimize execution traces in errors.",1,null],[12,"omit_model_debug","","Whether to omit debug information in generated model.",1,null],[12,"stable_test_output","","Whether output for e.g. diagnosis shall be stable/redacted…",1,null],[12,"verify_scope","","Scope of what functions to verify.",1,null],[12,"resource_wellformed_axiom","","Whether to emit global axiom that resources are well-formed.",1,null],[12,"debug_trace","","Whether to automatically debug trace values of…",1,null],[3,"BackendOptions","","Backend options.",null,null],[12,"boogie_exe","","Path to the boogie executable.",2,null],[12,"z3_exe","","Path to the z3 executable.",2,null],[12,"use_cvc4","","Whether to use cvc4.",2,null],[12,"cvc4_exe","","Path to the cvc4 executable.",2,null],[12,"boogie_flags","","List of flags to pass on to boogie.",2,null],[12,"use_array_theory","","Whether to use native array theory.",2,null],[12,"generate_smt","","Whether to produce an SMT file for each verification…",2,null],[12,"native_equality","","Whether native instead of stratified equality should be…",2,null],[12,"type_requires","","A string determining the type of requires used for…",2,null],[12,"stratification_depth","","The depth until which stratified functions are expanded.",2,null],[12,"aggressive_func_inline","","A string to be used to inline a function of medium size.…",2,null],[12,"func_inline","","A string to be used to inline a function of small size.…",2,null],[12,"serialize_bound","","A bound to apply to the length of serialization results.",2,null],[12,"bench_repeat","","How many times to call the prover backend for the…",2,null],[4,"VerificationScope","","Default for what functions to verify.",null,null],[13,"Public","","Verify only public functions.",3,null],[13,"All","","Verify all functions.",3,null],[13,"None","","Verify no functions",3,null],[17,"INLINE_PRELUDE","","Represents the virtual path to the boogie prelude which is…",null,null],[11,"create_from_toml","","Creates options from toml configuration source.",0,[[],[["result",6],["options",3]]]],[11,"create_from_toml_file","","Creates options from toml configuration file.",0,[[],[["result",6],["options",3]]]],[11,"create_from_args","","",0,[[],[["result",6],["options",3]]]],[11,"setup_logging","","Sets up logging based on provided options. This should be…",0,[[]]],[11,"setup_logging_for_test","","",0,[[]]],[11,"get_boogie_command","","Returns command line to call boogie.",0,[[],[["string",3],["vec",3]]]],[11,"get_boogie_log_file","","Returns name of file where to log boogie output.",0,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"test_only_hash","","",2,[[],["hashvalue",3]]],[11,"vzip","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"initialize","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"clone","","",3,[[],["verificationscope",4]]],[11,"clone","","",0,[[],["options",3]]],[11,"clone","","",1,[[],["proveroptions",3]]],[11,"clone","","",2,[[],["backendoptions",3]]],[11,"default","","",3,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"eq","","",3,[[["verificationscope",4]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]]],"p":[[3,"Options"],[3,"ProverOptions"],[3,"BackendOptions"],[4,"VerificationScope"]]},\
"move_vm_natives":{"doc":"","i":[[0,"account","move_vm_natives","",null,null],[5,"native_create_signer","move_vm_natives::account","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_destroy_signer","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"debug","move_vm_natives","",null,null],[5,"native_print","move_vm_natives::debug","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_print_stack_trace","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"event","move_vm_natives","",null,null],[5,"native_emit_event","move_vm_natives::event","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"hash","move_vm_natives","",null,null],[5,"native_sha2_256","move_vm_natives::hash","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_sha3_256","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"lcs","move_vm_natives","",null,null],[5,"native_to_bytes","move_vm_natives::lcs","Rust implementation of Move\'s `native public fun…",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"signature","move_vm_natives","",null,null],[5,"native_ed25519_publickey_validation","move_vm_natives::signature","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_ed25519_signature_verification","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_ed25519_threshold_signature_verification","","Batch verify a collection of signatures using a bitmap for…",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"signer","move_vm_natives","",null,null],[5,"native_borrow_address","move_vm_natives::signer","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[0,"vector","move_vm_natives","",null,null],[5,"native_empty","move_vm_natives::vector","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_length","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_push_back","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_borrow","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_pop","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_destroy_empty","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[5,"native_swap","","",null,[[["value",3],["vec",3],["vecdeque",3],["type",4]],[["vmresult",6],["nativeresult",3]]]]],"p":[]},\
"move_vm_runtime":{"doc":"The core Move VM logic.","i":[[0,"data_cache","move_vm_runtime","",null,null],[3,"TransactionDataCache","move_vm_runtime::data_cache","Transaction data cache. Keep updates within a transaction…",null,null],[8,"RemoteCache","","Trait for the Move VM to abstract `StateView` operations.",null,null],[10,"get","","",0,[[["accesspath",3]],[["vmresult",6],["option",4]]]],[11,"new","","Create a `TransactionDataCache` with a `RemoteCache` that…",1,[[["remotecache",8]]]],[11,"make_write_set","","Make a write set from the updated (dirty, deleted) global…",1,[[],[["vmresult",6],["writeset",3]]]],[11,"event_data","","Return the events that were published during the execution…",1,[[]]],[0,"move_vm","move_vm_runtime","",null,null],[3,"MoveVM","move_vm_runtime::move_vm","",null,null],[11,"new","","",2,[[]]],[11,"execute_function","","",2,[[["vec",3],["coststrategy",3],["identstr",3],["moduleid",3],["vec",3],["value",3],["typetag",4],["accountaddress",3],["datastore",8]],["vmresult",6]]],[11,"execute_script","","",2,[[["vec",3],["coststrategy",3],["typetag",4],["vec",3],["value",3],["datastore",8],["vec",3],["accountaddress",3]],["vmresult",6]]],[11,"publish_module","","",2,[[["vec",3],["accountaddress",3],["datastore",8]],["vmresult",6]]],[11,"cache_module","","",2,[[["verifiedmodule",3],["datastore",8]],["vmresult",6]]],[14,"trace","move_vm_runtime","",null,null],[11,"from","move_vm_runtime::data_cache","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","move_vm_runtime::move_vm","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clear","","",2,[[]]],[11,"initialize","","",2,[[]]],[11,"default","","",2,[[]]],[11,"publish_resource","move_vm_runtime::data_cache","",1,[[["accesspath",3]],["vmresult",6]]],[11,"borrow_resource","","",1,[[["fatstructtype",3],["accesspath",3]],[["option",4],["vmresult",6]]]],[11,"move_resource_from","","",1,[[["fatstructtype",3],["accesspath",3]],[["vmresult",6],["option",4]]]],[11,"load_module","","",1,[[["moduleid",3]],[["vmresult",6],["vec",3]]]],[11,"publish_module","","",1,[[["vec",3],["moduleid",3]],["vmresult",6]]],[11,"exists_module","","",1,[[["moduleid",3]]]],[11,"emit_event","","",1,[[["contractevent",4]]]]],"p":[[8,"RemoteCache"],[3,"TransactionDataCache"],[3,"MoveVM"]]},\
"move_vm_types":{"doc":"","i":[[0,"data_store","move_vm_types","",null,null],[8,"DataStore","move_vm_types::data_store","Provide an implementation for bytecodes related to data…",null,null],[10,"publish_resource","","Publish a resource.",0,[[["accesspath",3]],["vmresult",6]]],[10,"borrow_resource","","Get a reference to a resource.",0,[[["accesspath",3],["fatstructtype",3]],[["option",4],["vmresult",6]]]],[10,"move_resource_from","","Transfer ownership of a resource to the VM.",0,[[["accesspath",3],["fatstructtype",3]],[["vmresult",6],["option",4]]]],[10,"load_module","","Get the serialized format of a `CompiledModule` given a…",0,[[["moduleid",3]],[["vec",3],["vmresult",6]]]],[10,"publish_module","","Publish a module.",0,[[["vec",3],["moduleid",3]],["vmresult",6]]],[10,"exists_module","","Check if this module exists.",0,[[["moduleid",3]]]],[10,"emit_event","","Emit an event to the EventStore",0,[[["contractevent",4]]]],[0,"gas_schedule","move_vm_types","This module lays out the basic abstract costing schedule…",null,null],[3,"CostStrategy","move_vm_types::gas_schedule","The Move VM implementation for gas charging.",null,null],[4,"NativeCostIndex","","",null,null],[13,"SHA2_256","","",1,null],[13,"SHA3_256","","",1,null],[13,"ED25519_VERIFY","","",1,null],[13,"ED25519_THRESHOLD_VERIFY","","",1,null],[13,"LCS_TO_BYTES","","",1,null],[13,"LENGTH","","",1,null],[13,"EMPTY","","",1,null],[13,"BORROW","","",1,null],[13,"BORROW_MUT","","",1,null],[13,"PUSH_BACK","","",1,null],[13,"POP_BACK","","",1,null],[13,"DESTROY_EMPTY","","",1,null],[13,"SWAP","","",1,null],[13,"SAVE_ACCOUNT","","",1,null],[13,"ED25519_VALIDATE_KEY","","",1,null],[13,"SIGNER_BORROW","","",1,null],[13,"CREATE_SIGNER","","",1,null],[13,"DESTROY_SIGNER","","",1,null],[5,"new_from_instructions","","",null,[[["vec",3],["vec",3],["gascost",3]],["costtable",3]]],[5,"zero_cost_schedule","","",null,[[],["costtable",3]]],[5,"calculate_intrinsic_gas","","Calculate the intrinsic gas for the transaction based upon…",null,[[["abstractmemorysize",3],["gascarrier",6],["gasconstants",3]],[["gascarrier",6],["gasunits",3]]]],[11,"transaction","","A transaction `CostStrategy`. Charge for every operation…",2,[[["gascarrier",6],["costtable",3],["gasunits",3]]]],[11,"system","","A system `CostStrategy` does not charge for operations.",2,[[["gascarrier",6],["costtable",3],["gasunits",3]]]],[11,"cost_table","","Return the `CostTable` behind this `CostStrategy`.",2,[[],["costtable",3]]],[11,"remaining_gas","","Return the gas left.",2,[[],[["gascarrier",6],["gasunits",3]]]],[11,"deduct_gas","","Charge a given amount of gas and fail if not enough gas…",2,[[["gascarrier",6],["gasunits",3]],["vmresult",6]]],[11,"charge_instr_with_size","","Charge an instruction over data with a given size and fail…",2,[[["opcodes",4],["abstractmemorysize",3],["gascarrier",6]],["vmresult",6]]],[11,"charge_instr","","Charge an instruction and fail if not enough gas units are…",2,[[["opcodes",4]],["vmresult",6]]],[11,"charge_intrinsic_gas","","Charge gas related to the overall size of a transaction…",2,[[["abstractmemorysize",3],["gascarrier",6]],["vmresult",6]]],[0,"loaded_data","move_vm_types","Loaded definition of code data used in runtime.",null,null],[0,"runtime_types","move_vm_types::loaded_data","",null,null],[3,"StructType","move_vm_types::loaded_data::runtime_types","",null,null],[12,"fields","","",3,null],[12,"is_resource","","",3,null],[12,"type_parameters","","",3,null],[12,"name","","",3,null],[12,"module","","",3,null],[12,"struct_def","","",3,null],[4,"Type","","",null,null],[13,"Bool","","",4,null],[13,"U8","","",4,null],[13,"U64","","",4,null],[13,"U128","","",4,null],[13,"Address","","",4,null],[13,"Signer","","",4,null],[13,"Vector","","",4,null],[13,"Struct","","",4,null],[13,"StructInstantiation","","",4,null],[13,"Reference","","",4,null],[13,"MutableReference","","",4,null],[13,"TyParam","","",4,null],[8,"TypeConverter","","",null,null],[10,"type_to_fat_type","","",5,[[["type",4]],[["vmresult",6],["fattype",4]]]],[11,"subst","","",4,[[],[["vmresult",6],["type",4]]]],[0,"types","move_vm_types::loaded_data","Loaded representation for runtime types.",null,null],[3,"FatStructType","move_vm_types::loaded_data::types","VM representation of a struct type in Move.",null,null],[12,"address","","",6,null],[12,"module","","",6,null],[12,"name","","",6,null],[12,"is_resource","","",6,null],[12,"ty_args","","",6,null],[12,"layout","","",6,null],[4,"FatType","","VM representation of a Move type that gives access to both…",null,null],[13,"Bool","","",7,null],[13,"U8","","",7,null],[13,"U64","","",7,null],[13,"U128","","",7,null],[13,"Address","","",7,null],[13,"Signer","","",7,null],[13,"Vector","","",7,null],[13,"Struct","","",7,null],[13,"Reference","","",7,null],[13,"MutableReference","","",7,null],[13,"TyParam","","",7,null],[0,"prop","","",null,null],[11,"single_value_strategy","","Generate a random primitive Type, no Struct or Vector.",7,[[]]],[11,"nested_strategy","","Generate a primitive Value, a Struct or a Vector.",7,[[]]],[11,"resource_path","","",6,[[],[["vec",3],["vmresult",6]]]],[11,"subst","","",6,[[],[["vmresult",6],["fatstructtype",3]]]],[11,"struct_tag","","",6,[[],[["structtag",3],["vmresult",6]]]],[11,"debug_print","","",6,[[],["vmresult",6]]],[11,"subst","","",7,[[],[["vmresult",6],["fattype",4]]]],[11,"type_tag","","",7,[[],[["vmresult",6],["typetag",4]]]],[11,"is_resource","","",7,[[],["vmresult",6]]],[11,"debug_print","","",7,[[],["vmresult",6]]],[0,"natives","move_vm_types","",null,null],[0,"function","move_vm_types::natives","Native Function Support",null,null],[3,"NativeResult","move_vm_types::natives::function","Result of a native function execution requires charges for…",null,null],[12,"cost","","The cost for running that function, whether successfully…",8,null],[12,"result","","Result of execution. This is either the return values or…",8,null],[5,"native_gas","","Return the native gas entry in `CostTable` for the given…",null,[[["costtable",3],["nativecostindex",4]],[["gascarrier",6],["gasunits",3]]]],[8,"NativeContext","","`NativeContext` - Native function context.",null,null],[10,"print_stack_trace","","Prints stack trace.",9,[[],["vmresult",6]]],[10,"cost_table","","Gets cost table ref.",9,[[],["costtable",3]]],[10,"save_under_address","","",9,[[["moduleid",3],["identstr",3],["accountaddress",3],["struct",3]],["vmresult",6]]],[10,"save_event","","Saves contract event.",9,[[["contractevent",4]],["vmresult",6]]],[10,"convert_to_fat_types","","Converts types to fet types.",9,[[["vec",3],["type",4]],[["vec",3],["vmresult",6]]]],[10,"is_resource","","Whether a type is a resource or not.",9,[[["type",4]],["vmresult",6]]],[11,"ok","","Return values of a successful execution.",8,[[["gascarrier",6],["gasunits",3],["vec",3],["value",3]]]],[11,"err","","`VMStatus` of a failed execution. The failure is a runtime…",8,[[["gascarrier",6],["gasunits",3],["vmstatus",3]]]],[0,"values","move_vm_types","",null,null],[0,"values_impl","move_vm_types::values","",null,null],[3,"SignerRef","move_vm_types::values::values_impl","",null,null],[3,"VectorRef","","",null,null],[3,"Vector","","",null,null],[3,"StructRef","","A reference to a Move struct that allows you to take a…",null,null],[3,"Reference","","A generic Move reference that offers two functinalities:…",null,null],[3,"Value","","A Move value -- a wrapper around `ValueImpl` which can be…",null,null],[3,"Locals","","The locals for a function frame. It allows values to be…",null,null],[3,"Struct","","A Move struct.",null,null],[3,"GlobalValue","","A special value that lives in global storage.",null,null],[4,"IntegerValue","","An integer value in Move.",null,null],[13,"U8","","",10,null],[13,"U64","","",10,null],[13,"U128","","",10,null],[0,"debug","","",null,null],[5,"print_reference","move_vm_types::values::values_impl::debug","",null,[[["fattype",4],["reference",3]],["vmresult",6]]],[5,"print_locals","","",null,[[["locals",3]],["vmresult",6]]],[0,"prop","move_vm_types::values::values_impl","",null,null],[5,"value_strategy_with_layout","move_vm_types::values::values_impl::prop","",null,[[["fattype",4]]]],[5,"layout_and_value_strategy","","",null,[[]]],[11,"as_move_value","move_vm_types::values::values_impl","",11,[[["fattype",4]],["movevalue",4]]],[17,"INDEX_OUT_OF_BOUNDS","","",null,null],[17,"POP_EMPTY_VEC","","",null,null],[17,"DESTROY_NON_EMPTY_VEC","","",null,null],[8,"VMValueCast","","",null,null],[10,"cast","","",12,[[],["vmresult",6]]],[11,"is_valid_script_arg","","",11,[[["signaturetoken",4]]]],[11,"copy_value","","",11,[[],["vmresult",6]]],[11,"equals","","",11,[[],["vmresult",6]]],[11,"read_ref","","",13,[[],[["vmresult",6],["value",3]]]],[11,"read_ref","","",14,[[],[["vmresult",6],["value",3]]]],[11,"write_ref","","",14,[[["value",3]],["vmresult",6]]],[11,"borrow_field","","",13,[[],[["vmresult",6],["value",3]]]],[11,"borrow_loc","","",15,[[],[["vmresult",6],["value",3]]]],[11,"borrow_signer","","",16,[[],[["vmresult",6],["value",3]]]],[11,"new","","",15,[[]]],[11,"check_resources_for_return","","",15,[[],["vmresult",6]]],[11,"copy_loc","","",15,[[],[["vmresult",6],["value",3]]]],[11,"move_loc","","",15,[[],[["vmresult",6],["value",3]]]],[11,"store_loc","","",15,[[["value",3]],["vmresult",6]]],[11,"u8","","",11,[[]]],[11,"u64","","",11,[[]]],[11,"u128","","",11,[[]]],[11,"bool","","",11,[[]]],[11,"address","","",11,[[["accountaddress",3]]]],[11,"signer","","",11,[[["accountaddress",3]]]],[11,"transaction_argument_signer_reference","","Create a \\\"unowned\\\" reference to a signer value (&signer)…",11,[[["accountaddress",3]]]],[11,"struct_","","",11,[[["struct",3]]]],[11,"vector_u8","","",11,[[]]],[11,"vector_u64","","",11,[[]]],[11,"vector_u128","","",11,[[]]],[11,"vector_bool","","",11,[[]]],[11,"vector_address","","",11,[[]]],[11,"vector_general","","",11,[[]]],[11,"value_as","","",11,[[],["vmresult",6]]],[11,"value_as","","",10,[[],["vmresult",6]]],[11,"add_checked","","",10,[[],["vmresult",6]]],[11,"sub_checked","","",10,[[],["vmresult",6]]],[11,"mul_checked","","",10,[[],["vmresult",6]]],[11,"div_checked","","",10,[[],["vmresult",6]]],[11,"rem_checked","","",10,[[],["vmresult",6]]],[11,"bit_or","","",10,[[],["vmresult",6]]],[11,"bit_and","","",10,[[],["vmresult",6]]],[11,"bit_xor","","",10,[[],["vmresult",6]]],[11,"shl_checked","","",10,[[],["vmresult",6]]],[11,"shr_checked","","",10,[[],["vmresult",6]]],[11,"lt","","",10,[[],["vmresult",6]]],[11,"le","","",10,[[],["vmresult",6]]],[11,"gt","","",10,[[],["vmresult",6]]],[11,"ge","","",10,[[],["vmresult",6]]],[11,"into_value","","",10,[[],["value",3]]],[11,"cast_u8","","",10,[[],["vmresult",6]]],[11,"cast_u64","","",10,[[],["vmresult",6]]],[11,"cast_u128","","",10,[[],["vmresult",6]]],[11,"len","","",17,[[["type",4]],[["vmresult",6],["value",3]]]],[11,"push_back","","",17,[[["type",4],["value",3]],["vmresult",6]]],[11,"borrow_elem","","",17,[[["gascarrier",6],["gasunits",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[11,"pop","","",17,[[["gascarrier",6],["gasunits",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[11,"swap","","",17,[[["gascarrier",6],["gasunits",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[11,"empty","","",18,[[["gascarrier",6],["gasunits",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[11,"destroy_empty","","",18,[[["gascarrier",6],["gasunits",3],["type",4]],[["vmresult",6],["nativeresult",3]]]],[11,"size","","",19,[[],[["abstractmemorysize",3],["gascarrier",6]]]],[11,"size","","",11,[[],[["abstractmemorysize",3],["gascarrier",6]]]],[11,"size","","",14,[[],[["abstractmemorysize",3],["gascarrier",6]]]],[11,"size","","",20,[[],[["abstractmemorysize",3],["gascarrier",6]]]],[11,"pack","","",19,[[["intoiterator",8]]]],[11,"unpack","","",19,[[],["vmresult",6]]],[11,"new","","",20,[[["value",3]],["vmresult",6]]],[11,"borrow_global","","",20,[[],[["vmresult",6],["value",3]]]],[11,"mark_dirty","","",20,[[],["vmresult",6]]],[11,"is_clean","","",20,[[],["vmresult",6]]],[11,"is_dirty","","",20,[[],["vmresult",6]]],[11,"into_owned_struct","","",20,[[],[["vmresult",6],["struct",3]]]],[11,"simple_deserialize","","",11,[[["fattype",4]],[["vmresult",6],["value",3]]]],[11,"simple_serialize","","",11,[[["fattype",4]],[["vec",3],["option",4]]]],[11,"simple_deserialize","","",19,[[["fatstructtype",3]],[["vmresult",6],["struct",3]]]],[11,"simple_serialize","","",19,[[["fatstructtype",3]],[["vec",3],["option",4]]]],[11,"deserialize_constant","","",11,[[["constant",3]],[["option",4],["value",3]]]],[14,"pop_arg","move_vm_types","Return the argument at the top of the stack.",null,null],[11,"from","move_vm_types::gas_schedule","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","move_vm_types::loaded_data::runtime_types","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","move_vm_types::loaded_data::types","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","move_vm_types::natives::function","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","move_vm_types::values::values_impl","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"cast","","",11,[[],["vmresult",6]]],[11,"cast","","",11,[[],["vmresult",6]]],[11,"cast","","",11,[[],["vmresult",6]]],[11,"cast","","",11,[[],["vmresult",6]]],[11,"cast","","",11,[[],[["accountaddress",3],["vmresult",6]]]],[11,"cast","","",11,[[],[["vmresult",6],["integervalue",4]]]],[11,"cast","","",11,[[],[["vmresult",6],["reference",3]]]],[11,"cast","","",11,[[],[["vmresult",6],["vec",3]]]],[11,"cast","","",11,[[],[["vmresult",6],["struct",3]]]],[11,"cast","","",11,[[],[["vmresult",6],["structref",3]]]],[11,"cast","","",11,[[],[["vec",3],["vmresult",6]]]],[11,"cast","","",11,[[],[["vmresult",6],["signerref",3]]]],[11,"cast","","",11,[[],[["vectorref",3],["vmresult",6]]]],[11,"cast","","",11,[[],[["vmresult",6],["vector",3]]]],[11,"cast","","",10,[[],["vmresult",6]]],[11,"cast","","",10,[[],["vmresult",6]]],[11,"cast","","",10,[[],["vmresult",6]]],[11,"clone","move_vm_types::gas_schedule","",1,[[],["nativecostindex",4]]],[11,"clone","move_vm_types::loaded_data::runtime_types","",3,[[],["structtype",3]]],[11,"clone","","",4,[[],["type",4]]],[11,"clone","move_vm_types::loaded_data::types","",6,[[],["fatstructtype",3]]],[11,"clone","","",7,[[],["fattype",4]]],[11,"cmp","move_vm_types::gas_schedule","",1,[[["nativecostindex",4]],["ordering",4]]],[11,"cmp","move_vm_types::loaded_data::runtime_types","",3,[[["structtype",3]],["ordering",4]]],[11,"cmp","","",4,[[["type",4]],["ordering",4]]],[11,"eq","move_vm_types::gas_schedule","",1,[[["nativecostindex",4]]]],[11,"eq","move_vm_types::loaded_data::runtime_types","",3,[[["structtype",3]]]],[11,"ne","","",3,[[["structtype",3]]]],[11,"eq","","",4,[[["type",4]]]],[11,"ne","","",4,[[["type",4]]]],[11,"eq","move_vm_types::loaded_data::types","",6,[[["fatstructtype",3]]]],[11,"ne","","",6,[[["fatstructtype",3]]]],[11,"eq","","",7,[[["fattype",4]]]],[11,"ne","","",7,[[["fattype",4]]]],[11,"partial_cmp","move_vm_types::gas_schedule","",1,[[["nativecostindex",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","move_vm_types::loaded_data::runtime_types","",3,[[["structtype",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["structtype",3]]]],[11,"le","","",3,[[["structtype",3]]]],[11,"gt","","",3,[[["structtype",3]]]],[11,"ge","","",3,[[["structtype",3]]]],[11,"partial_cmp","","",4,[[["type",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["type",4]]]],[11,"le","","",4,[[["type",4]]]],[11,"gt","","",4,[[["type",4]]]],[11,"ge","","",4,[[["type",4]]]],[11,"fmt","move_vm_types::gas_schedule","",1,[[["formatter",3]],["result",6]]],[11,"fmt","move_vm_types::loaded_data::runtime_types","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","move_vm_types::loaded_data::types","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","move_vm_types::values::values_impl","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"hash","move_vm_types::gas_schedule","",1,[[]]],[11,"hash","move_vm_types::loaded_data::runtime_types","",3,[[]]],[11,"hash","","",4,[[]]],[11,"deserialize","move_vm_types::loaded_data::types","",6,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"arbitrary_with","","",7,[[]]]],"p":[[8,"DataStore"],[4,"NativeCostIndex"],[3,"CostStrategy"],[3,"StructType"],[4,"Type"],[8,"TypeConverter"],[3,"FatStructType"],[4,"FatType"],[3,"NativeResult"],[8,"NativeContext"],[4,"IntegerValue"],[3,"Value"],[8,"VMValueCast"],[3,"StructRef"],[3,"Reference"],[3,"Locals"],[3,"SignerRef"],[3,"VectorRef"],[3,"Vector"],[3,"Struct"],[3,"GlobalValue"]]},\
"netcore":{"doc":"Core types and traits for building Peer to Peer networks.","i":[[0,"compat","netcore","This module provides a compatibility shim between traits…",null,null],[3,"IoCompat","netcore::compat","`IoCompat` provides a compatibility shim between the…",null,null],[11,"new","","",0,[[]]],[0,"framing","netcore","",null,null],[5,"read_u16frame","netcore::framing","Read a u16 length prefixed frame from `Stream` into `buf`.",null,[[["bytesmut",3]]]],[5,"write_u16frame","","Write the contents of `buf` to `stream` prefixed with a…",null,[[]]],[0,"negotiate","netcore","Protocol negotiation on AsyncRead/AsyncWrite streams",null,null],[5,"negotiate_inbound","netcore::negotiate","Perform protocol negotiation on an inbound `stream`…",null,[[]]],[5,"negotiate_outbound_interactive","","Perform protocol negotiation on an outbound `stream` using…",null,[[]]],[5,"negotiate_outbound_select","","Perform an optimistic protocol negotiation on `stream`…",null,[[]]],[0,"transport","netcore","Low-level module for establishing connections with peers",null,null],[4,"ConnectionOrigin","netcore::transport","Origin of how a Connection was established.",null,null],[13,"Inbound","","`Inbound` indicates that we are the listener for this…",1,null],[13,"Outbound","","`Outbound` indicates that we are the dialer for this…",1,null],[0,"and_then","","",null,null],[3,"AndThen","netcore::transport::and_then","An [`AndThen`] is a transport which applies a closure (F)…",null,null],[3,"AndThenStream","","Listener stream returned by listen_on on an AndThen…",null,null],[3,"AndThenFuture","","Future generated by the [`AndThen`] transport.",null,null],[0,"boxed","netcore::transport","",null,null],[3,"BoxedTransport","netcore::transport::boxed","See the boxed method for more information.",null,null],[6,"Listener","","",null,null],[6,"Inbound","","",null,null],[6,"Outbound","","",null,null],[0,"memory","netcore::transport","",null,null],[3,"MemoryTransport","netcore::transport::memory","Transport to build in-memory connections",null,null],[3,"Listener","","",null,null],[11,"new","","",2,[[["memorylistener",3]]]],[0,"tcp","netcore::transport","TCP Transport",null,null],[3,"TcpTransport","netcore::transport::tcp","Transport to build TCP connections",null,null],[12,"recv_buffer_size","","Size of the recv buffer size to set for opened sockets, or…",3,null],[12,"send_buffer_size","","Size of the send buffer size to set for opened sockets, or…",3,null],[12,"ttl","","TTL to set for opened sockets, or `None` to keep default.",3,null],[12,"keepalive","","Keep alive duration to set for opened sockets, or `None`…",3,null],[12,"nodelay","","`TCP_NODELAY` to set for opened sockets, or `None` to keep…",3,null],[3,"TcpListenerStream","","",null,null],[3,"TcpOutbound","","",null,null],[3,"TcpSocket","","A wrapper around a tokio TcpStream",null,null],[0,"timeout","netcore::transport","",null,null],[3,"TimeoutTransport","netcore::transport::timeout","A [`TimeoutTransport`] is a transport which wraps another…",null,null],[3,"TimeoutStream","","Listener stream returned by listen_on on a TimeoutTransport.",null,null],[3,"TimeoutFuture","","Future which wraps an inner Future with a timeout.",null,null],[4,"TimeoutTransportError","","",null,null],[13,"Timeout","","",4,null],[13,"TimerError","","",4,null],[13,"TransportError","","",4,null],[8,"Transport","netcore::transport","A Transport is responsible for establishing connections…",null,null],[16,"Output","","The result of establishing a connection.",5,null],[16,"Error","","The Error type of errors which can happen while…",5,null],[16,"Listener","","A stream of `Inbound` connections and the address of the…",5,null],[16,"Inbound","","A pending `Output` for an inbound connection, obtained…",5,null],[16,"Outbound","","A pending `Output` for an outbound connection, obtained…",5,null],[10,"listen_on","","Listens on the given [`NetworkAddress`], returning a…",5,[[["networkaddress",3]],["result",4]]],[10,"dial","","Dials the given [`NetworkAddress`], returning a future for…",5,[[["networkaddress",3],["peerid",3]],["result",4]]],[8,"TransportExt","","An extension trait for [`Transport`]s that provides a…",null,null],[11,"boxed","","Turns a [`Transport`] into an abstract boxed transport.",6,[[],["boxedtransport",3]]],[11,"and_then","","Applies a function producing an asynchronous result to…",6,[[],["andthen",3]]],[11,"with_timeout","","Wraps a [`Transport`] with a timeout to the Inbound and…",6,[[["duration",3]],["timeouttransport",3]]],[11,"from","netcore::compat","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","netcore::transport","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","netcore::transport::and_then","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"try_poll_next","","",8,[[["pin",3],["context",3]],[["option",4],["poll",4]]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"try_poll","","",9,[[["pin",3],["context",3]],["poll",4]]],[11,"vzip","","",9,[[]]],[11,"from","netcore::transport::boxed","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","netcore::transport::memory","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"initialize","","",11,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"try_poll_next","","",2,[[["pin",3],["context",3]],[["option",4],["poll",4]]]],[11,"vzip","","",2,[[]]],[11,"from","netcore::transport::tcp","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"try_poll_next","","",12,[[["pin",3],["context",3]],[["option",4],["poll",4]]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"try_poll","","",13,[[["pin",3],["context",3]],["poll",4]]],[11,"vzip","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","netcore::transport::timeout","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"try_poll_next","","",16,[[["pin",3],["context",3]],[["option",4],["poll",4]]]],[11,"vzip","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"try_poll","","",17,[[["pin",3],["context",3]],["poll",4]]],[11,"vzip","","",17,[[]]],[11,"from","","",4,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"listen_on","netcore::transport::and_then","",7,[[["networkaddress",3]],["result",4]]],[11,"dial","","",7,[[["networkaddress",3],["peerid",3]],["result",4]]],[11,"listen_on","netcore::transport::boxed","",10,[[["networkaddress",3]],["result",4]]],[11,"dial","","",10,[[["networkaddress",3],["peerid",3]],["result",4]]],[11,"listen_on","netcore::transport::memory","",11,[[["networkaddress",3]],["result",4]]],[11,"dial","","",11,[[["networkaddress",3],["peerid",3]],["result",4]]],[11,"listen_on","netcore::transport::tcp","",3,[[["networkaddress",3]],["result",4]]],[11,"dial","","",3,[[["networkaddress",3],["peerid",3]],["result",4]]],[11,"listen_on","netcore::transport::timeout","",15,[[["networkaddress",3]],["result",4]]],[11,"dial","","",15,[[["networkaddress",3],["peerid",3]],["result",4]]],[11,"from","","",4,[[]]],[11,"clone","netcore::compat","",0,[[],["iocompat",3]]],[11,"clone","netcore::transport::memory","",11,[[],["memorytransport",3]]],[11,"clone","netcore::transport::tcp","",3,[[],["tcptransport",3]]],[11,"clone","netcore::transport","",1,[[],["connectionorigin",4]]],[11,"default","netcore::transport::memory","",11,[[],["memorytransport",3]]],[11,"default","netcore::transport::tcp","",3,[[],["tcptransport",3]]],[11,"eq","netcore::transport","",1,[[["connectionorigin",4]]]],[11,"fmt","netcore::compat","",0,[[["formatter",3]],["result",6]]],[11,"fmt","netcore::transport::and_then","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","netcore::transport::memory","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","netcore::transport::tcp","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","netcore::transport::timeout","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","netcore::transport","",1,[[["formatter",3]],["result",6]]],[11,"fmt","netcore::transport::timeout","",4,[[["formatter",3]],["result",6]]],[11,"source","","",4,[[],[["error",8],["option",4]]]],[11,"poll","netcore::transport::and_then","",9,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","netcore::transport::tcp","",13,[[["context",3],["pin",3]],["poll",4]]],[11,"poll","netcore::transport::timeout","",17,[[["context",3],["pin",3]],["poll",4]]],[11,"drop","netcore::compat","",0,[[["pin",3]]]],[11,"drop","netcore::transport::and_then","",8,[[["pin",3]]]],[11,"drop","","",9,[[["pin",3]]]],[11,"drop","netcore::transport::timeout","",16,[[["pin",3]]]],[11,"drop","","",17,[[["pin",3]]]],[11,"poll_next","netcore::transport::and_then","",8,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","netcore::transport::memory","",2,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","netcore::transport::tcp","",12,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_next","netcore::transport::timeout","",16,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"poll_read","netcore::compat","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_read","netcore::transport::tcp","",14,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_write","netcore::compat","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_flush","","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_close","","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_write","netcore::transport::tcp","",14,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_flush","","",14,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_close","","",14,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_read","netcore::compat","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_write","","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_flush","","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_shutdown","","",0,[[["context",3],["pin",3]],[["result",6],["poll",4]]]]],"p":[[3,"IoCompat"],[4,"ConnectionOrigin"],[3,"Listener"],[3,"TcpTransport"],[4,"TimeoutTransportError"],[8,"Transport"],[8,"TransportExt"],[3,"AndThen"],[3,"AndThenStream"],[3,"AndThenFuture"],[3,"BoxedTransport"],[3,"MemoryTransport"],[3,"TcpListenerStream"],[3,"TcpOutbound"],[3,"TcpSocket"],[3,"TimeoutTransport"],[3,"TimeoutStream"],[3,"TimeoutFuture"]]},\
"network":{"doc":"","i":[[0,"common","network","",null,null],[3,"NegotiatedSubstream","network::common","A Negotiated substream encapsulates a protocol and a…",null,null],[12,"protocol","","Protocol we have negotiated to use on the substream.",0,null],[12,"substream","","Opened substream.",0,null],[0,"connectivity_manager","network","The ConnectivityManager actor is responsible for ensuring…",null,null],[3,"ConnectivityManager","network::connectivity_manager","The ConnectivityManager actor.",null,null],[4,"DiscoverySource","","Different sources for peer addresses, ordered by priority…",null,null],[13,"OnChain","","",1,null],[13,"Gossip","","",1,null],[13,"Config","","",1,null],[4,"ConnectivityRequest","","Requests received by the [`ConnectivityManager`] manager…",null,null],[13,"UpdateAddresses","","Request to update known addresses of peer with id `PeerId`…",2,null],[13,"UpdateEligibleNodes","","Update set of nodes eligible to join the network.",2,null],[13,"GetDialQueueSize","","Gets current size of dial queue. This is useful in tests.",2,null],[18,"NUM_VARIANTS","","The number of variants in this enum.",1,null],[11,"new","","Creates a new instance of the [`ConnectivityManager`] actor.",3,[[["connectionrequestsender",3],["receiver",3],["vec",3],["connectivityrequest",4],["arc",3],["peerid",3],["networkcontext",3],["receiver",6],["hashmap",3],["rwlock",3]]]],[11,"start","","Starts the [`ConnectivityManager`] actor.",3,[[]]],[0,"error","network","",null,null],[3,"NetworkError","network::error","Errors propagated from the network module.",null,null],[4,"NetworkErrorKind","","",null,null],[13,"IoError","","",4,null],[13,"LcsError","","",4,null],[13,"ProtobufParseError","","",4,null],[13,"SignatureError","","",4,null],[13,"MpscSendError","","",4,null],[13,"OneshotCanceled","","",4,null],[13,"TimerError","","",4,null],[13,"TimedOut","","",4,null],[13,"UnknownTimerError","","",4,null],[13,"PeerManagerError","","",4,null],[13,"ParsingError","","",4,null],[13,"NotConnected","","",4,null],[0,"interface","network","Module exposing generic network interface to a single…",null,null],[3,"NetworkProvider","network::interface","",null,null],[4,"NetworkRequest","","Requests [`NetworkProvider`] receives from the network…",null,null],[13,"SendRpc","","Send an RPC request to peer.",5,null],[13,"SendMessage","","Fire-and-forget style message send to peer.",5,null],[4,"NetworkNotification","","Notifications that [`NetworkProvider`] sends to consumers…",null,null],[13,"RecvRpc","","A new RPC request has been received from peer.",6,null],[13,"RecvMessage","","A new message has been received from peer.",6,null],[11,"start","","",7,[[["transportnotification",4],["sender",3],["connection",3],["handle",3]]]],[0,"peer_manager","network","The PeerManager module is responsible for establishing…",null,null],[3,"PeerManagerRequestSender","network::peer_manager","Convenience wrapper which makes it easy to issue…",null,null],[3,"ConnectionRequestSender","","Convenience wrapper which makes it easy to issue…",null,null],[3,"PeerManager","","Responsible for handling and maintaining connections to…",null,null],[4,"PeerManagerError","","",null,null],[13,"Error","","",8,null],[13,"IoError","","",8,null],[13,"TransportError","","",8,null],[13,"ShuttingDownPeer","","",8,null],[13,"NotConnected","","",8,null],[13,"AlreadyConnected","","",8,null],[13,"OneshotSenderDropped","","",8,null],[13,"MpscSendError","","",8,null],[13,"LcsError","","",8,null],[4,"PeerManagerRequest","","Request received by PeerManager from upstream actors.",null,null],[13,"SendRpc","","Send an RPC request to a remote peer.",9,null],[13,"SendMessage","","Fire-and-forget style message send to a remote peer.",9,null],[4,"PeerManagerNotification","","Notifications sent by PeerManager to upstream actors.",null,null],[13,"RecvRpc","","A new RPC request has been received from a remote peer.",10,null],[13,"RecvMessage","","A new message has been received from a remote peer.",10,null],[4,"ConnectionRequest","","",null,null],[13,"DialPeer","","",11,null],[13,"DisconnectPeer","","",11,null],[4,"ConnectionNotification","","",null,null],[13,"NewPeer","","Connection with a new peer has been established.",12,null],[13,"LostPeer","","Connection to a peer has been terminated. This could have…",12,null],[4,"TransportNotification","","",null,null],[13,"NewConnection","","",13,null],[13,"Disconnected","","",13,null],[0,"conn_notifs_channel","","`conn_notifs_channel` is a channel which delivers to the…",null,null],[5,"new","network::peer_manager::conn_notifs_channel","",null,[[]]],[6,"Sender","","",null,null],[6,"Receiver","","",null,null],[11,"from_transport_error","network::peer_manager","",8,[[["error",3],["into",8]]]],[11,"new","","Construct a new PeerManagerRequestSender with a raw…",14,[[["peermanagerrequest",4],["sender",3]]]],[11,"send_to","","Send a fire-and-forget direct-send message to remote peer.",14,[[["bytes",3],["peerid",3],["protocolid",6]],[["peermanagererror",4],["result",4]]]],[11,"send_to_many","","Send the same message to many recipients using the…",14,[[["bytes",3],["protocolid",6]],[["peermanagererror",4],["result",4]]]],[11,"send_rpc","","Sends a unary RPC to a remote peer and waits to either…",14,[[["protocolid",6],["duration",3],["peerid",3],["bytes",3]]]],[11,"new","","Construct a new ConnectionRequestSender with a raw…",15,[[["sender",3],["connectionrequest",4],["peerid",3]]]],[11,"dial_peer","","",15,[[["peerid",3],["networkaddress",3]]]],[11,"disconnect_peer","","",15,[[["peerid",3]]]],[11,"new","","Construct a new PeerManager actor",16,[[["sender",6],["vec",3],["receiver",3],["sender",3],["connectionrequest",4],["networkaddress",3],["protocolid",6],["peerid",3],["networkcontext",3],["handle",3],["receiver",3],["peermanagerrequest",4],["hashmap",3]]]],[11,"listen_addr","","Get the [`NetworkAddress`] we\'re listening for incoming…",16,[[],["networkaddress",3]]],[11,"start","","Start listening on the set address and return a future…",16,[[]]],[0,"protocols","network","Protocols used by network module for external APIs and…",null,null],[0,"direct_send","network::protocols","Implementation of DirectSend as per Libra wire protocol v1.",null,null],[3,"Message","network::protocols::direct_send","",null,null],[12,"protocol","","Message type.",17,null],[12,"mdata","","Serialized message data.",17,null],[3,"DirectSend","","The DirectSend actor.",null,null],[4,"DirectSendRequest","","",null,null],[13,"SendMessage","","A request to send out a message.",18,null],[4,"DirectSendNotification","","",null,null],[13,"RecvMessage","","A notification that a DirectSend message is received.",19,null],[11,"new","","",20,[[["directsendnotification",4],["peernotification",4],["receiver",3],["directsendrequest",4],["sender",3],["peerhandle",3],["receiver",3]]]],[11,"start","","",20,[[]]],[0,"network","network::protocols","Convenience Network API for Libra",null,null],[3,"NetworkEvents","network::protocols::network","A `Stream` of `Event<TMessage>` from the lower network…",null,null],[3,"NetworkSender","","`NetworkSender` is the generic interface from upper…",null,null],[4,"Event","","Events received by network clients in a validator",null,null],[13,"Message","","New inbound direct-send message from peer.",21,null],[13,"RpcRequest","","New inbound rpc request. The request is fulfilled by…",21,null],[13,"NewPeer","","Peer which we have a newly established connection with.",21,null],[13,"LostPeer","","Peer with which we\'ve lost our connection.",21,null],[0,"dummy","","Integration tests for validator_network.",null,null],[3,"DummyMsg","network::protocols::network::dummy","",null,null],[12,"0","","",22,null],[3,"DummyNetworkSender","","",null,null],[3,"DummyNetwork","","",null,null],[12,"runtime","","",23,null],[12,"dialer_peer_id","","",23,null],[12,"dialer_events","","",23,null],[12,"dialer_sender","","",23,null],[12,"listener_peer_id","","",23,null],[12,"listener_events","","",23,null],[12,"listener_sender","","",23,null],[5,"setup_network","","The following sets up a 2 peer network and verifies…",null,[[],["dummynetwork",3]]],[6,"DummyNetworkEvents","","TODO(davidiw): In DummyNetwork, replace DummyMsg with a…",null,null],[11,"new","","",24,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"send_to","","",24,[[["peerid",3],["dummymsg",3]],[["networkerror",3],["result",4]]]],[11,"send_rpc","","",24,[[["duration",3],["peerid",3],["dummymsg",3]]]],[8,"Message","network::protocols::network","",null,null],[11,"new","","",25,[[["receiver",3],["peerid",3],["connectionnotification",4],["receiver",3],["peermanagernotification",4]]]],[11,"new","","",26,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"dial_peer","","Request that a given Peer be dialed at the provided…",26,[[["peerid",3],["networkaddress",3]]]],[11,"disconnect_peer","","Request that a given Peer be disconnected and…",26,[[["peerid",3]]]],[11,"send_to","","Send a protobuf message to a single recipient. Provides a…",26,[[["peerid",3],["protocolid",6]],[["networkerror",3],["result",4]]]],[11,"send_to_many","","Send a protobuf message to a many recipients. Provides a…",26,[[["protocolid",6]],[["networkerror",3],["result",4]]]],[11,"send_rpc","","Send a protobuf rpc request to a single recipient while…",26,[[["duration",3],["peerid",3],["protocolid",6]]]],[0,"rpc","network::protocols","Implementation of the RPC protocol as per Libra wire…",null,null],[3,"InboundRpcRequest","network::protocols::rpc","A wrapper struct for an inbound rpc request and its…",null,null],[12,"protocol","","Rpc method identifier, e.g.,…",27,null],[12,"data","","The serialized request data received from the sender.",27,null],[12,"res_tx","","Channel over which the rpc response is sent from the upper…",27,null],[3,"OutboundRpcRequest","","A wrapper struct for an outbound rpc request and its…",null,null],[12,"protocol","","Rpc method identifier, e.g.,…",28,null],[12,"data","","The serialized request data to be sent to the receiver.",28,null],[12,"res_tx","","Channel over which the rpc response is sent from the rpc…",28,null],[12,"timeout","","The timeout duration for the entire rpc call. If the…",28,null],[3,"Rpc","","The rpc actor.",null,null],[4,"RpcNotification","","Events sent from the [`Rpc`] actor to the…",null,null],[13,"RecvRpc","","A new inbound rpc request has been received from a remote…",29,null],[0,"error","","Rpc protocol errors",null,null],[4,"RpcError","network::protocols::rpc::error","",null,null],[13,"Error","","",30,null],[13,"IoError","","",30,null],[13,"LcsError","","",30,null],[13,"NotConnected","","",30,null],[13,"InvalidRpcResponse","","",30,null],[13,"UnexpectedRpcResponse","","",30,null],[13,"UnexpectedRpcRequest","","",30,null],[13,"UnexpectedResponseChannelCancel","","",30,null],[13,"ApplicationError","","",30,null],[13,"MpscSendError","","",30,null],[13,"TooManyPending","","",30,null],[13,"TimedOut","","",30,null],[0,"fuzzing","network::protocols::rpc","fuzzing module for the rpc protocol",null,null],[5,"generate_corpus","network::protocols::rpc::fuzzing","",null,[[["valuegenerator",3]],["vec",3]]],[5,"fuzzer","","",null,[[]]],[11,"new","network::protocols::rpc","Create a new instance of the [`Rpc`] protocol actor.",31,[[["sender",3],["outboundrpcrequest",3],["peerhandle",3],["peernotification",4],["rpcnotification",4],["duration",3],["receiver",3],["receiver",3]]]],[11,"start","","Start the [`Rpc`] actor\'s event loop.",31,[[]]],[0,"discovery","network::protocols","Protocol to discover network addresses of other peers on…",null,null],[3,"DiscoveryNetworkSender","network::protocols::discovery","The interface from Discovery to Networking layer.",null,null],[3,"Discovery","","The actor running the discovery protocol.",null,null],[3,"DiscoveryMsg","","A Discovery message contains notes collected from other…",null,null],[3,"Note","","A `Note` contains a validator\'s signed `PeerInfo` as well…",null,null],[3,"PeerInfo","","A `PeerInfo` represents the network address(es) of a Peer.",null,null],[3,"PeerInfoHasher","","",null,null],[3,"FullNodeInfo","","Discovery information relevant to public full nodes and…",null,null],[3,"FullNodeInfoHasher","","",null,null],[5,"add_to_network","","Register the discovery sender and event handler with…",null,[[["networkbuilder",3]]]],[6,"DiscoveryNetworkEvents","","The interface from Network to Discovery module.",null,null],[11,"new","","Create a new Discovery sender",32,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"send_to","","Send a DiscoveryMsg to a peer.",32,[[["peerid",3],["discoverymsg",3]],[["networkerror",3],["result",4]]]],[11,"new","","",33,[[["discoverynetworksender",3],["connectivityrequest",4],["discoverynetworkevents",6],["networkcontext",3],["sender",3],["networkaddress",3],["vec",3]]]],[11,"start","","",33,[[]]],[0,"health_checker","network::protocols","Protocol used to ensure peer liveness",null,null],[3,"HealthCheckerNetworkSender","network::protocols::health_checker","The interface from HealthChecker to Networking layer.",null,null],[3,"Ping","","",null,null],[3,"Pong","","",null,null],[3,"HealthChecker","","The actor performing health checks by running the Ping…",null,null],[4,"HealthCheckerMsg","","",null,null],[13,"Ping","","",34,null],[13,"Pong","","",34,null],[5,"add_to_network","","",null,[[["networkbuilder",3]]]],[6,"HealthCheckerNetworkEvents","","The interface from Network to HealthChecker layer.",null,null],[11,"new","","",35,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"send_rpc","","Send a HealthChecker Ping RPC request to remote peer…",35,[[["healthcheckermsg",4],["duration",3],["peerid",3]]]],[11,"disconnect_peer","","",35,[[["peerid",3]]]],[11,"new","","Create new instance of the [`HealthChecker`] actor.",36,[[["duration",3],["healthcheckernetworksender",3],["networkcontext",3],["healthcheckernetworkevents",6]]]],[11,"start","","",36,[[]]],[0,"identity","network::protocols","Protocol used to exchange supported protocol information…",null,null],[5,"exchange_handshake","network::protocols::identity","The Handshake exchange protocol.",null,[[["handshakemsg",3]]]],[0,"wire","network::protocols","This module defines the structs transported during the…",null,null],[0,"handshake","network::protocols::wire","",null,null],[0,"v1","network::protocols::wire::handshake","This module defines the structs transported during the…",null,null],[3,"SupportedProtocols","network::protocols::wire::handshake::v1","",null,null],[3,"HandshakeMsg","","The HandshakeMsg contains a mapping from…",null,null],[12,"supported_protocols","","",37,null],[12,"network_id","","",37,null],[4,"ProtocolId","","Unique identifier associated with each application…",null,null],[13,"ConsensusRpc","","",38,null],[13,"ConsensusDirectSend","","",38,null],[13,"MempoolDirectSend","","",38,null],[13,"StateSynchronizerDirectSend","","",38,null],[13,"DiscoveryDirectSend","","",38,null],[13,"HealthCheckerRpc","","",38,null],[13,"IdentityDirectSend","","",38,null],[13,"OnchainDiscoveryRpc","","",38,null],[4,"MessagingProtocolVersion","","Enum representing different versions of the Libra network…",null,null],[13,"V1","","",39,null],[11,"as_str","","",38,[[]]],[11,"new","","",37,[[["networkid",4]]]],[11,"add","","",37,[[["supportedprotocols",3],["messagingprotocolversion",4]]]],[11,"find_common_protocols","","",37,[[["handshakemsg",3]],["option",4]]],[0,"messaging","network::protocols::wire","",null,null],[0,"v1","network::protocols::wire::messaging","This module defines the structs transported during the…",null,null],[3,"Nonce","network::protocols::wire::messaging::v1","Nonces used by Ping and Pong message types.",null,null],[12,"0","","",40,null],[3,"RpcRequest","","",null,null],[12,"request_id","","RequestId for the RPC Request.",41,null],[12,"protocol_id","","`protocol_id` is a variant of the ProtocolId enum.",41,null],[12,"priority","","Request priority in the range 0..=255.",41,null],[12,"raw_request","","Request payload. This will be parsed by the…",41,null],[3,"RpcResponse","","",null,null],[12,"request_id","","RequestId for corresponding request. This is copied as is…",42,null],[12,"priority","","Response priority in the range 0..=255. This will likely…",42,null],[12,"raw_response","","Response payload.",42,null],[3,"DirectSendMsg","","",null,null],[12,"protocol_id","","`protocol_id` is a variant of the ProtocolId enum.",43,null],[12,"priority","","Message priority in the range 0..=255.",43,null],[12,"raw_msg","","Message payload.",43,null],[4,"NetworkMessage","","Message variants that are sent on the wire. New variants…",null,null],[13,"Error","","",44,null],[13,"Ping","","",44,null],[13,"Pong","","",44,null],[13,"RpcRequest","","",44,null],[13,"RpcResponse","","",44,null],[13,"DirectSendMsg","","",44,null],[4,"ErrorCode","","Enum representing various error codes that can be embedded…",null,null],[13,"TimedOut","","Ping timed out.",45,null],[13,"ParsingError","","Failed to parse NetworkMessage when interpreting according…",45,null],[13,"NotSupported","","A message was received for a protocol that is not…",45,null],[6,"RequestId","","Create alias RequestId for u32.",null,null],[6,"Priority","","Create alias Priority for u8.",null,null],[0,"validator_network","network","Network API for Libra",null,null],[0,"network_builder","network::validator_network","Remotely authenticated vs. unauthenticated network…",null,null],[3,"NetworkBuilder","network::validator_network::network_builder","Build Network module with custom configuration values.…",null,null],[4,"AuthenticationMode","","",null,null],[13,"ServerOnly","","Inbound and outbound connections are secured with NoiseIK;…",46,null],[13,"Mutual","","Inbound and outbound connections are secured with NoiseIK.…",46,null],[17,"NETWORK_CHANNEL_SIZE","","",null,null],[17,"DISCOVERY_INTERVAL_MS","","",null,null],[17,"PING_INTERVAL_MS","","",null,null],[17,"PING_TIMEOUT_MS","","",null,null],[17,"DISOVERY_MSG_TIMEOUT_MS","","",null,null],[17,"CONNECTIVITY_CHECK_INTERNAL_MS","","",null,null],[17,"INBOUND_RPC_TIMEOUT_MS","","",null,null],[17,"MAX_CONCURRENT_OUTBOUND_RPCS","","",null,null],[17,"MAX_CONCURRENT_INBOUND_RPCS","","",null,null],[17,"PING_FAILURES_TOLERATED","","",null,null],[17,"MAX_CONCURRENT_NETWORK_REQS","","",null,null],[17,"MAX_CONCURRENT_NETWORK_NOTIFS","","",null,null],[17,"MAX_CONNECTION_DELAY_MS","","",null,null],[11,"public_key","","Convenience method to retrieve the public key for the auth…",46,[[],["publickey",3]]],[11,"new","","Return a new NetworkBuilder initialized with default…",47,[[["roletype",4],["peerid",3],["handle",3],["networkid",4],["networkaddress",3]],["networkbuilder",3]]],[11,"network_context","","",47,[[],["networkcontext",3]]],[11,"peer_id","","",47,[[],["peerid",3]]],[11,"authentication_mode","","Set network authentication mode.",47,[[["authenticationmode",4]]]],[11,"advertised_address","","Set an address to advertise, if different from the listen…",47,[[["networkaddress",3]]]],[11,"trusted_peers","","Set trusted peers.",47,[[["hashmap",3],["publickey",3],["peerid",3]]]],[11,"seed_peers","","Set seed peers to bootstrap discovery",47,[[["hashmap",3],["peerid",3],["vec",3]]]],[11,"discovery_interval_ms","","Set discovery ticker interval",47,[[]]],[11,"connectivity_check_interval_ms","","Set connectivity check ticker interval",47,[[]]],[11,"conn_mgr_reqs_tx","","",47,[[],[["option",4],["sender",3]]]],[11,"add_protocol_handler","","Add a handler for given protocols using raw bytes.",47,[[["queuestyle",4],["intcountervec",6],["option",4],["vec",3],["protocolid",6]]]],[11,"add_connection_event_listener","","",47,[[],["receiver",6]]],[11,"add_connectivity_manager","","Add a [`ConnectivityManager`] to the network.",47,[[]]],[11,"add_gossip_discovery","","Add the (gossip) [`Discovery`] protocol to the network.",47,[[]]],[11,"add_connection_monitoring","","",47,[[]]],[11,"build","","Create the configured transport and start PeerManager.…",47,[[],["networkaddress",3]]],[0,"counters","network","",null,null],[7,"LIBRA_NETWORK_PEERS","network::counters","",null,null],[7,"LIBRA_NETWORK_DISCOVERY_NOTES","","",null,null],[7,"LIBRA_NETWORK_RPC_MESSAGES","","",null,null],[7,"LIBRA_NETWORK_RPC_BYTES","","",null,null],[7,"LIBRA_NETWORK_RPC_LATENCY","","",null,null],[7,"LIBRA_NETWORK_DIRECT_SEND_MESSAGES","","",null,null],[7,"LIBRA_NETWORK_DIRECT_SEND_BYTES","","",null,null],[7,"PENDING_NETWORK_NOTIFICATIONS","","Counters(queued,dequeued,dropped) related to inbound…",null,null],[7,"PENDING_NETWORK_REQUESTS","","Counter of pending requests in Network Provider",null,null],[7,"PENDING_HEALTH_CHECKER_NETWORK_EVENTS","","Counter of pending network events to Health Checker.",null,null],[7,"PENDING_DISCOVERY_NETWORK_EVENTS","","Counter of pending network events to Discovery.",null,null],[7,"PENDING_PEER_MANAGER_REQUESTS","","Counter of pending requests in Peer Manager",null,null],[7,"OP_COUNTERS","","",null,null],[7,"PENDING_CONNECTIVITY_MANAGER_REQUESTS","","Channel Counters",null,null],[7,"PENDING_CONNECTION_HANDLER_NOTIFICATIONS","","Counter of pending Connection Handler notifications to…",null,null],[7,"PENDING_PEER_MANAGER_DIAL_REQUESTS","","Counter of pending dial requests in Peer Manager",null,null],[7,"PENDING_WIRE_MESSAGES","","Counter of messages pending in queue to be sent out on the…",null,null],[7,"PENDING_DIRECT_SEND_REQUESTS","","Counter of pending requests in Direct Send",null,null],[7,"PENDING_DIRECT_SEND_NOTIFICATIONS","","Counter of pending Direct Send notifications to Network…",null,null],[7,"PENDING_RPC_REQUESTS","","Counter of pending requests in RPC",null,null],[7,"PENDING_RPC_NOTIFICATIONS","","Counter of pending RPC notifications to Network Provider",null,null],[7,"PENDING_PEER_REQUESTS","","Counter of pending requests for each remote peer",null,null],[7,"PENDING_PEER_RPC_NOTIFICATIONS","","Counter of pending RPC events from Peer to Rpc actor.",null,null],[7,"PENDING_PEER_DIRECT_SEND_NOTIFICATIONS","","Counter of pending DirectSend events from Peer to…",null,null],[7,"PENDING_PEER_NETWORK_NOTIFICATIONS","","Counter of pending connection notifications from Peer to…",null,null],[17,"REQUEST_LABEL","","",null,null],[17,"RESPONSE_LABEL","","",null,null],[17,"CANCELED_LABEL","","",null,null],[17,"DECLINED_LABEL","","",null,null],[17,"FAILED_LABEL","","",null,null],[17,"RECEIVED_LABEL","","",null,null],[17,"SENT_LABEL","","",null,null],[0,"noise","network","This crate implements wrappers around our [Noise][noise]…",null,null],[0,"handshake","network::noise","The handshake module implements the handshake part of the…",null,null],[3,"AntiReplayTimestamps","network::noise::handshake","In a mutually authenticated network, a client message is…",null,null],[3,"NoiseUpgrader","","The Noise configuration to be used to perform a protocol…",null,null],[4,"HandshakeAuthMode","","Noise handshake authentication mode.",null,null],[13,"Mutual","","In `Mutual` mode, both sides will authenticate each other…",48,null],[12,"anti_replay_timestamps","network::noise::handshake::HandshakeAuthMode","",49,null],[12,"trusted_peers","","",49,null],[13,"ServerOnly","network::noise::handshake","In `ServerOnly` mode, the dialer authenticates the server.…",48,null],[11,"is_replay","","Returns true if the timestamp has already been observed…",50,[[["publickey",3]]]],[11,"store_timestamp","","Stores the timestamp",50,[[["publickey",3]]]],[11,"mutual","","",48,[[["arc",3],["rwlock",3]]]],[11,"new","","Create a new NoiseConfig with the provided keypair and…",51,[[["privatekey",3],["handshakeauthmode",4],["peerid",3]]]],[11,"upgrade_with_noise","","Perform a protocol upgrade on an underlying connection. In…",51,[[["option",4],["publickey",3],["connectionorigin",4]]]],[11,"upgrade_outbound","","Perform an outbound protocol upgrade on this connection.",51,[[["publickey",3]]]],[11,"upgrade_inbound","","Perform an inbound protocol upgrade on this connection.",51,[[]]],[0,"stream","network::noise","The socket module implements the post-handshake part of…",null,null],[3,"NoiseStream","network::noise::stream","A Noise stream with a remote peer.",null,null],[11,"new","","Create a NoiseStream from a socket and a noise…",52,[[["noisesession",3]]]],[11,"get_remote_static","","Pull out the static public key of the remote",52,[[],["publickey",3]]],[11,"into_socket","","",52,[[]]],[0,"fuzzing","network::noise","",null,null],[5,"generate_corpus","network::noise::fuzzing","",null,[[["valuegenerator",3]],["vec",3]]],[5,"fuzz_initiator","","",null,[[]]],[5,"fuzz_responder","","",null,[[]]],[7,"KEYPAIR","","",null,null],[6,"DisconnectReason","network","",null,null],[6,"ConnectivityRequest","","",null,null],[6,"ProtocolId","","",null,null],[11,"from","network::common","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","network::connectivity_manager","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","network::error","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_string","","",53,[[],["string",3]]],[11,"borrow","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"equivalent","","",4,[[]]],[11,"from","network::interface","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","network::peer_manager","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"equivalent","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","network::protocols::direct_send","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"equivalent","","",17,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"equivalent","","",19,[[]]],[11,"from","network::protocols::network","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"try_poll_next","","",25,[[["pin",3],["context",3]],[["poll",4],["option",4]]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","network::protocols::network::dummy","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"test_only_hash","","",22,[[],["hashvalue",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","network::protocols::rpc","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","network::protocols::rpc::error","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","network::protocols::discovery","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"test_only_hash","","",54,[[],["hashvalue",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"test_only_hash","","",55,[[],["hashvalue",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"test_only_hash","","",56,[[],["hashvalue",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"clear","","",57,[[]]],[11,"initialize","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"test_only_hash","","",58,[[],["hashvalue",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"clear","","",59,[[]]],[11,"initialize","","",59,[[]]],[11,"from","network::protocols::health_checker","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"test_only_hash","","",60,[[],["hashvalue",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"test_only_hash","","",61,[[],["hashvalue",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"test_only_hash","","",34,[[],["hashvalue",3]]],[11,"from","network::protocols::wire::handshake::v1","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"test_only_hash","","",62,[[],["hashvalue",3]]],[11,"clear","","",62,[[]]],[11,"initialize","","",62,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"test_only_hash","","",37,[[],["hashvalue",3]]],[11,"clear","","",37,[[]]],[11,"initialize","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"test_only_hash","","",38,[[],["hashvalue",3]]],[11,"equivalent","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"test_only_hash","","",39,[[],["hashvalue",3]]],[11,"equivalent","","",39,[[]]],[11,"from","network::protocols::wire::messaging::v1","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"test_only_hash","","",40,[[],["hashvalue",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"test_only_hash","","",41,[[],["hashvalue",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"test_only_hash","","",42,[[],["hashvalue",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"test_only_hash","","",43,[[],["hashvalue",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"test_only_hash","","",44,[[],["hashvalue",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"test_only_hash","","",45,[[],["hashvalue",3]]],[11,"from","network::validator_network::network_builder","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","network::noise::handshake","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"clear","","",50,[[]]],[11,"initialize","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","network::noise::stream","",52,[[]]],[11,"into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","network::error","",53,[[["networkerrorkind",4]],["networkerror",3]]],[11,"from","","",53,[[["error",3]],["networkerror",3]]],[11,"from","","",53,[[["error",3]],["networkerror",3]]],[11,"from","","",53,[[["error",4]],["networkerror",3]]],[11,"from","","",53,[[["verifyerror",4]],["networkerror",3]]],[11,"from","","",53,[[["senderror",3]],["networkerror",3]]],[11,"from","","",53,[[["canceled",3]],["networkerror",3]]],[11,"from","","",53,[[["peermanagererror",4]],["networkerror",3]]],[11,"from","","",53,[[["elapsed",3]],["networkerror",3]]],[11,"from","network::peer_manager","",8,[[["error",3]]]],[11,"from","","",8,[[["error",3]]]],[11,"from","","",8,[[["canceled",3]]]],[11,"from","","",8,[[["error",4]]]],[11,"from","","",8,[[["senderror",3]]]],[11,"from","network::protocols::rpc::error","",30,[[["error",3]]]],[11,"from","","",30,[[["error",3]]]],[11,"from","","",30,[[["error",4]]]],[11,"from","","",30,[[["senderror",3]]]],[11,"from","","",30,[[["peermanagererror",4]]]],[11,"from","","",30,[[["canceled",3]]]],[11,"from","","",30,[[["elapsed",3]],["rpcerror",4]]],[11,"from","network::protocols::wire::handshake::v1","",62,[[]]],[11,"clone","network::connectivity_manager","",1,[[],["discoverysource",4]]],[11,"clone","network::error","",4,[[],["networkerrorkind",4]]],[11,"clone","network::peer_manager","",14,[[],["peermanagerrequestsender",3]]],[11,"clone","","",15,[[],["connectionrequestsender",3]]],[11,"clone","network::protocols::direct_send","",18,[[],["directsendrequest",4]]],[11,"clone","","",19,[[],["directsendnotification",4]]],[11,"clone","","",17,[[],["message",3]]],[11,"clone","network::protocols::network::dummy","",22,[[],["dummymsg",3]]],[11,"clone","","",24,[[],["dummynetworksender",3]]],[11,"clone","network::protocols::network","",26,[[],["networksender",3]]],[11,"clone","network::protocols::discovery","",32,[[],["discoverynetworksender",3]]],[11,"clone","","",54,[[],["discoverymsg",3]]],[11,"clone","","",55,[[],["note",3]]],[11,"clone","","",56,[[],["peerinfo",3]]],[11,"clone","","",57,[[],["peerinfohasher",3]]],[11,"clone","","",58,[[],["fullnodeinfo",3]]],[11,"clone","","",59,[[],["fullnodeinfohasher",3]]],[11,"clone","network::protocols::health_checker","",35,[[],["healthcheckernetworksender",3]]],[11,"clone","","",34,[[],["healthcheckermsg",4]]],[11,"clone","","",60,[[],["ping",3]]],[11,"clone","","",61,[[],["pong",3]]],[11,"clone","network::protocols::wire::handshake::v1","",38,[[],["protocolid",4]]],[11,"clone","","",62,[[],["supportedprotocols",3]]],[11,"clone","","",37,[[],["handshakemsg",3]]],[11,"clone","","",39,[[],["messagingprotocolversion",4]]],[11,"clone","network::protocols::wire::messaging::v1","",44,[[],["networkmessage",4]]],[11,"clone","","",45,[[],["errorcode",4]]],[11,"clone","","",40,[[],["nonce",3]]],[11,"clone","","",41,[[],["rpcrequest",3]]],[11,"clone","","",42,[[],["rpcresponse",3]]],[11,"clone","","",43,[[],["directsendmsg",3]]],[11,"default","network::protocols::discovery","",57,[[]]],[11,"default","","",59,[[]]],[11,"default","network::protocols::wire::handshake::v1","",62,[[],["supportedprotocols",3]]],[11,"default","","",37,[[],["handshakemsg",3]]],[11,"default","network::noise::handshake","",50,[[],["antireplaytimestamps",3]]],[11,"cmp","network::connectivity_manager","",1,[[["discoverysource",4]],["ordering",4]]],[11,"cmp","network::protocols::wire::handshake::v1","",39,[[["messagingprotocolversion",4]],["ordering",4]]],[11,"eq","network::connectivity_manager","",1,[[["discoverysource",4]]]],[11,"eq","network::error","",4,[[["networkerrorkind",4]]]],[11,"eq","network::peer_manager","",12,[[["connectionnotification",4]]]],[11,"ne","","",12,[[["connectionnotification",4]]]],[11,"eq","network::protocols::direct_send","",18,[[["directsendrequest",4]]]],[11,"ne","","",18,[[["directsendrequest",4]]]],[11,"eq","","",19,[[["directsendnotification",4]]]],[11,"ne","","",19,[[["directsendnotification",4]]]],[11,"eq","","",17,[[["message",3]]]],[11,"ne","","",17,[[["message",3]]]],[11,"eq","network::protocols::network::dummy","",22,[[["dummymsg",3]]]],[11,"ne","","",22,[[["dummymsg",3]]]],[11,"eq","network::protocols::network","",21,[[["event",4]]]],[11,"eq","network::protocols::wire::handshake::v1","",38,[[["protocolid",4]]]],[11,"eq","","",62,[[["supportedprotocols",3]]]],[11,"ne","","",62,[[["supportedprotocols",3]]]],[11,"eq","","",39,[[["messagingprotocolversion",4]]]],[11,"eq","network::protocols::wire::messaging::v1","",44,[[["networkmessage",4]]]],[11,"ne","","",44,[[["networkmessage",4]]]],[11,"eq","","",45,[[["errorcode",4]]]],[11,"ne","","",45,[[["errorcode",4]]]],[11,"eq","","",40,[[["nonce",3]]]],[11,"ne","","",40,[[["nonce",3]]]],[11,"eq","","",41,[[["rpcrequest",3]]]],[11,"ne","","",41,[[["rpcrequest",3]]]],[11,"eq","","",42,[[["rpcresponse",3]]]],[11,"ne","","",42,[[["rpcresponse",3]]]],[11,"eq","","",43,[[["directsendmsg",3]]]],[11,"ne","","",43,[[["directsendmsg",3]]]],[11,"partial_cmp","network::connectivity_manager","",1,[[["discoverysource",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","network::protocols::wire::handshake::v1","",39,[[["messagingprotocolversion",4]],[["option",4],["ordering",4]]]],[11,"fmt","network::common","",0,[[["formatter",3]],["result",6]]],[11,"fmt","network::connectivity_manager","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","network::error","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","network::interface","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","network::peer_manager","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::direct_send","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::network::dummy","",22,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::network","",21,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::rpc::error","",30,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::rpc","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::discovery","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::health_checker","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::wire::handshake::v1","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::wire::messaging::v1","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","network::validator_network::network_builder","",46,[[["formatter",3]],["result",6]]],[11,"fmt","network::noise::stream","",52,[[["formatter",3]],["result",6]]],[11,"fmt","network::error","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","network::peer_manager","",8,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::rpc::error","",30,[[["formatter",3]],["result",6]]],[11,"fmt","network::protocols::wire::handshake::v1","",38,[[["formatter",3]],["result",6]]],[11,"hash","","",38,[[]]],[11,"hash","","",39,[[]]],[11,"try_into","","",62,[[],[["vec",3],["result",6]]]],[11,"source","network::peer_manager","",8,[[],[["error",8],["option",4]]]],[11,"source","network::protocols::rpc::error","",30,[[],[["error",8],["option",4]]]],[11,"write","network::protocols::discovery","",57,[[],["result",6]]],[11,"flush","","",57,[[],["result",6]]],[11,"write","","",59,[[],["result",6]]],[11,"flush","","",59,[[],["result",6]]],[11,"is_terminated","network::protocols::network","",25,[[]]],[11,"poll_next","","",25,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"size_hint","","",25,[[]]],[11,"poll_read","network::noise::stream","",52,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_write","","",52,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_flush","","",52,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"poll_close","","",52,[[["context",3],["pin",3]],[["result",6],["poll",4]]]],[11,"drop","network::protocols::network","",25,[[["pin",3]]]],[11,"serialize","network::protocols::network::dummy","",22,[[],["result",4]]],[11,"serialize","network::protocols::discovery","",54,[[],["result",4]]],[11,"serialize","","",55,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",58,[[],["result",4]]],[11,"serialize","network::protocols::health_checker","",34,[[],["result",4]]],[11,"serialize","","",60,[[],["result",4]]],[11,"serialize","","",61,[[],["result",4]]],[11,"serialize","network::protocols::wire::handshake::v1","",38,[[],["result",4]]],[11,"serialize","","",62,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","","",39,[[],["result",4]]],[11,"serialize","network::protocols::wire::messaging::v1","",44,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","","",41,[[],["result",4]]],[11,"serialize","","",42,[[],["result",4]]],[11,"serialize","","",43,[[],["result",4]]],[11,"deserialize","network::protocols::network::dummy","",22,[[],["result",4]]],[11,"deserialize","network::protocols::discovery","",54,[[],["result",4]]],[11,"deserialize","","",55,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",58,[[],["result",4]]],[11,"deserialize","network::protocols::health_checker","",34,[[],["result",4]]],[11,"deserialize","","",60,[[],["result",4]]],[11,"deserialize","","",61,[[],["result",4]]],[11,"deserialize","network::protocols::wire::handshake::v1","",38,[[],["result",4]]],[11,"deserialize","","",62,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","","",39,[[],["result",4]]],[11,"deserialize","network::protocols::wire::messaging::v1","",44,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",40,[[],["result",4]]],[11,"deserialize","","",41,[[],["result",4]]],[11,"deserialize","","",42,[[],["result",4]]],[11,"deserialize","","",43,[[],["result",4]]],[11,"hash","network::protocols::discovery","",56,[[],["hashvalue",3]]],[11,"hash","","",58,[[],["hashvalue",3]]],[11,"seed","","",57,[[]]],[11,"update","","",57,[[]]],[11,"finish","","",57,[[],["hashvalue",3]]],[11,"seed","","",59,[[]]],[11,"update","","",59,[[]]],[11,"finish","","",59,[[],["hashvalue",3]]]],"p":[[3,"NegotiatedSubstream"],[4,"DiscoverySource"],[4,"ConnectivityRequest"],[3,"ConnectivityManager"],[4,"NetworkErrorKind"],[4,"NetworkRequest"],[4,"NetworkNotification"],[3,"NetworkProvider"],[4,"PeerManagerError"],[4,"PeerManagerRequest"],[4,"PeerManagerNotification"],[4,"ConnectionRequest"],[4,"ConnectionNotification"],[4,"TransportNotification"],[3,"PeerManagerRequestSender"],[3,"ConnectionRequestSender"],[3,"PeerManager"],[3,"Message"],[4,"DirectSendRequest"],[4,"DirectSendNotification"],[3,"DirectSend"],[4,"Event"],[3,"DummyMsg"],[3,"DummyNetwork"],[3,"DummyNetworkSender"],[3,"NetworkEvents"],[3,"NetworkSender"],[3,"InboundRpcRequest"],[3,"OutboundRpcRequest"],[4,"RpcNotification"],[4,"RpcError"],[3,"Rpc"],[3,"DiscoveryNetworkSender"],[3,"Discovery"],[4,"HealthCheckerMsg"],[3,"HealthCheckerNetworkSender"],[3,"HealthChecker"],[3,"HandshakeMsg"],[4,"ProtocolId"],[4,"MessagingProtocolVersion"],[3,"Nonce"],[3,"RpcRequest"],[3,"RpcResponse"],[3,"DirectSendMsg"],[4,"NetworkMessage"],[4,"ErrorCode"],[4,"AuthenticationMode"],[3,"NetworkBuilder"],[4,"HandshakeAuthMode"],[13,"Mutual"],[3,"AntiReplayTimestamps"],[3,"NoiseUpgrader"],[3,"NoiseStream"],[3,"NetworkError"],[3,"DiscoveryMsg"],[3,"Note"],[3,"PeerInfo"],[3,"PeerInfoHasher"],[3,"FullNodeInfo"],[3,"FullNodeInfoHasher"],[3,"Ping"],[3,"Pong"],[3,"SupportedProtocols"]]},\
"network_simple_onchain_discovery":{"doc":"","i":[[3,"ConfigurationChangeListener","network_simple_onchain_discovery","Listener which converts published updates from the…",null,null],[5,"gen_simple_discovery_reconfig_subscription","","",null,[[]]],[7,"EVENT_PROCESSING_LOOP_IDLE_DURATION_S","","Histogram of idle time of spent in event processing loop",null,null],[7,"EVENT_PROCESSING_LOOP_BUSY_DURATION_S","","Histogram of busy time of spent in event processing loop",null,null],[11,"new","","Creates a new ConfigurationListener",0,[[["sender",3],["connectivityrequest",4],["roletype",4]]]],[11,"start","","Starts the listener to wait on reconfiguration events.…",0,[[["receiver",3],["onchainconfigpayload",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]]],"p":[[3,"ConfigurationChangeListener"]]},\
"num_variants":{"doc":"Add an associated constant to an enum describing the…","i":[[24,"NumVariants","num_variants","Derives an associated constant with the number of variants…",null,null]],"p":[]},\
"onchain_discovery":{"doc":"Protocol for discovering validator + validator full node…","i":[[0,"builder","onchain_discovery","",null,null],[3,"OnchainDiscoveryBuilder","onchain_discovery::builder","",null,null],[11,"build","","Setup OnchainDiscovery to work with the provided tx and rx…",0,[[["arc",3],["onchaindiscoverynetworksender",3],["handle",3],["waypoint",3],["sender",3],["connectivityrequest",4],["dbreader",8],["networkcontext",3],["onchaindiscoverynetworkevents",3]]]],[11,"start","","Starts the provided onchain_discovery_service and…",0,[[["handle",3]]]],[0,"client","onchain_discovery","",null,null],[3,"OnchainDiscovery","onchain_discovery::client","Actor for querying various sources (remote peers, local…",null,null],[11,"new","","",1,[[["arc",3],["onchaindiscoverynetworksender",3],["receiver",6],["waypoint",3],["sender",3],["connectivityrequest",4],["dbreader",8],["duration",3],["networkcontext",3]]]],[11,"start","","",1,[[]]],[0,"network_interface","onchain_discovery","Protobuf based interface between OnchainDiscovery and…",null,null],[3,"OnchainDiscoveryNetworkEvents","onchain_discovery::network_interface","The interface from Network to OnchainDiscovery layer.",null,null],[12,"peer_mgr_notifs_rx","","",2,null],[12,"connection_notifs_rx","","",2,null],[3,"OnchainDiscoveryNetworkSender","","The interface from OnchainDiscovery to Networking layer.",null,null],[5,"add_to_network","","Construct OnchainDiscoveryNetworkSender/Events and…",null,[[["networkbuilder",3]]]],[11,"new","","",2,[[["receiver",3],["peerid",3],["receiver",3],["peermanagernotification",4],["connectionnotification",4]]]],[11,"new","","",3,[[["peermanagerrequestsender",3],["connectionrequestsender",3]]]],[11,"query_discovery_set","","",3,[[["peerid",3],["querydiscoverysetrequest",3],["duration",3]]]],[0,"service","onchain_discovery","",null,null],[3,"OnchainDiscoveryService","onchain_discovery::service","A LibraNet service for handling…",null,null],[11,"new","","",4,[[["handle",3],["arc",3],["receiver",3],["peermanagernotification",4],["dbreader",8]]]],[11,"start","","",4,[[]]],[0,"types","onchain_discovery","",null,null],[3,"QueryDiscoverySetRequest","onchain_discovery::types","A request for another peer\'s latest validator set and a…",null,null],[12,"known_version","","",5,null],[3,"QueryDiscoverySetResponse","","A response to a [`QueryDiscoverySetRequest`]. The server…",null,null],[12,"latest_li","","",6,null],[12,"epoch_change_proof","","",6,null],[12,"accumulator_proof","","",6,null],[12,"account_state","","",6,null],[3,"DiscoverySetInternal","","An internal representation of the DiscoverySet.",null,null],[12,"0","","",7,null],[3,"DiscoveryInfoInternal","","",null,null],[12,"0","","",8,null],[12,"1","","",8,null],[4,"OnchainDiscoveryMsg","","OnchainDiscovery LibraNet message types. These are sent…",null,null],[13,"QueryDiscoverySetRequest","","",9,null],[13,"QueryDiscoverySetResponse","","",9,null],[11,"verify_and_ratchet","","Verify and ratchet the given trusted state, returning the…",6,[[["querydiscoverysetrequest",3],["trustedstate",3]],["result",6]]],[11,"from_validator_set","","",7,[[["roletype",4],["validatorset",3]]]],[11,"empty","","",7,[[]]],[11,"is_empty","","",7,[[]]],[11,"len","","",7,[[]]],[11,"try_from_validator_info","","",8,[[["roletype",4],["validatorinfo",3]],["result",6]]],[11,"from","onchain_discovery::builder","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","onchain_discovery::client","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","onchain_discovery::network_interface","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","onchain_discovery::service","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","onchain_discovery::types","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"test_only_hash","","",6,[[],["hashvalue",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"equivalent","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"test_only_hash","","",9,[[],["hashvalue",3]]],[11,"vzip","","",9,[[]]],[11,"clone","onchain_discovery::network_interface","",3,[[],["onchaindiscoverynetworksender",3]]],[11,"clone","onchain_discovery::types","",9,[[],["onchaindiscoverymsg",4]]],[11,"clone","","",5,[[],["querydiscoverysetrequest",3]]],[11,"clone","","",6,[[],["querydiscoverysetresponse",3]]],[11,"clone","","",7,[[],["discoverysetinternal",3]]],[11,"clone","","",8,[[],["discoveryinfointernal",3]]],[11,"eq","","",7,[[["discoverysetinternal",3]]]],[11,"ne","","",7,[[["discoverysetinternal",3]]]],[11,"eq","","",8,[[["discoveryinfointernal",3]]]],[11,"ne","","",8,[[["discoveryinfointernal",3]]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"deserialize","","",9,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",6,[[],["result",4]]],[11,"serialize","","",9,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",6,[[],["result",4]]]],"p":[[3,"OnchainDiscoveryBuilder"],[3,"OnchainDiscovery"],[3,"OnchainDiscoveryNetworkEvents"],[3,"OnchainDiscoveryNetworkSender"],[3,"OnchainDiscoveryService"],[3,"QueryDiscoverySetRequest"],[3,"QueryDiscoverySetResponse"],[3,"DiscoverySetInternal"],[3,"DiscoveryInfoInternal"],[4,"OnchainDiscoveryMsg"]]},\
"option_future":{"doc":"","i":[[3,"OptionFuture","option_future","Effectively a size=1 future queue, or a slot with…",null,null],[11,"new","","",0,[[["option",4]]]],[11,"or_insert_with","","If the slot is empty, call the given closure to generate a…",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"try_poll","","",0,[[["pin",3],["context",3]],["poll",4]]],[11,"poll","","",0,[[["context",3],["pin",3]],["poll",4]]],[11,"is_terminated","","",0,[[]]]],"p":[[3,"OptionFuture"]]},\
"resource_viewer":{"doc":"","i":[[3,"AnnotatedAccountStateBlob","resource_viewer","",null,null],[3,"AnnotatedMoveStruct","","",null,null],[3,"MoveValueAnnotator","","",null,null],[3,"NullStateView","","",null,null],[4,"AnnotatedMoveValue","","AnnotatedMoveValue is a fully expanded version of on chain…",null,null],[13,"U8","","",0,null],[13,"U64","","",0,null],[13,"U128","","",0,null],[13,"Bool","","",0,null],[13,"Address","","",0,null],[13,"Vector","","",0,null],[13,"Bytes","","",0,null],[13,"Struct","","",0,null],[5,"update_mapping","","",null,[[]]],[11,"new","","",1,[[["stateview",8]]]],[11,"view_access_path","","",1,[[["accesspath",3]],[["annotatedmovestruct",3],["result",6]]]],[11,"view_contract_event","","",1,[[["contractevent",4]],[["result",6],["annotatedmovevalue",4]]]],[11,"view_account_state","","",1,[[["accountstate",3]],[["annotatedaccountstateblob",3],["result",6]]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"clear","","",4,[[]]],[11,"initialize","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"default","","",4,[[],["nullstateview",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"get","","",4,[[["accesspath",3]],[["result",6],["option",4]]]],[11,"multi_get","","",4,[[],[["result",6],["vec",3]]]],[11,"is_genesis","","",4,[[]]]],"p":[[4,"AnnotatedMoveValue"],[3,"MoveValueAnnotator"],[3,"AnnotatedAccountStateBlob"],[3,"AnnotatedMoveStruct"],[3,"NullStateView"]]},\
"safety_rules":{"doc":"","i":[[3,"ConsensusState","safety_rules","Public representation of the internal state of SafetyRules…",null,null],[3,"PersistentSafetyStorage","","SafetyRules needs an abstract storage interface to act as…",null,null],[3,"Process","","",null,null],[3,"SafetyRules","","SafetyRules is responsible for the safety of the…",null,null],[3,"SafetyRulesManager","","",null,null],[4,"Error","","Different reasons for proposal rejection",null,null],[13,"BadTimeoutLastVotedRound","","",0,null],[13,"BadTimeoutPreferredRound","","",0,null],[13,"IncorrectEpoch","","",0,null],[13,"InternalError","","",0,null],[12,"error","safety_rules::Error","",1,null],[13,"InvalidProposal","safety_rules","",0,null],[13,"InvalidAccumulatorExtension","","",0,null],[12,"error","safety_rules::Error","",2,null],[13,"InvalidLedgerInfo","safety_rules","",0,null],[13,"InvalidQuorumCertificate","","",0,null],[13,"NotInitialized","","",0,null],[13,"ProposalRoundLowerThenPreferredBlock","","This proposal\'s round is less than round of preferred…",0,null],[12,"preferred_round","safety_rules::Error","",3,null],[13,"OldProposal","safety_rules","This proposal is too old - return last_voted_round",0,null],[12,"last_voted_round","safety_rules::Error","",4,null],[12,"proposal_round","","",4,null],[13,"SerializationError","safety_rules","",0,null],[13,"WaypointMismatch","","",0,null],[11,"new","","",5,[[["round",6],["waypoint",3]]]],[11,"epoch","","Returns the current epoch",5,[[]]],[11,"last_voted_round","","Returns the last round that was voted on",5,[[],["round",6]]],[11,"preferred_round","","A \\\"preferred block\\\" is the two-chain head with the highest…",5,[[],["round",6]]],[11,"waypoint","","Last known checkpoint this should map to a LedgerInfo that…",5,[[],["waypoint",3]]],[11,"in_validator_set","","Indicating whether the validator is validator set",5,[[]]],[11,"in_memory","","",6,[[["ed25519privatekey",3]]]],[11,"initialize","","Use this to instantiate a PersistentStorage for a new data…",6,[[["storage",4],["ed25519privatekey",3],["waypoint",3]]]],[11,"new","","Use this to instantiate a PersistentStorage with an…",6,[[["storage",4]]]],[11,"consensus_key_for_version","","",6,[[["ed25519publickey",3]],[["result",6],["ed25519privatekey",3]]]],[11,"epoch","","",6,[[],["result",6]]],[11,"set_epoch","","",6,[[],["result",6]]],[11,"last_voted_round","","",6,[[],[["round",6],["result",6]]]],[11,"set_last_voted_round","","",6,[[["round",6]],["result",6]]],[11,"preferred_round","","",6,[[],[["round",6],["result",6]]]],[11,"set_preferred_round","","",6,[[["round",6]],["result",6]]],[11,"waypoint","","",6,[[],[["waypoint",3],["result",6]]]],[11,"set_waypoint","","",6,[[["waypoint",3]],["result",6]]],[11,"internal_store","","",6,[[],["storage",4]]],[11,"new","","",7,[[["nodeconfig",3]]]],[11,"start","","",7,[[]]],[11,"new","","Constructs a new instance of SafetyRules with the given…",8,[[["author",6],["persistentsafetystorage",3]]]],[11,"construct_ledger_info","","Produces a LedgerInfo that either commits a block based…",8,[[["block",3]],["ledgerinfo",3]]],[11,"new","","",9,[[["nodeconfig",3]]]],[11,"new_local","","",9,[[["author",6],["persistentsafetystorage",3]]]],[11,"new_process","","",9,[[["socketaddr",4]]]],[11,"new_serializer","","",9,[[["author",6],["persistentsafetystorage",3]]]],[11,"new_spawned_process","","",9,[[["nodeconfig",3]]]],[11,"new_thread","","",9,[[["author",6],["persistentsafetystorage",3]]]],[11,"client","","",9,[[],[["tsafetyrules",8],["box",3]]]],[0,"process_client_wrapper","","",null,null],[3,"ProcessClientWrapper","safety_rules::process_client_wrapper","This container exists only so that we can kill the spawned…",null,null],[11,"new","","",10,[[["securebackend",4]]]],[11,"signer","","",10,[[],["validatorsigner",3]]],[0,"test_utils","safety_rules","",null,null],[5,"empty_proof","safety_rules::test_utils","",null,[[],["proof",6]]],[5,"make_proposal_with_qc_and_proof","","",null,[[["proof",6],["payload",6],["round",6],["validatorsigner",3],["quorumcert",3]],["voteproposal",3]]],[5,"make_proposal_with_qc","","",null,[[["validatorsigner",3],["round",6],["quorumcert",3]],["voteproposal",3]]],[5,"make_proposal_with_parent_and_overrides","","",null,[[["round",6],["validatorsigner",3],["epochstate",3],["option",4],["payload",6],["voteproposal",3],["option",4],["option",4]],["voteproposal",3]]],[5,"make_proposal_with_parent","","",null,[[["payload",6],["round",6],["voteproposal",3],["option",4],["validatorsigner",3]],["voteproposal",3]]],[5,"validator_signers_to_ledger_info","","",null,[[],["ledgerinfo",3]]],[5,"validator_signers_to_waypoints","","",null,[[],["waypoint",3]]],[5,"test_storage","","",null,[[["validatorsigner",3]],["persistentsafetystorage",3]]],[6,"Proof","","",null,null],[7,"COUNTERS","safety_rules","",null,null],[8,"TSafetyRules","","Interface for SafetyRules",null,null],[10,"consensus_state","","Provides the internal state of SafetyRules for monitoring…",11,[[],[["result",4],["error",4],["consensusstate",3]]]],[10,"initialize","","Initialize SafetyRules using an Epoch ending LedgerInfo,…",11,[[["epochchangeproof",3]],[["result",4],["error",4]]]],[10,"update","","Learn about a new quorum certificate. This can lead to…",11,[[["quorumcert",3]],[["result",4],["error",4]]]],[10,"construct_and_sign_vote","","Attempts to vote for a given proposal following the voting…",11,[[["voteproposal",3]],[["result",4],["vote",3],["error",4]]]],[10,"sign_proposal","","As the holder of the private key, SafetyRules also signs…",11,[[["blockdata",3]],[["error",4],["result",4],["block",3]]]],[10,"sign_timeout","","As the holder of the private key, SafetyRules also signs…",11,[[["timeout",3]],[["result",4],["ed25519signature",3],["error",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"initialize","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","safety_rules::process_client_wrapper","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"consensus_state","safety_rules","",8,[[],[["result",4],["error",4],["consensusstate",3]]]],[11,"initialize","","",8,[[["epochchangeproof",3]],[["result",4],["error",4]]]],[11,"update","","Verify the QC is correct and up to date, if it is either…",8,[[["quorumcert",3]],[["result",4],["error",4]]]],[11,"construct_and_sign_vote","","@TODO verify signature on vote proposal @TODO verify QC…",8,[[["voteproposal",3]],[["result",4],["vote",3],["error",4]]]],[11,"sign_proposal","","",8,[[["blockdata",3]],[["error",4],["result",4],["block",3]]]],[11,"sign_timeout","","Only sign the timeout if it is greater than or equal to…",8,[[["timeout",3]],[["result",4],["ed25519signature",3],["error",4]]]],[11,"consensus_state","safety_rules::process_client_wrapper","",10,[[],[["result",4],["error",4],["consensusstate",3]]]],[11,"initialize","","",10,[[["epochchangeproof",3]],[["result",4],["error",4]]]],[11,"update","","",10,[[["quorumcert",3]],[["result",4],["error",4]]]],[11,"construct_and_sign_vote","","",10,[[["voteproposal",3]],[["result",4],["vote",3],["error",4]]]],[11,"sign_proposal","","",10,[[["blockdata",3]],[["error",4],["result",4],["block",3]]]],[11,"sign_timeout","","",10,[[["timeout",3]],[["result",4],["ed25519signature",3],["error",4]]]],[11,"from","safety_rules","",0,[[["error",3]]]],[11,"from","","",0,[[["error",4]]]],[11,"from","","",0,[[["error",4]]]],[11,"clone","","",5,[[],["consensusstate",3]]],[11,"default","","",5,[[],["consensusstate",3]]],[11,"eq","","",5,[[["consensusstate",3]]]],[11,"ne","","",5,[[["consensusstate",3]]]],[11,"eq","","",0,[[["error",4]]]],[11,"ne","","",0,[[["error",4]]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]]],"p":[[4,"Error"],[13,"InternalError"],[13,"InvalidAccumulatorExtension"],[13,"ProposalRoundLowerThenPreferredBlock"],[13,"OldProposal"],[3,"ConsensusState"],[3,"PersistentSafetyStorage"],[3,"Process"],[3,"SafetyRules"],[3,"SafetyRulesManager"],[3,"ProcessClientWrapper"],[8,"TSafetyRules"]]},\
"schemadb":{"doc":"This library implements a schematized DB on top of…","i":[[3,"SchemaBatch","schemadb","`SchemaBatch` holds a collection of updates that can be…",null,null],[3,"SchemaIterator","","DB Iterator parameterized on [`Schema`] that seeks with…",null,null],[3,"DB","","This DB is a schematized RocksDB wrapper where all data…",null,null],[0,"schema","","This module provides traits that define the behavior of a…",null,null],[5,"assert_encode_decode","schemadb::schema","Helper used in tests to assert a (key, value) pair for a…",null,[[]]],[8,"KeyCodec","","This trait defines a type that can serve as a…",null,null],[10,"encode_key","","Converts `self` to bytes to be stored in DB.",0,[[],[["result",6],["vec",3]]]],[10,"decode_key","","Converts bytes fetched from DB to `Self`.",0,[[],["result",6]]],[8,"ValueCodec","","This trait defines a type that can serve as a…",null,null],[10,"encode_value","","Converts `self` to bytes to be stored in DB.",1,[[],[["result",6],["vec",3]]]],[10,"decode_value","","Converts bytes fetched from DB to `Self`.",1,[[],["result",6]]],[8,"SeekKeyCodec","","This defines a type that can be used to seek a…",null,null],[10,"encode_seek_key","","Converts `self` to bytes which is used to seek the…",2,[[],[["result",6],["vec",3]]]],[8,"Schema","","This trait defines a schema: an association of a column…",null,null],[18,"COLUMN_FAMILY_NAME","","The column family name associated with this struct. Note:…",3,null],[16,"Key","","Type of the key.",3,null],[16,"Value","","Type of the value.",3,null],[6,"ReadOptions","schemadb","Type alias to `rocksdb::ReadOptions`. See `rocksdb doc`",null,null],[6,"ColumnFamilyName","","Type alias to improve readability.",null,null],[17,"DEFAULT_CF_NAME","","Name for the `default` column family that\'s always open by…",null,null],[11,"new","","Creates an empty batch.",4,[[]]],[11,"put","","Adds an insert/update operation to the batch.",4,[[],["result",6]]],[11,"delete","","Adds a delete operation to the batch.",4,[[],["result",6]]],[11,"seek_to_first","","Seeks to the first key.",5,[[]]],[11,"seek_to_last","","Seeks to the last key.",5,[[]]],[11,"seek","","Seeks to the first key whose binary representation is…",5,[[],["result",6]]],[11,"seek_for_prev","","Seeks to the last key whose binary representation is less…",5,[[],["result",6]]],[11,"open","","Create db with all the column families provided if it…",6,[[["vec",3],["columnfamilyname",6]],["result",6]]],[11,"open_readonly","","Open db in readonly mode",6,[[["vec",3],["columnfamilyname",6]],["result",6]]],[11,"get","","Reads single record by key.",6,[[],[["option",4],["result",6]]]],[11,"put","","Writes single record.",6,[[],["result",6]]],[11,"range_delete","","Delete all keys in range [begin, end).",6,[[],["result",6]]],[11,"iter","","Returns a [`SchemaIterator`] on a certain schema.",6,[[["readoptions",6]],[["result",6],["schemaiterator",3]]]],[11,"write_schemas","","Writes a group of records wrapped in a [`SchemaBatch`].",6,[[["schemabatch",3]],["result",6]]],[11,"get_approximate_sizes_cf","","Returns the approximate size of each non-empty column…",6,[[],[["result",6],["btreemap",3]]]],[11,"flush_all","","Flushes all memtable data. This is only used for testing…",6,[[],["result",6]]],[14,"define_schema","","Macro for defining a SchemaDB schema.",null,null],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"next","","",5,[[],["option",4]]],[11,"default","","",4,[[],["schemabatch",3]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]]],"p":[[8,"KeyCodec"],[8,"ValueCodec"],[8,"SeekKeyCodec"],[8,"Schema"],[3,"SchemaBatch"],[3,"SchemaIterator"],[3,"DB"]]},\
"scratchpad":{"doc":"This crate provides in-memory representation of Libra core…","i":[[3,"SparseMerkleTree","scratchpad","The Sparse Merkle Tree implementation.",null,null],[4,"AccountStatus","","`AccountStatus` describes the result of querying an…",null,null],[13,"ExistsInScratchPad","","The account exists in the tree, therefore we can give its…",0,null],[13,"ExistsInDB","","The account does not exist in the tree, but exists in DB.…",0,null],[13,"DoesNotExist","","The account does not exist in either the tree or DB. This…",0,null],[13,"Unknown","","We do not know if this account exists or not and need to…",0,null],[11,"new","","Constructs a Sparse Merkle Tree with a root hash. This is…",1,[[["hashvalue",3]]]],[11,"update","","Constructs a new Sparse Merkle Tree as if we are updating…",1,[[["vec",3]],[["result",4],["updateerror",4]]]],[11,"get","","Queries a `key` in this `SparseMerkleTree`.",1,[[["hashvalue",3]],["accountstatus",4]]],[11,"root_hash","","Returns the root hash of this tree.",1,[[],["hashvalue",3]]],[11,"prune","","Prunes a tree by replacing every node reachable from root…",1,[[]]],[8,"ProofRead","","A type that implements `ProofRead` can provide proof for…",null,null],[10,"get_proof","","Gets verified proof for this key in persistent storage.",2,[[["hashvalue",3]],[["sparsemerkleproof",3],["option",4]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"clear","","",1,[[]]],[11,"initialize","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"default","","",1,[[]]],[11,"eq","","",0,[[["accountstatus",4]]]],[11,"ne","","",0,[[["accountstatus",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]]],"p":[[4,"AccountStatus"],[3,"SparseMerkleTree"],[8,"ProofRead"]]},\
"serializer_tests":{"doc":"","i":[],"p":[]},\
"socket_bench_server":{"doc":"","i":[[3,"Args","socket_bench_server","",null,null],[12,"tcp_addr","","",0,null],[12,"tcp_noise_addr","","",0,null],[12,"msg_lens","","",0,null],[5,"build_memsocket_noise_transport","","Build a MemorySocket + Noise transport",null,[[]]],[5,"build_tcp_noise_transport","","Build a Tcp + Noise transport",null,[[]]],[5,"server_stream_handler","","Server side handler for send throughput benchmark when the…",null,[[]]],[5,"start_stream_server","","",null,[[["handle",3],["networkaddress",3]],["networkaddress",3]]],[11,"from_env","","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"Args"]]},\
"spec_lang":{"doc":"","i":[[5,"run_spec_lang_compiler","spec_lang","",null,[[["string",3],["vec",3],["option",4]],[["globalenv",3],["result",6]]]],[0,"ast","","Contains AST definitions for the specification language…",null,null],[3,"SpecVarDecl","spec_lang::ast","Declarations",null,null],[12,"loc","","",0,null],[12,"name","","",0,null],[12,"type_params","","",0,null],[12,"type_","","",0,null],[3,"SpecFunDecl","","",null,null],[12,"loc","","",1,null],[12,"name","","",1,null],[12,"type_params","","",1,null],[12,"params","","",1,null],[12,"result_type","","",1,null],[12,"used_spec_vars","","",1,null],[12,"is_pure","","",1,null],[12,"body","","",1,null],[3,"Condition","","",null,null],[12,"loc","","",2,null],[12,"kind","","",2,null],[12,"exp","","",2,null],[3,"Spec","","Specification and properties associated with a language…",null,null],[12,"conditions","","",3,null],[12,"properties","","",3,null],[12,"on_impl","","",3,null],[3,"SpecBlockInfo","","Information about a specification block in the source.…",null,null],[12,"loc","","The location of the entire spec block.",4,null],[12,"target","","The target of the spec block.",4,null],[12,"member_locs","","The locations of all members of the spec block.",4,null],[3,"LocalVarDecl","","",null,null],[12,"id","","",5,null],[12,"name","","",5,null],[12,"binding","","",5,null],[3,"ModuleName","","Names Represents a module name, consisting of address and…",null,null],[3,"ModuleNameDisplay","","A helper to support module names in formatting.",null,null],[3,"QualifiedSymbol","","",null,null],[12,"module_name","","",6,null],[12,"symbol","","",6,null],[3,"QualifiedSymbolDisplay","","A helper to support qualified symbols in formatting.",null,null],[4,"ConditionKind","","Conditions",null,null],[13,"Assert","","",7,null],[13,"Assume","","",7,null],[13,"Decreases","","",7,null],[13,"AbortsIf","","",7,null],[13,"SucceedsIf","","",7,null],[13,"Ensures","","",7,null],[13,"Requires","","",7,null],[13,"RequiresModule","","",7,null],[13,"Invariant","","",7,null],[13,"InvariantModule","","",7,null],[13,"InvariantUpdate","","",7,null],[13,"VarUpdate","","",7,null],[13,"VarPack","","",7,null],[13,"VarUnpack","","",7,null],[4,"SpecBlockTarget","","Describes the target of a spec block.",null,null],[13,"Module","","",8,null],[13,"Struct","","",8,null],[13,"Function","","",8,null],[13,"FunctionCode","","",8,null],[13,"Schema","","",8,null],[4,"Exp","","Expressions",null,null],[13,"Error","","",9,null],[13,"Value","","",9,null],[13,"LocalVar","","",9,null],[13,"SpecVar","","",9,null],[13,"Call","","",9,null],[13,"Invoke","","",9,null],[13,"Lambda","","",9,null],[13,"Block","","",9,null],[13,"IfElse","","",9,null],[4,"Operation","","",null,null],[13,"Function","","",10,null],[13,"Pack","","",10,null],[13,"Tuple","","",10,null],[13,"Select","","",10,null],[13,"Local","","",10,null],[13,"Result","","",10,null],[13,"Index","","",10,null],[13,"Slice","","",10,null],[13,"Range","","",10,null],[13,"Add","","",10,null],[13,"Sub","","",10,null],[13,"Mul","","",10,null],[13,"Mod","","",10,null],[13,"Div","","",10,null],[13,"BitOr","","",10,null],[13,"BitAnd","","",10,null],[13,"Xor","","",10,null],[13,"Shl","","",10,null],[13,"Shr","","",10,null],[13,"Implies","","",10,null],[13,"And","","",10,null],[13,"Or","","",10,null],[13,"Eq","","",10,null],[13,"Neq","","",10,null],[13,"Lt","","",10,null],[13,"Gt","","",10,null],[13,"Le","","",10,null],[13,"Ge","","",10,null],[13,"Not","","",10,null],[13,"Len","","",10,null],[13,"All","","",10,null],[13,"Any","","",10,null],[13,"TypeValue","","",10,null],[13,"TypeDomain","","",10,null],[13,"Global","","",10,null],[13,"Exists","","",10,null],[13,"Old","","",10,null],[13,"Trace","","",10,null],[13,"Update","","",10,null],[13,"Sender","","",10,null],[13,"MaxU8","","",10,null],[13,"MaxU64","","",10,null],[13,"MaxU128","","",10,null],[4,"Value","","",null,null],[13,"Address","","",11,null],[13,"Number","","",11,null],[13,"Bool","","",11,null],[13,"ByteArray","","",11,null],[6,"PropertyBag","","Specifications A set of properties stemming from pragmas.",null,null],[11,"get_spec_var_target","","If this is an assignment to a spec var, return it.",7,[[],["option",4]]],[11,"allows_old","","Returns true of this condition allows the `old(..)`…",7,[[]]],[11,"allowed_on_public_fun_decl","","Returns true if this condition is allowed on a public…",7,[[]]],[11,"allowed_on_private_fun_decl","","Returns true if this condition is allowed on a private…",7,[[]]],[11,"allowed_on_fun_impl","","Returns true if this condition is allowed in a function…",7,[[]]],[11,"allowed_on_struct","","Returns true if this condition is allowed on a struct.",7,[[]]],[11,"allowed_on_module","","Returns true if this condition is allowed on a module.",7,[[]]],[11,"has_conditions","","",3,[[]]],[11,"filter","","",3,[[]]],[11,"filter_kind","","",3,[[["conditionkind",4]]]],[11,"any","","",3,[[]]],[11,"any_kind","","",3,[[["conditionkind",4]]]],[11,"node_id","","",9,[[],["nodeid",3]]],[11,"visit","","Visits expression, calling visitor on each sub-expression,…",9,[[]]],[11,"is_pure","","Determines whether this operation is pure (does not depend…",10,[[]]],[11,"is_pure","","Determines whether this expression is pure (does not…",9,[[]]],[11,"new","","",12,[[["biguint",3],["symbol",3]],["modulename",3]]],[11,"from_str","","",12,[[["symbol",3]],["modulename",3]]],[11,"addr","","",12,[[],["biguint",3]]],[11,"name","","",12,[[],["symbol",3]]],[11,"display","","Creates a value implementing the Display trait which shows…",12,[[["symbolpool",3]],["modulenamedisplay",3]]],[11,"display_full","","Creates a value implementing the Display trait which shows…",12,[[["symbolpool",3]],["modulenamedisplay",3]]],[11,"display","","Creates a value implementing the Display trait which shows…",6,[[["symbolpool",3]],["qualifiedsymboldisplay",3]]],[11,"display_simple","","Creates a value implementing the Display trait which shows…",6,[[["symbolpool",3]],["qualifiedsymboldisplay",3]]],[11,"display_full","","Creates a value implementing the Display trait which shows…",6,[[["symbolpool",3]],["qualifiedsymboldisplay",3]]],[0,"code_writer","spec_lang","",null,null],[3,"CodeWriter","spec_lang::code_writer","A helper to emit code. Supports indentation and maintains…",null,null],[3,"CodeWriterLabel","","A label which can be created at the code writers current…",null,null],[11,"new","","Creates new code writer, with the given default location.",13,[[["loc",3]],["codewriter",3]]],[11,"create_label","","Creates a label at which code can be inserted later.",13,[[],["codewriterlabel",3]]],[11,"insert_at_label","","Inserts code at the previously created label.",13,[[["codewriterlabel",3]]]],[11,"process_result","","Calls a function to process the code written so far. This…",13,[[["fnmut",8]]]],[11,"set_location","","Sets the current location. This location will be…",13,[[["loc",3]]]],[11,"get_source_location","","Given a byte index in the written output, return the best…",13,[[["byteindex",3]],[["loc",3],["option",4]]]],[11,"get_output_byte_index","","Given line/column location, determine ByteIndex of that…",13,[[["columnindex",3],["lineindex",3]],[["byteindex",3],["option",4]]]],[11,"indent","","Indents any subsequently written output. The current line…",13,[[]]],[11,"unindent","","Undo previously done indentation.",13,[[]]],[11,"emit","","Emit a string. The string will be broken down into lines…",13,[[]]],[11,"emit_line","","Emits a string and then terminates the line.",13,[[]]],[0,"env","spec_lang","Provides an environment -- global state -- for…",null,null],[3,"Loc","spec_lang::env","Locations A location, consisting of a FileId and a span in…",null,null],[3,"ModuleId","","Identifier for a module.",null,null],[3,"StructId","","Identifier for a structure/resource, relative to module.",null,null],[3,"FieldId","","Identifier for a field of a structure, relative to struct.",null,null],[3,"FunId","","Identifier for a Move function, relative to module.",null,null],[3,"SchemaId","","Identifier for a schema.",null,null],[3,"SpecFunId","","Identifier for a specification function, relative to module.",null,null],[3,"SpecVarId","","Identifier for a specification variable, relative to module.",null,null],[3,"NodeId","","Identifier for a node in the AST, relative to a module.…",null,null],[3,"GlobalId","","A global id. Instances of this type represent unique…",null,null],[3,"GlobalEnv","","Global Environment Global environment for a set of modules.",null,null],[3,"ModuleData","","Module Environment Represents data for a module.",null,null],[12,"name","","Module name.",14,null],[12,"id","","Id of this module in the global env.",14,null],[12,"module","","Module byte code.",14,null],[12,"struct_data","","Struct data.",14,null],[12,"struct_idx_to_id","","Mapping from struct definition index to id in above map.",14,null],[12,"function_data","","Function data.",14,null],[12,"function_idx_to_id","","Mapping from function definition index to id in above map.",14,null],[12,"spec_vars","","Specification variables, in SpecVarId order.",14,null],[12,"spec_funs","","Specification functions, in SpecFunId order.",14,null],[12,"module_spec","","Module level specification.",14,null],[12,"source_map","","Module source location information.",14,null],[12,"loc","","The location of this module.",14,null],[12,"loc_map","","A map from node id to associated location.",14,null],[12,"type_map","","A map from node id to associated type.",14,null],[12,"next_free_node_id","","A counter for allocating node ids.",14,null],[12,"instantiation_map","","A map from node id to associated instantiation of type…",14,null],[12,"spec_block_infos","","A list of spec block infos, for documentation generation.",14,null],[3,"ModuleEnv","","Represents a module environment.",null,null],[12,"env","","Reference to the outer env.",15,null],[3,"StructData","","Struct Environment",null,null],[3,"StructEnv","","",null,null],[12,"module_env","","Reference to enclosing module.",16,null],[3,"FieldData","","Field Environment",null,null],[3,"FieldEnv","","",null,null],[12,"struct_env","","Reference to enclosing struct.",17,null],[3,"TypeParameter","","Function Environment Represents a type parameter.",null,null],[12,"0","","",18,null],[12,"1","","",18,null],[3,"Parameter","","Represents a parameter.",null,null],[12,"0","","",19,null],[12,"1","","",19,null],[3,"FunctionData","","",null,null],[3,"FunctionEnv","","",null,null],[12,"module_env","","Reference to enclosing module.",20,null],[4,"TypeConstraint","","",null,null],[13,"None","","",21,null],[13,"Copyable","","",21,null],[13,"Resource","","",21,null],[6,"MoveIrLoc","","Alias for the Loc variant of MoveIR. This uses a `&static…",null,null],[17,"SCRIPT_MODULE_NAME","","Constants A name we use to represent a script as a module.",null,null],[17,"SCRIPT_BYTECODE_FUN_NAME","","Names used in the bytecode/AST to represent the main…",null,null],[17,"VERIFY_PRAGMA","","Pragma indicating whether verification should be performed…",null,null],[17,"INTRINSIC_PRAGMA","","Pragma indicating whether implementation of function…",null,null],[17,"ABORTS_IF_IS_PARTIAL_PRAGMA","","Pragma indicating whether aborts_if specification should…",null,null],[17,"ABORTS_IF_IS_STRICT_PRAGMA","","Pragma indicating whether no explicit aborts_if…",null,null],[17,"REQUIRES_IF_ABORTS","","Pragma indicating that requires are also enforced if the…",null,null],[17,"SMOKE_TEST_PRAGMA","","Pragma indicating that the function will run smoke tests",null,null],[11,"new","","",22,[[["fileid",3],["span",3]],["loc",3]]],[11,"span","","",22,[[],["span",3]]],[11,"file_id","","",22,[[],["fileid",3]]],[11,"at_end","","",22,[[],["loc",3]]],[11,"at_start","","",22,[[],["loc",3]]],[11,"new","","",23,[[["symbol",3]]]],[11,"symbol","","",23,[[],["symbol",3]]],[11,"new","","",24,[[["symbol",3]]]],[11,"symbol","","",24,[[],["symbol",3]]],[11,"new","","",25,[[["symbol",3]]]],[11,"symbol","","",25,[[],["symbol",3]]],[11,"new","","",26,[[["symbol",3]]]],[11,"symbol","","",26,[[],["symbol",3]]],[11,"new","","",27,[[]]],[11,"as_usize","","",27,[[]]],[11,"new","","",28,[[]]],[11,"as_usize","","",28,[[]]],[11,"new","","",29,[[]]],[11,"as_usize","","",29,[[]]],[11,"new","","",30,[[]]],[11,"to_usize","","",30,[[]]],[11,"new","","",31,[[]]],[11,"as_usize","","",31,[[]]],[11,"new","","Creates a new environment.",32,[[]]],[11,"new_global_id","","Create a new global id unique to this environment.",32,[[],["globalid",3]]],[11,"symbol_pool","","Returns a reference to the symbol pool owned by this…",32,[[],["symbolpool",3]]],[11,"add_source","","Adds a source to this environment, returning a FileId for…",32,[[],["fileid",3]]],[11,"add_documentation","","Adds documentation for a file.",32,[[["fileid",3],["string",3],["btreemap",3],["byteindex",3]]]],[11,"add_diag","","Adds diagnostic to the environment.",32,[[["diagnostic",3]]]],[11,"error_with_notes","","Adds an error to this environment, with notes.",32,[[["string",3],["loc",3],["vec",3]]]],[11,"error","","Adds an error to this environment, without notes.",32,[[["loc",3]]]],[11,"warn","","Adds a warning to this environment.",32,[[["loc",3]]]],[11,"unknown_loc","","Returns the unknown location.",32,[[],["loc",3]]],[11,"unknown_move_ir_loc","","Returns a Move IR version of the unknown location which is…",32,[[],["moveirloc",6]]],[11,"internal_loc","","Returns the internal location.",32,[[],["loc",3]]],[11,"to_loc","","Converts a Loc as used by the move-lang compiler to the…",32,[[["moveirloc",6]],["loc",3]]],[11,"get_file_id","","Returns the file id for a file name, if defined.",32,[[],[["option",4],["fileid",3]]]],[11,"file_id_to_idx","","Maps a FileId to an index which can be mapped back to a…",32,[[["fileid",3]]]],[11,"file_idx_to_id","","Maps a an index which was obtained by `file_id_to_idx`…",32,[[],["fileid",3]]],[11,"get_position","","Returns file name and line/column position for a location,…",32,[[["loc",3]],["option",4]]],[11,"get_source","","Return the source text for the given location.",32,[[["loc",3]],[["spanoutofboundserror",3],["result",4]]]],[11,"get_file_count","","",32,[[]]],[11,"has_errors","","Returns true if diagnostics have error severity or worse.",32,[[]]],[11,"has_warnings","","Returns true if diagnostics have warning severity or worse.",32,[[]]],[11,"report_errors","","Writes accumulated errors to writer.",32,[[]]],[11,"report_warnings","","Writes accumulated diagnostics with warning severity or…",32,[[]]],[11,"add","","Adds a new module to the environment. StructData and…",32,[[["moveirloc",6],["specfundecl",3],["funid",3],["specblockinfo",3],["type",4],["btreemap",3],["structdata",3],["vec",3],["structid",3],["functiondata",3],["vec",3],["btreemap",3],["loc",3],["btreemap",3],["compiledmodule",3],["vec",3],["spec",3],["btreemap",3],["btreemap",3],["sourcemap",3],["nodeid",3],["specvardecl",3],["vec",3]]]],[11,"create_function_data","","Creates data for a function, adding any information not…",32,[[["loc",3],["functiondefinitionindex",3],["vec",3],["spec",3],["symbol",3],["compiledmodule",3]],["functiondata",3]]],[11,"create_struct_data","","Creates data for a struct. Currently all information is…",32,[[["loc",3],["spec",3],["structdefinitionindex",3],["symbol",3],["compiledmodule",3]],["structdata",3]]],[11,"find_module","","Finds a module by name and returns an environment for it.",32,[[["modulename",3]],[["option",4],["moduleenv",3]]]],[11,"find_module_by_name","","Finds a module by simple name and returns an environment…",32,[[["symbol",3]],[["option",4],["moduleenv",3]]]],[11,"get_enclosing_module","","Return the module enclosing this location.",32,[[["loc",3]],[["option",4],["moduleenv",3]]]],[11,"get_enclosing_function","","Returns the function enclosing this location.",32,[[["loc",3]],[["option",4],["functionenv",3]]]],[11,"get_enclosing_struct","","Returns the struct enclosing this location.",32,[[["loc",3]],[["option",4],["structenv",3]]]],[11,"get_module_count","","",32,[[]]],[11,"get_module","","Gets a module by id.",32,[[["moduleid",3]],["moduleenv",3]]],[11,"get_modules","","Returns an iterator for all modules in the environment.",32,[[]]],[11,"get_bytecode_modules","","Returns an iterator for all bytecode modules in the…",32,[[]]],[11,"get_all_structs_with_conditions","","Returns all structs in all modules which carry invariants.",32,[[],[["type",4],["vec",3]]]],[11,"get_doc","","Get documentation associated with an item at Loc.",32,[[["loc",3]]]],[11,"get_id","","Returns the id of this module in the global env.",15,[[],["moduleid",3]]],[11,"get_name","","Returns the name of this module.",15,[[],["modulename",3]]],[11,"is_script_module","","Returns true if this is a module representing a script.",15,[[]]],[11,"is_dependency","","Returns true of this module is from a dependency, i.e. not…",15,[[]]],[11,"get_source_path","","Returns the path to source file of this module.",15,[[],["osstr",3]]],[11,"get_doc","","Returns documentation associated with this module.",15,[[]]],[11,"get_spec_block_infos","","Returns spec block documentation infos.",15,[[]]],[11,"symbol_pool","","Shortcut for accessing the symbol pool.",15,[[],["symbolpool",3]]],[11,"get_verified_module","","Gets the underlying bytecode module.",15,[[],["compiledmodule",3]]],[11,"find_function","","Gets a FunctionEnv in this module by name.",15,[[["symbol",3]],[["functionenv",3],["option",4]]]],[11,"get_function","","Gets a FunctionEnv by id.",15,[[["funid",3]],["functionenv",3]]],[11,"into_function","","Gets a FunctionEnv by id.",15,[[["funid",3]],["functionenv",3]]],[11,"get_function_count","","Gets the number of functions in this module.",15,[[]]],[11,"get_functions","","Returns iterator over FunctionEnvs in this module.",15,[[]]],[11,"into_functions","","Returns iterator over FunctionEnvs in this module.",15,[[]]],[11,"get_called_function","","Get FunctionEnv for a function used in this module, via…",15,[[["functionhandleindex",3]],["functionenv",3]]],[11,"find_struct","","Gets a StructEnv in this module by name.",15,[[["symbol",3]],[["option",4],["structenv",3]]]],[11,"get_struct_id","","Gets the struct id from a definition index which must be…",15,[[["structdefinitionindex",3]],["structid",3]]],[11,"get_struct","","Gets a StructEnv by id.",15,[[["structid",3]],["structenv",3]]],[11,"get_struct_by_def_idx","","",15,[[["structdefinitionindex",3]],["structenv",3]]],[11,"get_function_id","","Gets the function id from a definition index which must be…",15,[[["functiondefinitionindex",3]],["funid",3]]],[11,"into_struct","","Gets a StructEnv by id, consuming this module env.",15,[[["structid",3]],["structenv",3]]],[11,"get_struct_count","","Gets the number of structs in this module.",15,[[]]],[11,"get_structs","","Returns iterator over structs in this module.",15,[[]]],[11,"into_structs","","Returns iterator over structs in this module.",15,[[]]],[11,"globalize_signature","","Globalizes a signature local to this module.",15,[[["signaturetoken",4]],["type",4]]],[11,"globalize_signatures","","Globalizes a list of signatures.",15,[[],[["type",4],["vec",3]]]],[11,"get_type_actuals","","Gets a list of type actuals associated with the index in…",15,[[["option",4],["signatureindex",3]],[["type",4],["vec",3]]]],[11,"get_constant","","Retrieve a constant from the pool",15,[[["constantpoolindex",3]],["vmconstant",3]]],[11,"get_constant_value","","Converts a constant to the specified type. The type must…",15,[[["vmconstant",3]],["movevalue",4]]],[11,"get_address_identifier","","Retrieve an address identifier from the pool",15,[[["addressidentifierindex",3]],["biguint",3]]],[11,"addr_to_big_uint","","Converts an address identifier to a number representing…",15,[[["accountaddress",3]],["biguint",3]]],[11,"get_spec_vars","","Returns specification variables of this module.",15,[[]]],[11,"get_spec_var","","Gets spec var by id.",15,[[["specvarid",3]],["specvardecl",3]]],[11,"find_spec_var","","Find spec var by name.",15,[[["symbol",3]],[["option",4],["specvardecl",3]]]],[11,"get_spec_funs","","Returns specification functions of this module.",15,[[]]],[11,"get_spec_fun","","Gets spec fun by id.",15,[[["specfunid",3]],["specfundecl",3]]],[11,"get_spec","","Gets module specification.",15,[[],["spec",3]]],[11,"get_spec_funs_of_name","","Get all spec fun overloads with the given name.",15,[[["symbol",3]]]],[11,"get_node_loc","","Gets the location of the given node.",15,[[["nodeid",3]],["loc",3]]],[11,"get_node_type","","Gets the type of the given node.",15,[[["nodeid",3]],["type",4]]],[11,"new_node_id","","Allocates a new node id.",15,[[],["nodeid",3]]],[11,"new_node","","Allocates a new node id and assigns location and type to it.",15,[[["loc",3],["type",4]],["nodeid",3]]],[11,"get_node_instantiation","","Gets the type parameter instantiation associated with the…",15,[[["nodeid",3]],[["type",4],["vec",3]]]],[11,"get_name","","Returns the name of this struct.",16,[[],["symbol",3]]],[11,"symbol_pool","","Shortcut for accessing the symbol pool.",16,[[],["symbolpool",3]]],[11,"get_loc","","Returns the location of this struct.",16,[[],["loc",3]]],[11,"get_doc","","Get documentation associated with this struct.",16,[[]]],[11,"get_properties","","Returns properties from pragmas.",16,[[],["propertybag",6]]],[11,"get_id","","Gets the definition index associated with this struct.",16,[[],["structid",3]]],[11,"is_native","","Determines whether this struct is native.",16,[[]]],[11,"is_vector","","Determines whether this struct is the well-known vector…",16,[[]]],[11,"is_resource","","Determines whether this struct is a resource type.",16,[[]]],[11,"get_fields","","Get an iterator for the fields, ordered by offset.",16,[[]]],[11,"get_field_count","","Return the number of fields in the struct.",16,[[]]],[11,"get_field","","Gets a field by its id.",16,[[["fieldid",3]],["fieldenv",3]]],[11,"find_field","","Find a field by its name.",16,[[["symbol",3]],[["option",4],["fieldenv",3]]]],[11,"get_field_by_offset","","Gets a field by its offset.",16,[[],["fieldenv",3]]],[11,"get_type_parameters","","Returns the type parameters associated with this struct.",16,[[],[["vec",3],["typeparameter",3]]]],[11,"get_named_type_parameters","","Returns the type parameters associated with this struct,…",16,[[],[["vec",3],["typeparameter",3]]]],[11,"has_conditions","","Returns true if this struct has specifcation conditions.",16,[[]]],[11,"get_spec","","Returns the data invariants associated with this struct.",16,[[],["spec",3]]],[11,"get_name","","Gets the name of this field.",17,[[],["symbol",3]]],[11,"get_id","","Gets the id of this field.",17,[[],["fieldid",3]]],[11,"get_doc","","Get documentation associated with this field.",17,[[]]],[11,"get_type","","Gets the type of this field.",17,[[],["type",4]]],[11,"get_offset","","Get field offset.",17,[[]]],[11,"get_name","","Returns the name of this function.",20,[[],["symbol",3]]],[11,"get_id","","Gets the id of this function.",20,[[],["funid",3]]],[11,"get_doc","","Get documentation associated with this function.",20,[[]]],[11,"get_def_idx","","Gets the definition index of this function.",20,[[],["functiondefinitionindex",3]]],[11,"symbol_pool","","Shortcut for accessing the symbol pool.",20,[[],["symbolpool",3]]],[11,"get_loc","","Returns the location of this function.",20,[[],["loc",3]]],[11,"get_bytecode_loc","","Returns the location of the bytecode at the given offset.",20,[[],["loc",3]]],[11,"get_bytecode","","Returns the bytecode associated with this function.",20,[[]]],[11,"is_pragma_true","","Returns the value of a boolean pragma for this function.…",20,[[]]],[11,"is_native","","Returns true if this function is native. The function is…",20,[[]]],[11,"is_public","","Returns true if this function is public.",20,[[]]],[11,"is_mutating","","Returns true if this function mutates any references (i.e.…",20,[[]]],[11,"get_type_parameters","","Returns the type parameters associated with this function.",20,[[],[["vec",3],["typeparameter",3]]]],[11,"get_named_type_parameters","","Returns the type parameters with the real names.",20,[[],[["vec",3],["typeparameter",3]]]],[11,"get_parameter_count","","",20,[[]]],[11,"get_parameters","","Returns the regular parameters associated with this…",20,[[],[["vec",3],["parameter",3]]]],[11,"get_return_types","","Returns return types of this function.",20,[[],[["type",4],["vec",3]]]],[11,"get_return_count","","Returns the number of return values of this function.",20,[[]]],[11,"get_local_name","","Get the name to be used for a local. If the local is an…",20,[[],["symbol",3]]],[11,"get_local_count","","Gets the number of proper locals of this function. Those…",20,[[]]],[11,"get_local_type","","Gets the type of the local at index. This must use an…",20,[[],["type",4]]],[11,"get_spec","","Returns associated specification.",20,[[],["spec",3]]],[11,"get_acquires_global_resources","","Returns the acquired global resource types.",20,[[],[["structid",3],["vec",3]]]],[0,"symbol","spec_lang","Contains definitions of symbols -- internalized strings…",null,null],[3,"Symbol","spec_lang::symbol","Representation of a symbol.",null,null],[3,"SymbolDisplay","","A helper to support symbols in formatting.",null,null],[3,"SymbolPool","","A pool of symbols. Allows to lookup a symbol by a string…",null,null],[11,"display","","",33,[[["symbolpool",3]],["symboldisplay",3]]],[11,"new","","Creates a new SymbolPool.",34,[[],["symbolpool",3]]],[11,"make","","Looks up a symbol by its string representation. If a…",34,[[],["symbol",3]]],[11,"string","","Returns the string representation of this symbol, as an…",34,[[["symbol",3]],[["string",3],["rc",3]]]],[0,"ty","spec_lang","Contains types and related functions.",null,null],[3,"Substitution","spec_lang::ty","A type substitution.",null,null],[3,"TypeError","","Represents an type error resulting from unification.",null,null],[12,"message","","",35,null],[3,"TypeDisplay","","Helper for type displays.",null,null],[4,"Type","","Represents a type.",null,null],[13,"Primitive","","",36,null],[13,"Tuple","","",36,null],[13,"Vector","","",36,null],[13,"Struct","","",36,null],[13,"TypeParameter","","",36,null],[13,"Reference","","",36,null],[13,"Fun","","",36,null],[13,"TypeDomain","","",36,null],[13,"TypeLocal","","",36,null],[13,"Error","","",36,null],[13,"Var","","",36,null],[4,"PrimitiveType","","Represents a primitive (builtin) type.",null,null],[13,"Bool","","",37,null],[13,"U8","","",37,null],[13,"U64","","",37,null],[13,"U128","","",37,null],[13,"Address","","",37,null],[13,"Signer","","",37,null],[13,"Num","","",37,null],[13,"Range","","",37,null],[13,"TypeValue","","",37,null],[4,"TypeDisplayContext","","Data providing context for displaying types.",null,null],[13,"WithoutEnv","","",38,null],[12,"symbol_pool","spec_lang::ty::TypeDisplayContext","",39,null],[12,"reverse_struct_table","","",39,null],[13,"WithEnv","spec_lang::ty","",38,null],[12,"env","spec_lang::ty::TypeDisplayContext","",40,null],[12,"type_param_names","","",40,null],[17,"BOOL_TYPE","spec_lang::ty","",null,null],[17,"NUM_TYPE","","",null,null],[11,"new_prim","","",36,[[["primitivetype",4]],["type",4]]],[11,"is_reference","","Determines whether this is a reference.",36,[[]]],[11,"is_mutable_reference","","Determines whether this is a mutable reference.",36,[[]]],[11,"is_immutable_reference","","Determines whether this is an immutable reference.",36,[[]]],[11,"is_number","","Returns true if this is any number type.",36,[[]]],[11,"replace_struct_instantiation","","If this is a struct type, replace the type instantiation.",36,[[],["type",4]]],[11,"get_struct","","If this is a struct type, return the associated struct env…",36,[[["globalenv",3]],["option",4]]],[11,"instantiate","","Instantiates type parameters in this type.",36,[[],["type",4]]],[11,"contains","","Checks whether this type contains a type for which the…",36,[[]]],[11,"is_incomplete","","Returns true if this type is incomplete, i.e. contains any…",36,[[]]],[11,"new","","Creates a new substitution.",41,[[]]],[11,"specialize","","Specializes the type, substituting all variables bound in…",41,[[["type",4]],["type",4]]],[11,"unify","","Unify two types, returning the unified type.",41,[[["type",4],["typedisplaycontext",4]],[["type",4],["typeerror",3],["result",4]]]],[11,"symbol_pool","","",38,[[],["symbolpool",3]]],[11,"display","","",36,[[["typedisplaycontext",4]],["typedisplay",3]]],[14,"emit","spec_lang","Macro to emit a simple or formatted string.",null,null],[14,"emitln","","Macro to emit a simple or formatted string followed by a…",null,null],[11,"from","spec_lang::ast","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"equivalent","","",12,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_string","","",42,[[],["string",3]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"equivalent","","",6,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"equivalent","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","spec_lang::code_writer","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","spec_lang::env","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"equivalent","","",22,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"equivalent","","",30,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"equivalent","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"equivalent","","",26,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"equivalent","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"equivalent","","",24,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"equivalent","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"equivalent","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"equivalent","","",29,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"equivalent","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"clear","","",32,[[]]],[11,"initialize","","",32,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"equivalent","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"equivalent","","",21,[[]]],[11,"from","spec_lang::symbol","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"equivalent","","",33,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_string","","",48,[[],["string",3]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"initialize","","",34,[[]]],[11,"from","spec_lang::ty","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"clear","","",41,[[]]],[11,"initialize","","",41,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_string","","",49,[[],["string",3]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"equivalent","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"equivalent","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"clone","spec_lang::ast","",7,[[],["conditionkind",4]]],[11,"clone","","",2,[[],["condition",3]]],[11,"clone","","",3,[[],["spec",3]]],[11,"clone","","",4,[[],["specblockinfo",3]]],[11,"clone","","",8,[[],["specblocktarget",4]]],[11,"clone","","",9,[[],["exp",4]]],[11,"clone","","",10,[[],["operation",4]]],[11,"clone","","",5,[[],["localvardecl",3]]],[11,"clone","","",11,[[],["value",4]]],[11,"clone","","",12,[[],["modulename",3]]],[11,"clone","","",6,[[],["qualifiedsymbol",3]]],[11,"clone","spec_lang::code_writer","",44,[[],["codewriterlabel",3]]],[11,"clone","spec_lang::env","",22,[[],["loc",3]]],[11,"clone","","",30,[[],["moduleid",3]]],[11,"clone","","",25,[[],["structid",3]]],[11,"clone","","",26,[[],["fieldid",3]]],[11,"clone","","",23,[[],["funid",3]]],[11,"clone","","",24,[[],["schemaid",3]]],[11,"clone","","",27,[[],["specfunid",3]]],[11,"clone","","",28,[[],["specvarid",3]]],[11,"clone","","",29,[[],["nodeid",3]]],[11,"clone","","",31,[[],["globalid",3]]],[11,"clone","","",15,[[],["moduleenv",3]]],[11,"clone","","",16,[[],["structenv",3]]],[11,"clone","","",18,[[],["typeparameter",3]]],[11,"clone","","",21,[[],["typeconstraint",4]]],[11,"clone","","",19,[[],["parameter",3]]],[11,"clone","","",20,[[],["functionenv",3]]],[11,"clone","spec_lang::symbol","",33,[[],["symbol",3]]],[11,"clone","spec_lang::ty","",36,[[],["type",4]]],[11,"clone","","",37,[[],["primitivetype",4]]],[11,"clone","","",41,[[],["substitution",3]]],[11,"default","spec_lang::ast","",3,[[],["spec",3]]],[11,"default","spec_lang::env","",32,[[]]],[11,"default","spec_lang::symbol","",34,[[]]],[11,"default","spec_lang::ty","",41,[[]]],[11,"cmp","spec_lang::ast","",8,[[["specblocktarget",4]],["ordering",4]]],[11,"cmp","","",12,[[["modulename",3]],["ordering",4]]],[11,"cmp","","",6,[[["qualifiedsymbol",3]],["ordering",4]]],[11,"cmp","spec_lang::env","",22,[[["loc",3]],["ordering",4]]],[11,"cmp","","",30,[[["moduleid",3]],["ordering",4]]],[11,"cmp","","",25,[[["structid",3]],["ordering",4]]],[11,"cmp","","",26,[[["fieldid",3]],["ordering",4]]],[11,"cmp","","",23,[[["funid",3]],["ordering",4]]],[11,"cmp","","",24,[[["schemaid",3]],["ordering",4]]],[11,"cmp","","",27,[[["specfunid",3]],["ordering",4]]],[11,"cmp","","",28,[[["specvarid",3]],["ordering",4]]],[11,"cmp","","",29,[[["nodeid",3]],["ordering",4]]],[11,"cmp","","",31,[[["globalid",3]],["ordering",4]]],[11,"cmp","","",18,[[["typeparameter",3]],["ordering",4]]],[11,"cmp","","",21,[[["typeconstraint",4]],["ordering",4]]],[11,"cmp","spec_lang::symbol","",33,[[["symbol",3]],["ordering",4]]],[11,"cmp","spec_lang::ty","",36,[[["type",4]],["ordering",4]]],[11,"cmp","","",37,[[["primitivetype",4]],["ordering",4]]],[11,"eq","spec_lang::ast","",7,[[["conditionkind",4]]]],[11,"ne","","",7,[[["conditionkind",4]]]],[11,"eq","","",8,[[["specblocktarget",4]]]],[11,"ne","","",8,[[["specblocktarget",4]]]],[11,"eq","","",9,[[["exp",4]]]],[11,"ne","","",9,[[["exp",4]]]],[11,"eq","","",10,[[["operation",4]]]],[11,"ne","","",10,[[["operation",4]]]],[11,"eq","","",5,[[["localvardecl",3]]]],[11,"ne","","",5,[[["localvardecl",3]]]],[11,"eq","","",11,[[["value",4]]]],[11,"ne","","",11,[[["value",4]]]],[11,"eq","","",12,[[["modulename",3]]]],[11,"ne","","",12,[[["modulename",3]]]],[11,"eq","","",6,[[["qualifiedsymbol",3]]]],[11,"ne","","",6,[[["qualifiedsymbol",3]]]],[11,"eq","spec_lang::env","",22,[[["loc",3]]]],[11,"ne","","",22,[[["loc",3]]]],[11,"eq","","",30,[[["moduleid",3]]]],[11,"ne","","",30,[[["moduleid",3]]]],[11,"eq","","",25,[[["structid",3]]]],[11,"ne","","",25,[[["structid",3]]]],[11,"eq","","",26,[[["fieldid",3]]]],[11,"ne","","",26,[[["fieldid",3]]]],[11,"eq","","",23,[[["funid",3]]]],[11,"ne","","",23,[[["funid",3]]]],[11,"eq","","",24,[[["schemaid",3]]]],[11,"ne","","",24,[[["schemaid",3]]]],[11,"eq","","",27,[[["specfunid",3]]]],[11,"ne","","",27,[[["specfunid",3]]]],[11,"eq","","",28,[[["specvarid",3]]]],[11,"ne","","",28,[[["specvarid",3]]]],[11,"eq","","",29,[[["nodeid",3]]]],[11,"ne","","",29,[[["nodeid",3]]]],[11,"eq","","",31,[[["globalid",3]]]],[11,"ne","","",31,[[["globalid",3]]]],[11,"eq","","",18,[[["typeparameter",3]]]],[11,"ne","","",18,[[["typeparameter",3]]]],[11,"eq","","",21,[[["typeconstraint",4]]]],[11,"eq","spec_lang::symbol","",33,[[["symbol",3]]]],[11,"ne","","",33,[[["symbol",3]]]],[11,"eq","spec_lang::ty","",36,[[["type",4]]]],[11,"ne","","",36,[[["type",4]]]],[11,"eq","","",37,[[["primitivetype",4]]]],[11,"partial_cmp","spec_lang::ast","",8,[[["specblocktarget",4]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["specblocktarget",4]]]],[11,"le","","",8,[[["specblocktarget",4]]]],[11,"gt","","",8,[[["specblocktarget",4]]]],[11,"ge","","",8,[[["specblocktarget",4]]]],[11,"partial_cmp","","",12,[[["modulename",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["modulename",3]]]],[11,"le","","",12,[[["modulename",3]]]],[11,"gt","","",12,[[["modulename",3]]]],[11,"ge","","",12,[[["modulename",3]]]],[11,"partial_cmp","","",6,[[["qualifiedsymbol",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["qualifiedsymbol",3]]]],[11,"le","","",6,[[["qualifiedsymbol",3]]]],[11,"gt","","",6,[[["qualifiedsymbol",3]]]],[11,"ge","","",6,[[["qualifiedsymbol",3]]]],[11,"partial_cmp","spec_lang::env","",22,[[["loc",3]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["loc",3]]]],[11,"le","","",22,[[["loc",3]]]],[11,"gt","","",22,[[["loc",3]]]],[11,"ge","","",22,[[["loc",3]]]],[11,"partial_cmp","","",30,[[["moduleid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",30,[[["moduleid",3]]]],[11,"le","","",30,[[["moduleid",3]]]],[11,"gt","","",30,[[["moduleid",3]]]],[11,"ge","","",30,[[["moduleid",3]]]],[11,"partial_cmp","","",25,[[["structid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["structid",3]]]],[11,"le","","",25,[[["structid",3]]]],[11,"gt","","",25,[[["structid",3]]]],[11,"ge","","",25,[[["structid",3]]]],[11,"partial_cmp","","",26,[[["fieldid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["fieldid",3]]]],[11,"le","","",26,[[["fieldid",3]]]],[11,"gt","","",26,[[["fieldid",3]]]],[11,"ge","","",26,[[["fieldid",3]]]],[11,"partial_cmp","","",23,[[["funid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",23,[[["funid",3]]]],[11,"le","","",23,[[["funid",3]]]],[11,"gt","","",23,[[["funid",3]]]],[11,"ge","","",23,[[["funid",3]]]],[11,"partial_cmp","","",24,[[["schemaid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",24,[[["schemaid",3]]]],[11,"le","","",24,[[["schemaid",3]]]],[11,"gt","","",24,[[["schemaid",3]]]],[11,"ge","","",24,[[["schemaid",3]]]],[11,"partial_cmp","","",27,[[["specfunid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",27,[[["specfunid",3]]]],[11,"le","","",27,[[["specfunid",3]]]],[11,"gt","","",27,[[["specfunid",3]]]],[11,"ge","","",27,[[["specfunid",3]]]],[11,"partial_cmp","","",28,[[["specvarid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["specvarid",3]]]],[11,"le","","",28,[[["specvarid",3]]]],[11,"gt","","",28,[[["specvarid",3]]]],[11,"ge","","",28,[[["specvarid",3]]]],[11,"partial_cmp","","",29,[[["nodeid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",29,[[["nodeid",3]]]],[11,"le","","",29,[[["nodeid",3]]]],[11,"gt","","",29,[[["nodeid",3]]]],[11,"ge","","",29,[[["nodeid",3]]]],[11,"partial_cmp","","",31,[[["globalid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",31,[[["globalid",3]]]],[11,"le","","",31,[[["globalid",3]]]],[11,"gt","","",31,[[["globalid",3]]]],[11,"ge","","",31,[[["globalid",3]]]],[11,"partial_cmp","","",18,[[["typeparameter",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["typeparameter",3]]]],[11,"le","","",18,[[["typeparameter",3]]]],[11,"gt","","",18,[[["typeparameter",3]]]],[11,"ge","","",18,[[["typeparameter",3]]]],[11,"partial_cmp","","",21,[[["typeconstraint",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","spec_lang::symbol","",33,[[["symbol",3]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["symbol",3]]]],[11,"le","","",33,[[["symbol",3]]]],[11,"gt","","",33,[[["symbol",3]]]],[11,"ge","","",33,[[["symbol",3]]]],[11,"partial_cmp","spec_lang::ty","",36,[[["type",4]],[["option",4],["ordering",4]]]],[11,"lt","","",36,[[["type",4]]]],[11,"le","","",36,[[["type",4]]]],[11,"gt","","",36,[[["type",4]]]],[11,"ge","","",36,[[["type",4]]]],[11,"partial_cmp","","",37,[[["primitivetype",4]],[["option",4],["ordering",4]]]],[11,"fmt","spec_lang::ast","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","spec_lang::code_writer","",44,[[["formatter",3]],["result",6]]],[11,"fmt","spec_lang::env","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","spec_lang::symbol","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","spec_lang::ty","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","spec_lang::ast","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",43,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","spec_lang::symbol","",48,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","spec_lang::ty","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"hash","spec_lang::ast","",12,[[]]],[11,"hash","","",6,[[]]],[11,"hash","spec_lang::env","",30,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",26,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",31,[[]]],[11,"hash","spec_lang::symbol","",33,[[]]],[11,"hash","spec_lang::ty","",36,[[]]],[11,"hash","","",37,[[]]]],"p":[[3,"SpecVarDecl"],[3,"SpecFunDecl"],[3,"Condition"],[3,"Spec"],[3,"SpecBlockInfo"],[3,"LocalVarDecl"],[3,"QualifiedSymbol"],[4,"ConditionKind"],[4,"SpecBlockTarget"],[4,"Exp"],[4,"Operation"],[4,"Value"],[3,"ModuleName"],[3,"CodeWriter"],[3,"ModuleData"],[3,"ModuleEnv"],[3,"StructEnv"],[3,"FieldEnv"],[3,"TypeParameter"],[3,"Parameter"],[3,"FunctionEnv"],[4,"TypeConstraint"],[3,"Loc"],[3,"FunId"],[3,"SchemaId"],[3,"StructId"],[3,"FieldId"],[3,"SpecFunId"],[3,"SpecVarId"],[3,"NodeId"],[3,"ModuleId"],[3,"GlobalId"],[3,"GlobalEnv"],[3,"Symbol"],[3,"SymbolPool"],[3,"TypeError"],[4,"Type"],[4,"PrimitiveType"],[4,"TypeDisplayContext"],[13,"WithoutEnv"],[13,"WithEnv"],[3,"Substitution"],[3,"ModuleNameDisplay"],[3,"QualifiedSymbolDisplay"],[3,"CodeWriterLabel"],[3,"StructData"],[3,"FieldData"],[3,"FunctionData"],[3,"SymbolDisplay"],[3,"TypeDisplay"]]},\
"stackless_bytecode_generator":{"doc":"","i":[[0,"annotations","stackless_bytecode_generator","",null,null],[3,"Annotations","stackless_bytecode_generator::annotations","A container for an extensible, dynamically typed set of…",null,null],[11,"has","","Tests whether annotation of type T is present.",0,[[]]],[11,"get","","Gets annotation of type T.",0,[[],["option",4]]],[11,"set","","Sets annotation of type T.",0,[[["any",8]]]],[11,"remove","","Removes annotation of type T.",0,[[],[["option",4],["box",3]]]],[0,"borrow_analysis","stackless_bytecode_generator","",null,null],[3,"BorrowInfo","stackless_bytecode_generator::borrow_analysis","",null,null],[12,"live_refs","","",1,null],[12,"borrowed_by","","",1,null],[12,"borrows_from","","",1,null],[3,"BorrowInfoAtCodeOffset","","",null,null],[12,"before","","",2,null],[12,"after","","",2,null],[3,"BorrowAnnotation","","Borrow annotation computed by the borrow analysis processor.",null,null],[3,"BorrowAnalysisProcessor","","Borrow analysis processor.",null,null],[5,"format_borrow_annotation","","Format a borrow annotation.",null,[[["functiontarget",3],["codeoffset",6]],[["string",3],["option",4]]]],[11,"all_refs","","",1,[[],[["btreeset",3],["tempindex",6]]]],[11,"is_empty","","",1,[[]]],[11,"borrow_info_str","","",1,[[["functiontarget",3]],["string",3]]],[11,"get_borrow_info_at","","",3,[[["codeoffset",6]],[["borrowinfoatcodeoffset",3],["option",4]]]],[11,"new","","",4,[[],["box",3]]],[0,"dataflow_analysis","stackless_bytecode_generator","Adapted from AbstractInterpreter for Bytecode, this module…",null,null],[3,"BlockState","stackless_bytecode_generator::dataflow_analysis","",null,null],[12,"pre","","",5,null],[12,"post","","",5,null],[4,"JoinResult","","",null,null],[13,"Unchanged","","",6,null],[13,"Changed","","",6,null],[13,"Error","","",6,null],[6,"StateMap","","",null,null],[8,"AbstractDomain","","",null,null],[10,"join","","",7,[[],["joinresult",4]]],[8,"TransferFunctions","","Take a pre-state + instruction and mutate it to produce a…",null,null],[16,"State","","",8,null],[16,"AnalysisError","","",8,null],[10,"execute_block","","",8,[[["stacklesscontrolflowgraph",3],["blockid",6]],["result",4]]],[8,"DataflowAnalysis","","",null,null],[11,"analyze_function","","",9,[[["stacklesscontrolflowgraph",3]],["statemap",6]]],[0,"eliminate_imm_refs","stackless_bytecode_generator","",null,null],[3,"EliminateImmRefsProcessor","stackless_bytecode_generator::eliminate_imm_refs","",null,null],[3,"EliminateImmRefs","","",null,null],[11,"new","","",10,[[],["box",3]]],[0,"eliminate_mut_refs","stackless_bytecode_generator","",null,null],[3,"EliminateMutRefsProcessor","stackless_bytecode_generator::eliminate_mut_refs","",null,null],[3,"EliminateMutRefs","","",null,null],[11,"new","","",11,[[],["box",3]]],[0,"function_target","stackless_bytecode_generator","",null,null],[3,"FunctionTarget","stackless_bytecode_generator::function_target","A FunctionTarget is a drop-in replacement for a…",null,null],[12,"func_env","","",12,null],[12,"data","","",12,null],[12,"name_to_index","","",12,null],[3,"FunctionTargetData","","Holds the owned data belonging to a FunctionTarget, which…",null,null],[12,"code","","",13,null],[12,"local_types","","",13,null],[12,"return_types","","",13,null],[12,"param_proxy_map","","",13,null],[12,"ref_param_proxy_map","","",13,null],[12,"ref_param_return_map","","",13,null],[12,"acquires_global_resources","","",13,null],[12,"locations","","",13,null],[12,"annotations","","",13,null],[12,"given_spec_blocks","","Map of spec block ids as given by the source, to the code…",13,null],[12,"generated_spec_blocks","","Map of spec block ids to generated by transformations, to…",13,null],[12,"next_free_spec_block_id","","",13,null],[6,"AnnotationFormatter","","A function which is called to display the value of an…",null,null],[11,"new","","",12,[[["functionenv",3],["functiontargetdata",3]],["functiontarget",3]]],[11,"get_name","","Returns the name of this function.",12,[[],["symbol",3]]],[11,"get_id","","Gets the id of this function.",12,[[],["funid",3]]],[11,"symbol_pool","","Shortcut for accessing the symbol pool.",12,[[],["symbolpool",3]]],[11,"module_env","","Shortcut for accessing the module env of this function.",12,[[],["moduleenv",3]]],[11,"global_env","","Shortcut for accessing the global env of this function.",12,[[],["globalenv",3]]],[11,"get_loc","","Returns the location of this function.",12,[[],["loc",3]]],[11,"get_bytecode_loc","","Returns the location of the bytecode at the given offset.",12,[[["attrid",3]],["loc",3]]],[11,"is_native","","Returns true if this function is native.",12,[[]]],[11,"is_public","","Returns true if this function is public.",12,[[]]],[11,"is_mutating","","Returns true if this function mutates any references (i.e.…",12,[[]]],[11,"get_type_parameters","","Returns the type parameters associated with this function.",12,[[],[["vec",3],["typeparameter",3]]]],[11,"get_return_type","","Returns return type at given index.",12,[[],["type",4]]],[11,"get_return_types","","Returns return types of this function.",12,[[]]],[11,"get_return_count","","Returns the number of return values of this function.",12,[[]]],[11,"get_parameter_count","","",12,[[]]],[11,"get_local_name","","Get the name to be used for a local. If the local is an…",12,[[],["symbol",3]]],[11,"get_local_index","","Get the index corresponding to a local name",12,[[["symbol",3]],["option",4]]],[11,"get_local_count","","Gets the number of locals of this function, including…",12,[[]]],[11,"get_user_local_count","","Gets the number of user declared locals of this function,…",12,[[]]],[11,"get_local_type","","Gets the type of the local at index. This must use an…",12,[[],["type",4]]],[11,"get_spec","","Returns specification associated with this function.",12,[[],["spec",3]]],[11,"get_spec_on_impl","","Returns specification conditions associated with this…",12,[[["specblockid",3]],["spec",3]]],[11,"is_pragma_true","","Returns the value of a boolean pragma for this function.…",12,[[]]],[11,"get_bytecode","","Gets the bytecode.",12,[[]]],[11,"get_annotations","","Gets annotations.",12,[[],["annotations",3]]],[11,"get_acquires_global_resources","","Gets acquired resources",12,[[]]],[11,"get_return_index","","Gets index of return parameter for a reference input…",12,[[],["option",4]]],[11,"get_proxy_index","","Gets index of mutable proxy variable for an input parameter",12,[[],["option",4]]],[11,"get_ref_proxy_index","","Gets index of mutable proxy variable for an input ref…",12,[[],["option",4]]],[11,"call_ends_lifetime","","Returns whether a call to this function ends lifetime of…",12,[[]]],[11,"new","","Creates new function target data.",13,[[["loc",3],["vec",3],["btreemap",3],["type",4],["codeoffset",6],["attrid",3],["vec",3],["bytecode",4],["btreemap",3],["structid",3],["vec",3],["specblockid",3]]]],[11,"add_spec_block","","Adds a spec block to this function target data and returns…",13,[[["spec",3]],["specblockid",3]]],[11,"register_annotation_formatter","","Register a formatter. Each function target processor which…",12,[[["box",3],["annotationformatter",6]]]],[11,"register_annotation_formatters_for_test","","Tests use this function to register all relevant…",12,[[]]],[0,"function_target_pipeline","stackless_bytecode_generator","",null,null],[3,"FunctionTargetsHolder","stackless_bytecode_generator::function_target_pipeline","A data structure which holds data for multiple function…",null,null],[3,"FunctionTargetPipeline","","A processing pipeline for function targets.",null,null],[8,"FunctionTargetProcessor","","A trait for processing a function target. Takes as…",null,null],[10,"process","","",14,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"add_target","","Adds a new function target. The target will be initialized…",15,[[["functionenv",3]]]],[11,"get_target","","Gets a function target for read-only consumption.",15,[[["functionenv",3]],["functiontarget",3]]],[11,"add_processor","","Adds a processor to this pipeline. Processor will be…",16,[[["box",3],["functiontargetprocessor",8]]]],[11,"run","","Runs the pipeline on all functions in the targets holder.…",16,[[["functiontargetsholder",3],["globalenv",3]]]],[0,"lifetime_analysis","stackless_bytecode_generator","",null,null],[3,"LifetimeAnnotation","stackless_bytecode_generator::lifetime_analysis","Function target annotation computed by the lifetime…",null,null],[3,"LifetimeAnalysisProcessor","","Lifetime analysis processor.",null,null],[5,"format_lifetime_annotation","","Format a lifetime annotation.",null,[[["functiontarget",3],["codeoffset",6]],[["string",3],["option",4]]]],[11,"get_dead_refs","","",17,[[["codeoffset",6]],[["btreeset",3],["option",4]]]],[11,"new","","",18,[[],["box",3]]],[0,"livevar_analysis","stackless_bytecode_generator","",null,null],[3,"LiveVarInfoAtCodeOffset","stackless_bytecode_generator::livevar_analysis","The annotation for live variable analysis. For each code…",null,null],[12,"before","","",19,null],[12,"after","","",19,null],[3,"LiveVarAnnotation","","",null,null],[3,"LiveVarAnalysisProcessor","","",null,null],[5,"format_livevar_annotation","","Format a live variable annotation.",null,[[["functiontarget",3],["codeoffset",6]],[["string",3],["option",4]]]],[11,"get_live_var_info_at","","",20,[[["codeoffset",6]],[["option",4],["livevarinfoatcodeoffset",3]]]],[11,"new","","",21,[[],["box",3]]],[0,"packref_analysis","stackless_bytecode_generator","",null,null],[3,"PackrefAnalysisProcessor","stackless_bytecode_generator::packref_analysis","Copy Analysis ends",null,null],[3,"PackrefInstrumentation","","",null,null],[12,"before","","",22,null],[12,"after","","",22,null],[3,"PackrefAnnotation","","",null,null],[3,"PackrefAnalysis","","",null,null],[5,"format_packref_annotation","","Format a packref annotation.",null,[[["functiontarget",3],["codeoffset",6]],[["string",3],["option",4]]]],[11,"new","","",23,[[],["box",3]]],[11,"get_packref_instrumentation_at","","",24,[[["codeoffset",6]],[["packrefinstrumentation",3],["option",4]]]],[0,"reaching_def_analysis","stackless_bytecode_generator","",null,null],[3,"ReachingDefAnnotation","stackless_bytecode_generator::reaching_def_analysis","The annotation for reaching definitions. For each code…",null,null],[3,"ReachingDefProcessor","","",null,null],[4,"Def","","The definitions we are capturing. Currently we only…",null,null],[13,"Const","","",25,null],[13,"Alias","","",25,null],[5,"format_reaching_def_annotation","","Format a reaching definition annotation.",null,[[["functiontarget",3],["codeoffset",6]],[["string",3],["option",4]]]],[11,"new","","",26,[[],["box",3]]],[0,"stackless_bytecode","stackless_bytecode_generator","",null,null],[3,"Label","stackless_bytecode_generator::stackless_bytecode","A label for a branch destination.",null,null],[3,"AttrId","","An id for an attribute attached to an instruction.",null,null],[3,"SpecBlockId","","An id for a spec block. A spec block can contain assumes…",null,null],[3,"StructDecl","","",null,null],[12,"module_id","","",27,null],[12,"struct_id","","",27,null],[3,"BorrowNodeDisplay","","A display object for a borrow node.",null,null],[3,"BytecodeDisplay","","A display object for a bytecode.",null,null],[3,"OperationDisplay","","A display object for an operation.",null,null],[4,"AssignKind","","The kind of an assignment in the bytecode.",null,null],[13,"Copy","","The assign copies the lhs value.",28,null],[13,"Move","","The assign moves the lhs value.",28,null],[13,"Store","","The assign stores the lhs value.",28,null],[4,"Constant","","A constant value.",null,null],[13,"Bool","","",29,null],[13,"U8","","",29,null],[13,"U64","","",29,null],[13,"U128","","",29,null],[13,"Address","","",29,null],[13,"ByteArray","","",29,null],[13,"TxnSenderAddress","","",29,null],[4,"Operation","","An operation -- target of a call. This contains user…",null,null],[13,"Function","","",30,null],[13,"Pack","","",30,null],[13,"Unpack","","",30,null],[13,"MoveToSender","","",30,null],[13,"MoveTo","","",30,null],[13,"MoveFrom","","",30,null],[13,"Exists","","",30,null],[13,"BorrowLoc","","",30,null],[13,"BorrowField","","",30,null],[13,"BorrowGlobal","","",30,null],[13,"GetField","","",30,null],[13,"GetGlobal","","",30,null],[13,"Destroy","","",30,null],[13,"ReadRef","","",30,null],[13,"WriteRef","","",30,null],[13,"FreezeRef","","",30,null],[13,"CastU8","","",30,null],[13,"CastU64","","",30,null],[13,"CastU128","","",30,null],[13,"Not","","",30,null],[13,"Add","","",30,null],[13,"Sub","","",30,null],[13,"Mul","","",30,null],[13,"Div","","",30,null],[13,"Mod","","",30,null],[13,"BitOr","","",30,null],[13,"BitAnd","","",30,null],[13,"Xor","","",30,null],[13,"Shl","","",30,null],[13,"Shr","","",30,null],[13,"Lt","","",30,null],[13,"Gt","","",30,null],[13,"Le","","",30,null],[13,"Ge","","",30,null],[13,"Or","","",30,null],[13,"And","","",30,null],[13,"Eq","","",30,null],[13,"Neq","","",30,null],[4,"BorrowNode","","",null,null],[13,"GlobalRoot","","",31,null],[13,"LocalRoot","","",31,null],[13,"Reference","","",31,null],[4,"Bytecode","","",null,null],[13,"SpecBlock","","",32,null],[13,"Assign","","",32,null],[13,"Call","","",32,null],[13,"Ret","","",32,null],[13,"Load","","",32,null],[13,"Branch","","",32,null],[13,"Jump","","",32,null],[13,"Label","","",32,null],[13,"Abort","","",32,null],[13,"Nop","","",32,null],[13,"WriteBack","","",32,null],[13,"Splice","","",32,null],[13,"UnpackRef","","",32,null],[13,"PackRef","","",32,null],[6,"TempIndex","","",null,null],[11,"new","","",33,[[]]],[11,"as_usize","","",33,[[]]],[11,"new","","",34,[[]]],[11,"as_usize","","",34,[[]]],[11,"new","","",35,[[]]],[11,"as_usize","","",35,[[]]],[11,"display","","Creates a format object for a borrow node in context of a…",31,[[["functiontarget",3]],["borrownodedisplay",3]]],[11,"get_attr_id","","",32,[[],["attrid",3]]],[11,"is_exit","","",32,[[]]],[11,"is_return","","",32,[[]]],[11,"is_unconditional_branch","","",32,[[]]],[11,"is_conditional_branch","","",32,[[]]],[11,"is_branch","","",32,[[]]],[11,"branch_dests","","Return the destination(s) if self is a branch/jump…",32,[[],[["vec",3],["label",3]]]],[11,"label_offsets","","Returns a mapping from labels to code offsets.",32,[[],[["btreemap",3],["codeoffset",6],["label",3]]]],[11,"get_successors","","Return the successor offsets of this instruction. In…",32,[[["codeoffset",6],["btreemap",3]],[["codeoffset",6],["vec",3]]]],[11,"display","","Creates a format object for a bytecode in context of a…",32,[[["functiontarget",3]],["bytecodedisplay",3]]],[11,"display","","Creates a format object for a bytecode in context of a…",30,[[["functiontarget",3]],["operationdisplay",3]]],[0,"stackless_bytecode_generator","stackless_bytecode_generator","",null,null],[3,"StacklessBytecodeGenerator","stackless_bytecode_generator::stackless_bytecode_generator","",null,null],[11,"new","","",36,[[["functionenv",3]]]],[11,"generate_function","","",36,[[],["functiontargetdata",3]]],[11,"generate_bytecode","","",36,[[["movebytecode",4],["codeoffset",6],["btreemap",3],["btreemap",3]]]],[0,"stackless_control_flow_graph","stackless_bytecode_generator","Adapted from control_flow_graph for Bytecode, this module…",null,null],[3,"StacklessControlFlowGraph","stackless_bytecode_generator::stackless_control_flow_graph","",null,null],[6,"BlockId","","",null,null],[11,"new_forward","","",37,[[]]],[11,"new_backward","","",37,[[]]],[11,"block_start","","",37,[[["blockid",6]],["codeoffset",6]]],[11,"block_end","","",37,[[["blockid",6]],["codeoffset",6]]],[11,"successors","","",37,[[["blockid",6]],["vec",3]]],[11,"blocks","","",37,[[],[["vec",3],["blockid",6]]]],[11,"entry_blocks","","",37,[[],[["vec",3],["blockid",6]]]],[11,"instr_indexes","","",37,[[["blockid",6]],[["box",3],["doubleendediterator",8]]]],[11,"num_blocks","","",37,[[]]],[0,"writeback_analysis","stackless_bytecode_generator","",null,null],[3,"WritebackAnalysisProcessor","stackless_bytecode_generator::writeback_analysis","",null,null],[3,"WritebackAnnotation","","",null,null],[3,"WritebackAnalysis","","",null,null],[5,"format_writeback_annotation","","Format a writeback annotation.",null,[[["functiontarget",3],["codeoffset",6]],[["string",3],["option",4]]]],[11,"new","","",38,[[],["box",3]]],[11,"get_writeback_instrs_at","","",39,[[["codeoffset",6]],[["option",4],["vec",3]]]],[11,"from","stackless_bytecode_generator::annotations","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","stackless_bytecode_generator::borrow_analysis","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","stackless_bytecode_generator::dataflow_analysis","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","stackless_bytecode_generator::eliminate_imm_refs","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","stackless_bytecode_generator::eliminate_mut_refs","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","stackless_bytecode_generator::function_target","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","stackless_bytecode_generator::function_target_pipeline","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"initialize","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"initialize","","",16,[[]]],[11,"from","stackless_bytecode_generator::lifetime_analysis","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"from","stackless_bytecode_generator::livevar_analysis","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"clear","","",20,[[]]],[11,"initialize","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","stackless_bytecode_generator::packref_analysis","",23,[[]]],[11,"into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","stackless_bytecode_generator::reaching_def_analysis","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"clear","","",43,[[]]],[11,"initialize","","",43,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"equivalent","","",25,[[]]],[11,"from","stackless_bytecode_generator::stackless_bytecode","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"equivalent","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"equivalent","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"equivalent","","",35,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"equivalent","","",27,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_string","","",44,[[],["string",3]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_string","","",45,[[],["string",3]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_string","","",46,[[],["string",3]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"equivalent","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"equivalent","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"equivalent","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"equivalent","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"equivalent","","",32,[[]]],[11,"from","stackless_bytecode_generator::stackless_bytecode_generator","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","stackless_bytecode_generator::stackless_control_flow_graph","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","stackless_bytecode_generator::writeback_analysis","",38,[[]]],[11,"into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"process","stackless_bytecode_generator::borrow_analysis","",4,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::eliminate_imm_refs","",10,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::eliminate_mut_refs","",11,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::lifetime_analysis","",18,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::livevar_analysis","",21,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::packref_analysis","",23,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::reaching_def_analysis","",26,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"process","stackless_bytecode_generator::writeback_analysis","",38,[[["functiontargetsholder",3],["functiontargetdata",3],["functionenv",3]],["functiontargetdata",3]]],[11,"clone","stackless_bytecode_generator::borrow_analysis","",1,[[],["borrowinfo",3]]],[11,"clone","stackless_bytecode_generator::dataflow_analysis","",5,[[],["blockstate",3]]],[11,"clone","stackless_bytecode_generator::function_target","",12,[[]]],[11,"clone","stackless_bytecode_generator::reaching_def_analysis","",25,[[],["def",4]]],[11,"clone","stackless_bytecode_generator::stackless_bytecode","",33,[[],["label",3]]],[11,"clone","","",34,[[],["attrid",3]]],[11,"clone","","",35,[[],["specblockid",3]]],[11,"clone","","",28,[[],["assignkind",4]]],[11,"clone","","",29,[[],["constant",4]]],[11,"clone","","",30,[[],["operation",4]]],[11,"clone","","",27,[[],["structdecl",3]]],[11,"clone","","",31,[[],["borrownode",4]]],[11,"clone","","",32,[[],["bytecode",4]]],[11,"default","stackless_bytecode_generator::annotations","",0,[[],["annotations",3]]],[11,"default","stackless_bytecode_generator::function_target_pipeline","",15,[[],["functiontargetsholder",3]]],[11,"default","","",16,[[],["functiontargetpipeline",3]]],[11,"default","stackless_bytecode_generator::livevar_analysis","",20,[[],["livevarannotation",3]]],[11,"default","stackless_bytecode_generator::reaching_def_analysis","",43,[[],["reachingdefannotation",3]]],[11,"cmp","stackless_bytecode_generator::dataflow_analysis","",5,[[["blockstate",3]],["ordering",4]]],[11,"cmp","stackless_bytecode_generator::reaching_def_analysis","",25,[[["def",4]],["ordering",4]]],[11,"cmp","stackless_bytecode_generator::stackless_bytecode","",33,[[["label",3]],["ordering",4]]],[11,"cmp","","",34,[[["attrid",3]],["ordering",4]]],[11,"cmp","","",35,[[["specblockid",3]],["ordering",4]]],[11,"cmp","","",28,[[["assignkind",4]],["ordering",4]]],[11,"cmp","","",29,[[["constant",4]],["ordering",4]]],[11,"cmp","","",27,[[["structdecl",3]],["ordering",4]]],[11,"cmp","","",31,[[["borrownode",4]],["ordering",4]]],[11,"eq","stackless_bytecode_generator::dataflow_analysis","",5,[[["blockstate",3]]]],[11,"ne","","",5,[[["blockstate",3]]]],[11,"eq","stackless_bytecode_generator::reaching_def_analysis","",25,[[["def",4]]]],[11,"ne","","",25,[[["def",4]]]],[11,"eq","stackless_bytecode_generator::stackless_bytecode","",33,[[["label",3]]]],[11,"ne","","",33,[[["label",3]]]],[11,"eq","","",34,[[["attrid",3]]]],[11,"ne","","",34,[[["attrid",3]]]],[11,"eq","","",35,[[["specblockid",3]]]],[11,"ne","","",35,[[["specblockid",3]]]],[11,"eq","","",28,[[["assignkind",4]]]],[11,"eq","","",29,[[["constant",4]]]],[11,"ne","","",29,[[["constant",4]]]],[11,"eq","","",30,[[["operation",4]]]],[11,"ne","","",30,[[["operation",4]]]],[11,"eq","","",27,[[["structdecl",3]]]],[11,"ne","","",27,[[["structdecl",3]]]],[11,"eq","","",31,[[["borrownode",4]]]],[11,"ne","","",31,[[["borrownode",4]]]],[11,"eq","","",32,[[["bytecode",4]]]],[11,"ne","","",32,[[["bytecode",4]]]],[11,"partial_cmp","stackless_bytecode_generator::dataflow_analysis","",5,[[["blockstate",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["blockstate",3]]]],[11,"le","","",5,[[["blockstate",3]]]],[11,"gt","","",5,[[["blockstate",3]]]],[11,"ge","","",5,[[["blockstate",3]]]],[11,"partial_cmp","stackless_bytecode_generator::reaching_def_analysis","",25,[[["def",4]],[["option",4],["ordering",4]]]],[11,"lt","","",25,[[["def",4]]]],[11,"le","","",25,[[["def",4]]]],[11,"gt","","",25,[[["def",4]]]],[11,"ge","","",25,[[["def",4]]]],[11,"partial_cmp","stackless_bytecode_generator::stackless_bytecode","",33,[[["label",3]],[["option",4],["ordering",4]]]],[11,"lt","","",33,[[["label",3]]]],[11,"le","","",33,[[["label",3]]]],[11,"gt","","",33,[[["label",3]]]],[11,"ge","","",33,[[["label",3]]]],[11,"partial_cmp","","",34,[[["attrid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",34,[[["attrid",3]]]],[11,"le","","",34,[[["attrid",3]]]],[11,"gt","","",34,[[["attrid",3]]]],[11,"ge","","",34,[[["attrid",3]]]],[11,"partial_cmp","","",35,[[["specblockid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",35,[[["specblockid",3]]]],[11,"le","","",35,[[["specblockid",3]]]],[11,"gt","","",35,[[["specblockid",3]]]],[11,"ge","","",35,[[["specblockid",3]]]],[11,"partial_cmp","","",28,[[["assignkind",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",29,[[["constant",4]],[["option",4],["ordering",4]]]],[11,"lt","","",29,[[["constant",4]]]],[11,"le","","",29,[[["constant",4]]]],[11,"gt","","",29,[[["constant",4]]]],[11,"ge","","",29,[[["constant",4]]]],[11,"partial_cmp","","",27,[[["structdecl",3]],[["option",4],["ordering",4]]]],[11,"lt","","",27,[[["structdecl",3]]]],[11,"le","","",27,[[["structdecl",3]]]],[11,"gt","","",27,[[["structdecl",3]]]],[11,"ge","","",27,[[["structdecl",3]]]],[11,"partial_cmp","","",31,[[["borrownode",4]],[["option",4],["ordering",4]]]],[11,"lt","","",31,[[["borrownode",4]]]],[11,"le","","",31,[[["borrownode",4]]]],[11,"gt","","",31,[[["borrownode",4]]]],[11,"ge","","",31,[[["borrownode",4]]]],[11,"fmt","stackless_bytecode_generator::annotations","",0,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::borrow_analysis","",1,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::dataflow_analysis","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::function_target","",13,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::function_target_pipeline","",15,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::reaching_def_analysis","",25,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::stackless_bytecode","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::function_target","",12,[[["formatter",3]],["result",6]]],[11,"fmt","stackless_bytecode_generator::stackless_bytecode","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"hash","","",33,[[]]],[11,"hash","","",34,[[]]],[11,"hash","","",35,[[]]]],"p":[[3,"Annotations"],[3,"BorrowInfo"],[3,"BorrowInfoAtCodeOffset"],[3,"BorrowAnnotation"],[3,"BorrowAnalysisProcessor"],[3,"BlockState"],[4,"JoinResult"],[8,"AbstractDomain"],[8,"TransferFunctions"],[8,"DataflowAnalysis"],[3,"EliminateImmRefsProcessor"],[3,"EliminateMutRefsProcessor"],[3,"FunctionTarget"],[3,"FunctionTargetData"],[8,"FunctionTargetProcessor"],[3,"FunctionTargetsHolder"],[3,"FunctionTargetPipeline"],[3,"LifetimeAnnotation"],[3,"LifetimeAnalysisProcessor"],[3,"LiveVarInfoAtCodeOffset"],[3,"LiveVarAnnotation"],[3,"LiveVarAnalysisProcessor"],[3,"PackrefInstrumentation"],[3,"PackrefAnalysisProcessor"],[3,"PackrefAnnotation"],[4,"Def"],[3,"ReachingDefProcessor"],[3,"StructDecl"],[4,"AssignKind"],[4,"Constant"],[4,"Operation"],[4,"BorrowNode"],[4,"Bytecode"],[3,"Label"],[3,"AttrId"],[3,"SpecBlockId"],[3,"StacklessBytecodeGenerator"],[3,"StacklessControlFlowGraph"],[3,"WritebackAnalysisProcessor"],[3,"WritebackAnnotation"],[3,"EliminateImmRefs"],[3,"EliminateMutRefs"],[3,"PackrefAnalysis"],[3,"ReachingDefAnnotation"],[3,"BorrowNodeDisplay"],[3,"BytecodeDisplay"],[3,"OperationDisplay"],[3,"WritebackAnalysis"]]},\
"state_synchronizer":{"doc":"Used to perform catching up between nodes for committed…","i":[[3,"StateSyncClient","state_synchronizer","",null,null],[3,"StateSynchronizer","","",null,null],[3,"SynchronizerState","","The state distinguishes between the following fields: *…",null,null],[12,"highest_local_li","","",0,null],[12,"synced_trees","","",0,null],[12,"trusted_epoch","","",0,null],[0,"network","","Interface between StateSynchronizer and Network layers.",null,null],[3,"StateSynchronizerSender","state_synchronizer::network","The interface from StateSynchronizer to Networking layer.",null,null],[4,"StateSynchronizerMsg","","StateSynchronizer network messages",null,null],[13,"GetChunkRequest","","",1,null],[13,"GetChunkResponse","","",1,null],[5,"add_to_network","","",null,[[["networkbuilder",3]]]],[6,"StateSynchronizerEvents","","The interface from Network to StateSynchronizer layer.",null,null],[11,"new","","",2,[[["connectionrequestsender",3],["peermanagerrequestsender",3]]]],[11,"send_to","","",2,[[["statesynchronizermsg",4],["peerid",3]],[["networkerror",3],["result",4]]]],[11,"bootstrap","state_synchronizer","Setup state synchronizer. spawns coordinator and…",3,[[["chunkexecutor",8],["vec",3],["sender",3],["dbreader",8],["box",3],["reconfigsubscription",6],["commitnotification",3],["nodeconfig",3],["vec",3],["waypoint",3],["arc",3]]]],[11,"bootstrap_with_executor_proxy","","",3,[[["upstreamconfig",3],["option",4],["sender",3],["executorproxytrait",8],["roletype",4],["commitnotification",3],["waypoint",3],["vec",3],["runtime",3],["statesyncconfig",3]]]],[11,"create_client","","",3,[[],[["statesyncclient",3],["arc",3]]]],[11,"wait_until_initialized","","The function returns a future that is fulfilled when the…",3,[[]]],[11,"sync_to","","Sync validator\'s state to target. In case of success…",4,[[["ledgerinfowithsignatures",4]]]],[11,"commit","","Notifies state synchronizer about new version",4,[[["vec",3],["vec",3],["contractevent",4],["transaction",4]]]],[11,"get_state","","Returns information about StateSynchronizer internal state",4,[[]]],[11,"new","","",0,[[["ledgerinfowithsignatures",4],["epochstate",3],["executedtrees",3]]]],[11,"highest_version_in_local_storage","","The highest available version in the local storage (even…",0,[[]]],[11,"epoch","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","state_synchronizer::network","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"clone","","",1,[[],["statesynchronizermsg",4]]],[11,"clone","","",2,[[],["statesynchronizersender",3]]],[11,"clone","state_synchronizer","",0,[[],["synchronizerstate",3]]],[11,"fmt","state_synchronizer::network","",1,[[["formatter",3]],["result",6]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]]],"p":[[3,"SynchronizerState"],[4,"StateSynchronizerMsg"],[3,"StateSynchronizerSender"],[3,"StateSynchronizer"],[3,"StateSyncClient"]]},\
"stdlib":{"doc":"","i":[[5,"filter_move_files","stdlib","",null,[[]]],[5,"stdlib_files","","",null,[[],[["string",3],["vec",3]]]],[5,"build_stdlib","","",null,[[],[["vec",3],["verifiedmodule",3]]]],[5,"compile_script","","",null,[[["string",3]],["vec",3]]],[5,"save_binary","","",null,[[["path",3]]]],[5,"build_stdlib_doc","","",null,[[]]],[5,"build_transaction_script_doc","","",null,[[["string",3]]]],[17,"STD_LIB_DIR","","",null,null],[17,"MOVE_EXTENSION","","",null,null],[17,"TRANSACTION_SCRIPTS","","",null,null],[17,"COMPILED_OUTPUT_PATH","","The output path under which compiled files will be put",null,null],[17,"COMPILED_STDLIB_NAME","","The file name for the compiled stdlib",null,null],[17,"COMPILED_EXTENSION","","The extension for compiled files",null,null],[17,"DEBUG_MODULE_FILE_NAME","","The file name of the debug module",null,null],[17,"STD_LIB_DOC_DIR","","The output path for stdlib documentation.",null,null],[17,"TRANSACTION_SCRIPTS_DOC_DIR","","The output path for transaction script documentation.",null,null]],"p":[]},\
"storage_client":{"doc":"","i":[[3,"StorageClient","storage_client","",null,null],[11,"new","","",0,[[["socketaddr",4]]]],[11,"get_account_state_with_proof_by_version","","",0,[[["version",6],["accountaddress",3]],[["error",4],["result",4]]]],[11,"get_startup_info","","",0,[[],[["option",4],["error",4],["result",4]]]],[11,"save_transactions","","",0,[[["vec",3],["option",4],["transactiontocommit",3],["version",6],["ledgerinfowithsignatures",4]],[["result",4],["error",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"get_account_state_with_proof_by_version","","",0,[[["accountaddress",3]],["result",6]]],[11,"get_startup_info","","",0,[[],[["option",4],["result",6]]]],[11,"get_latest_account_state","","",0,[[["accountaddress",3]],[["option",4],["result",6]]]],[11,"get_latest_ledger_info","","",0,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"get_txn_by_account","","",0,[[["accountaddress",3]],[["result",6],["option",4]]]],[11,"get_transactions","","",0,[[],[["result",6],["transactionlistwithproof",3]]]],[11,"get_events","","",0,[[["eventkey",3]],[["vec",3],["result",6]]]],[11,"get_state_proof","","",0,[[],["result",6]]],[11,"get_state_proof_with_ledger_info","","",0,[[["ledgerinfowithsignatures",4]],["result",6]]],[11,"get_account_state_with_proof","","",0,[[["version",6],["accountaddress",3]],[["result",6],["accountstatewithproof",3]]]],[11,"get_latest_state_root","","",0,[[],["result",6]]],[11,"get_latest_tree_state","","",0,[[],[["treestate",3],["result",6]]]],[11,"get_epoch_change_ledger_infos","","",0,[[],[["result",6],["epochchangeproof",3]]]],[11,"get_ledger_info","","",0,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"save_transactions","","",0,[[["option",4],["version",6],["ledgerinfowithsignatures",4]],["result",6]]]],"p":[[3,"StorageClient"]]},\
"storage_interface":{"doc":"","i":[[3,"StartupInfo","storage_interface","",null,null],[12,"latest_ledger_info","","The latest ledger info.",0,null],[12,"latest_epoch_state","","If the above ledger info doesn\'t carry a validator set,…",0,null],[12,"committed_tree_state","","",0,null],[12,"synced_tree_state","","",0,null],[3,"TreeState","","",null,null],[12,"num_transactions","","",1,null],[12,"ledger_frozen_subtree_hashes","","",1,null],[12,"account_state_root_hash","","",1,null],[3,"DbReaderWriter","","",null,null],[12,"reader","","",2,null],[12,"writer","","",2,null],[3,"GetAccountStateWithProofByVersionRequest","","",null,null],[12,"address","","The access path to query with.",3,null],[12,"version","","The version the query is based on.",3,null],[3,"SaveTransactionsRequest","","",null,null],[12,"txns_to_commit","","",4,null],[12,"first_version","","",4,null],[12,"ledger_info_with_signatures","","",4,null],[4,"Error","","",null,null],[13,"ServiceError","","",5,null],[12,"error","storage_interface::Error","",6,null],[13,"SerializationError","storage_interface","",5,null],[4,"StorageRequest","","Network types for storage service",null,null],[13,"GetAccountStateWithProofByVersionRequest","","",7,null],[13,"GetStartupInfoRequest","","",7,null],[13,"SaveTransactionsRequest","","",7,null],[0,"mock","","This module provides mock dbreader for tests.",null,null],[3,"MockDbReader","storage_interface::mock","This is a mock of the dbreader in tests.",null,null],[0,"state_view","storage_interface","",null,null],[3,"VerifiedStateView","storage_interface::state_view","`VerifiedStateView` is like a snapshot of the global state…",null,null],[11,"new","","Constructs a [`VerifiedStateView`] with persistent state…",8,[[["arc",3],["sparsemerkletree",3],["dbreader",8],["option",4],["hashvalue",3],["version",6]]]],[8,"DbReader","storage_interface","Trait that is implemented by a DB that supports certain…",null,null],[11,"update_to_latest_ledger","","",9,[[["vec",3],["requestitem",4],["version",6]],["result",6]]],[10,"get_epoch_change_ledger_infos","","See [`LibraDB::get_epoch_change_ledger_infos`].",9,[[],[["result",6],["epochchangeproof",3]]]],[10,"get_transactions","","See [`LibraDB::get_transactions`].",9,[[["version",6]],[["result",6],["transactionlistwithproof",3]]]],[10,"get_events","","Returns events by given event key",9,[[["eventkey",3]],[["vec",3],["result",6]]]],[10,"get_latest_account_state","","See [`LibraDB::get_latest_account_state`].",9,[[["accountaddress",3]],[["result",6],["option",4]]]],[10,"get_latest_ledger_info","","Returns the latest ledger info.",9,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"get_latest_version","","Returns the latest ledger info.",9,[[],[["result",6],["version",6]]]],[11,"get_latest_commit_metadata","","Returns the latest version and committed block timestamp",9,[[],["result",6]]],[10,"get_startup_info","","Gets information needed from storage during the main node…",9,[[],[["result",6],["option",4]]]],[10,"get_txn_by_account","","",9,[[["accountaddress",3],["version",6]],[["result",6],["option",4]]]],[10,"get_state_proof_with_ledger_info","","Returns proof of new state for a given ledger info with…",9,[[["ledgerinfowithsignatures",4]],["result",6]]],[10,"get_state_proof","","Returns proof of new state relative to version known to…",9,[[],["result",6]]],[10,"get_account_state_with_proof","","Returns the account state corresponding to the given…",9,[[["accountaddress",3],["version",6]],[["result",6],["accountstatewithproof",3]]]],[10,"get_account_state_with_proof_by_version","","",9,[[["accountaddress",3],["version",6]],["result",6]]],[10,"get_latest_state_root","","See [`LibraDB::get_latest_state_root`].",9,[[],["result",6]]],[10,"get_latest_tree_state","","Gets the latest TreeState no matter if db has been…",9,[[],[["result",6],["treestate",3]]]],[10,"get_ledger_info","","Get the ledger info of the epoch that `known_version`…",9,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[8,"DbWriter","","Trait that is implemented by a DB that supports certain…",null,null],[10,"save_transactions","","Persist transactions. Called by the executor module when…",10,[[["ledgerinfowithsignatures",4],["option",4],["version",6]],["result",6]]],[11,"new","","",0,[[["option",4],["ledgerinfowithsignatures",4],["treestate",3],["option",4],["epochstate",3]]]],[11,"get_epoch_state","","",0,[[],["epochstate",3]]],[11,"new","","",1,[[["leafcount",6],["vec",3],["hashvalue",3]]]],[11,"is_empty","","",1,[[]]],[11,"new","","",2,[[["dbreader",8],["dbwriter",8]]]],[11,"wrap","","",2,[[["dbreader",8],["dbwriter",8]]]],[11,"new","","Constructor.",3,[[["accountaddress",3],["version",6]]]],[11,"new","","Constructor.",4,[[["vec",3],["transactiontocommit",3],["ledgerinfowithsignatures",4],["option",4],["version",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"test_only_hash","","",0,[[],["hashvalue",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"test_only_hash","","",1,[[],["hashvalue",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"test_only_hash","","",3,[[],["hashvalue",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"test_only_hash","","",4,[[],["hashvalue",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"test_only_hash","","",5,[[],["hashvalue",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"test_only_hash","","",7,[[],["hashvalue",3]]],[11,"vzip","","",7,[[]]],[11,"from","storage_interface::mock","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","storage_interface::state_view","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"get_epoch_change_ledger_infos","storage_interface::mock","",11,[[],[["result",6],["epochchangeproof",3]]]],[11,"get_transactions","","",11,[[["version",6]],[["result",6],["transactionlistwithproof",3]]]],[11,"get_events","","Returns events by given event key",11,[[["eventkey",3]],[["vec",3],["result",6]]]],[11,"get_latest_account_state","","",11,[[["accountaddress",3]],[["result",6],["option",4]]]],[11,"get_latest_ledger_info","","Returns the latest ledger info.",11,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"get_startup_info","","",11,[[],[["result",6],["option",4]]]],[11,"get_txn_by_account","","",11,[[["accountaddress",3],["version",6]],[["result",6],["option",4]]]],[11,"get_state_proof_with_ledger_info","","",11,[[["ledgerinfowithsignatures",4]],["result",6]]],[11,"get_state_proof","","",11,[[],["result",6]]],[11,"get_account_state_with_proof","","",11,[[["accountaddress",3],["version",6]],[["result",6],["accountstatewithproof",3]]]],[11,"get_account_state_with_proof_by_version","","",11,[[["accountaddress",3],["version",6]],["result",6]]],[11,"get_latest_state_root","","",11,[[],["result",6]]],[11,"get_latest_tree_state","","",11,[[],[["result",6],["treestate",3]]]],[11,"get_ledger_info","","",11,[[],[["ledgerinfowithsignatures",4],["result",6]]]],[11,"from","storage_interface","",5,[[["error",3]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","","",5,[[["error",4]]]],[11,"from","","",2,[[]]],[11,"into","storage_interface::state_view","",8,[[]]],[11,"clone","storage_interface","",0,[[],["startupinfo",3]]],[11,"clone","","",1,[[],["treestate",3]]],[11,"clone","","",2,[[],["dbreaderwriter",3]]],[11,"clone","","",7,[[],["storagerequest",4]]],[11,"clone","","",3,[[],["getaccountstatewithproofbyversionrequest",3]]],[11,"clone","","",4,[[],["savetransactionsrequest",3]]],[11,"eq","","",0,[[["startupinfo",3]]]],[11,"ne","","",0,[[["startupinfo",3]]]],[11,"eq","","",1,[[["treestate",3]]]],[11,"ne","","",1,[[["treestate",3]]]],[11,"eq","","",5,[[["error",4]]]],[11,"ne","","",5,[[["error",4]]]],[11,"eq","","",3,[[["getaccountstatewithproofbyversionrequest",3]]]],[11,"ne","","",3,[[["getaccountstatewithproofbyversionrequest",3]]]],[11,"eq","","",4,[[["savetransactionsrequest",3]]]],[11,"ne","","",4,[[["savetransactionsrequest",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"serialize","","",7,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"deserialize","","",7,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"get","storage_interface::state_view","",8,[[["accesspath",3]],[["result",6],["option",4]]]],[11,"multi_get","","",8,[[],[["result",6],["vec",3]]]],[11,"is_genesis","","",8,[[]]]],"p":[[3,"StartupInfo"],[3,"TreeState"],[3,"DbReaderWriter"],[3,"GetAccountStateWithProofByVersionRequest"],[3,"SaveTransactionsRequest"],[4,"Error"],[13,"ServiceError"],[4,"StorageRequest"],[3,"VerifiedStateView"],[8,"DbReader"],[8,"DbWriter"],[3,"MockDbReader"]]},\
"storage_service":{"doc":"This crate implements the storage service.","i":[[3,"StorageService","storage_service","",null,null],[5,"start_storage_service_with_db","","Starts storage service with a given LibraDB",null,[[["arc",3],["nodeconfig",3],["libradb",3]],["joinhandle",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["storageservice",3]]]],"p":[[3,"StorageService"]]},\
"stream_ratelimiter":{"doc":"`RateLimiter` converts any [`futures::stream::Stream`]…","i":[[3,"RateLimiter","stream_ratelimiter","Stream for the `RateLimit::ratelimit` function.",null,null],[8,"RateLimit","","Config parameters for a rate-limiter. `capacity`: Max…",null,null],[11,"ratelimit","","",0,[[["duration",3]],["ratelimiter",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"try_poll_next","","",1,[[["pin",3],["context",3]],[["poll",4],["option",4]]]],[11,"poll_next","","",1,[[["context",3],["pin",3]],[["poll",4],["option",4]]]],[11,"drop","","",1,[[["pin",3]]]]],"p":[[8,"RateLimit"],[3,"RateLimiter"]]},\
"subscription_service":{"doc":"Generic pub/sub service framework","i":[[3,"SubscriptionService","subscription_service","",null,null],[3,"SubscriptionBundle","","",null,null],[12,"configs","","",0,null],[12,"events","","",0,null],[6,"ReconfigSubscription","","A subscription service for on-chain reconfiguration…",null,null],[11,"subscribe","","Constructs an subscription object for `items` Returns the…",1,[[]]],[11,"publish","","",1,[[],["result",6]]],[11,"subscribed_items","","",1,[[]]],[11,"new","","",0,[[["configid",3],["vec",3],["eventkey",3],["vec",3]]]],[11,"subscribe_all","","",1,[[["configid",3],["vec",3],["eventkey",3],["vec",3]]]],[11,"subscribe_all","","",2,[[["configid",3],["vec",3],["eventkey",3],["vec",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["subscriptionbundle",3]]]],"p":[[3,"SubscriptionBundle"],[3,"SubscriptionService"],[6,"ReconfigSubscription"]]},\
"test_generation":{"doc":"","i":[[4,"Status","test_generation","",null,null],[13,"VerificationFailure","","",0,null],[13,"ExecutionFailure","","",0,null],[13,"Valid","","",0,null],[5,"module_frame_generation","","",null,[[["option",4],["status",4],["sender",3],["compiledmodulemut",3],["receiver",3]]]],[5,"bytecode_generation","","",null,[[["string",3],["option",4],["status",4],["stdrng",3],["receiver",3],["compiledmodulemut",3],["sender",3]]]],[5,"run_generation","","Run generate_bytecode for the range passed in and test…",null,[[["args",3]]]],[5,"kind","","",null,[[["signaturetoken",4]],["kind",4]]],[0,"abstract_state","","",null,null],[3,"AbstractValue","test_generation::abstract_state","This models a value on the stack or in the locals",null,null],[12,"token","","Represents the type of the value",1,null],[12,"kind","","Represents the kind of the value",1,null],[3,"CallGraph","","",null,null],[3,"InstantiableModule","","During the generation of a bytecode sequence, specific…",null,null],[12,"module","","",2,null],[3,"AbstractState","","An AbstractState represents an abstract view of the…",null,null],[12,"instantiation","","A vector of type kinds for any generic function type…",3,null],[12,"module","","The module state",3,null],[12,"acquires_global_resources","","The global resources acquired by the function…",3,null],[12,"call_graph","","",3,null],[4,"BorrowState","","The BorrowState denotes whether a local is `Available` or…",null,null],[13,"Available","","",4,null],[13,"Unavailable","","",4,null],[4,"Mutability","","This models the mutability of a reference",null,null],[13,"Mutable","","Represents a mutable reference",5,null],[13,"Immutable","","Represents an immutable reference",5,null],[13,"Either","","When we don\'t need to specify whether the reference is…",5,null],[11,"new_primitive","","Create a new primitive `AbstractValue` given its type; the…",1,[[["signaturetoken",4]],["abstractvalue",3]]],[11,"new_reference","","Create a new reference `AbstractValue` given its type and…",1,[[["signaturetoken",4],["kind",4]],["abstractvalue",3]]],[11,"new_struct","","Create a new struct `AbstractValue` given its type and kind",1,[[["signaturetoken",4],["kind",4]],["abstractvalue",3]]],[11,"new_value","","",1,[[["signaturetoken",4],["kind",4]],["abstractvalue",3]]],[11,"is_generic","","Predicate on whether the type of the abstract value is…",1,[[]]],[11,"new","","",6,[[]]],[11,"add_call","","",6,[[["functionhandleindex",3]]]],[11,"can_call","","",6,[[["functionhandleindex",3]],[["functionhandleindex",3],["vec",3]]]],[11,"max_calling_depth","","",6,[[["functionhandleindex",3]]]],[11,"call_depth","","None if recursive, Some(index) if non-recursive, and index…",6,[[["functionhandleindex",3]],["option",4]]],[11,"new","","",2,[[["compiledmodule",3]]]],[11,"add_instantiation","","If the `instantiant` is not in the `instantiations` table,…",2,[[["vec",3],["signaturetoken",4]],["signatureindex",3]]],[11,"add_struct_instantiation","","If the `instantiant` is not in the `struct_instantiations`…",2,[[["structdefinstantiation",3]],["structdefinstantiationindex",3]]],[11,"add_function_instantiation","","If the `instantiant` is not in the…",2,[[["functioninstantiation",3]],["functioninstantiationindex",3]]],[11,"add_field_instantiation","","If the `instantiant` is not in the `field_instantiations`…",2,[[["fieldinstantiation",3]],["fieldinstantiationindex",3]]],[11,"instantiantiation_at","","Returns the type instantiation at `index`. Errors if the…",2,[[["signatureindex",3]],["vec",3]]],[11,"struct_instantiantiation_at","","Returns the struct instantiation at `index`. Errors if the…",2,[[["structdefinstantiationindex",3]],["structdefinstantiation",3]]],[11,"function_instantiantiation_at","","Returns the struct instantiation at `index`. Errors if the…",2,[[["functioninstantiationindex",3]],["functioninstantiation",3]]],[11,"field_instantiantiation_at","","Returns the struct instantiation at `index`. Errors if the…",2,[[["fieldinstantiationindex",3]],["fieldinstantiation",3]]],[11,"instantiate","","Consumes self, and adds the instantiations that have been…",2,[[],["compiledmodulemut",3]]],[11,"new","","Create a new AbstractState with empty stack, locals, and…",3,[[],["abstractstate",3]]],[11,"from_locals","","Create a new AbstractState given a list of…",3,[[["callgraph",3],["structdefinitionindex",3],["hashmap",3],["compiledmodulemut",3],["vec",3],["vec",3],["kind",4]],["abstractstate",3]]],[11,"register_copy","","Get the register value",3,[[],[["abstractvalue",3],["option",4]]]],[11,"register_move","","Get the register value and set it to `None`",3,[[],[["abstractvalue",3],["option",4]]]],[11,"register_set","","Set the register value and set it to `None`",3,[[["abstractvalue",3]]]],[11,"stack_push","","Add a `AbstractValue` to the stack",3,[[["abstractvalue",3]]]],[11,"stack_push_register","","Add a `AbstractValue` to the stack from the register If…",3,[[],[["vmerror",3],["result",4]]]],[11,"stack_pop","","Remove an `AbstractValue` from the stack if it exists to…",3,[[],[["vmerror",3],["result",4]]]],[11,"stack_peek","","Get the `AbstractValue` at index `index` on the stack if…",3,[[],[["abstractvalue",3],["option",4]]]],[11,"stack_len","","Get the length of the stack.",3,[[]]],[11,"local_exists","","Check if the local at index `i` exists",3,[[]]],[11,"local_get","","Get the local at index `i` if it exists",3,[[],["option",4]]],[11,"local_take","","Place the local at index `i` if it exists into the…",3,[[],[["vmerror",3],["result",4]]]],[11,"local_take_borrow","","Place a reference to the local at index `i` if it exists…",3,[[["mutability",4]],[["vmerror",3],["result",4]]]],[11,"local_set","","Set the availability of the local at index `i` If it does…",3,[[["borrowstate",4]],[["vmerror",3],["result",4]]]],[11,"local_availability_is","","Check whether a local is in a particular `BorrowState` If…",3,[[["borrowstate",4]],[["vmerror",3],["result",4]]]],[11,"local_kind_is","","Check whether a local is in a particular `Kind` If the…",3,[[["kind",4]],[["vmerror",3],["result",4]]]],[11,"local_insert","","Insert a local at index `i` as `Available`",3,[[["borrowstate",4],["abstractvalue",3]]]],[11,"local_place","","Insert a local at index `i` as `Available` from the…",3,[[],[["vmerror",3],["result",4]]]],[11,"get_locals","","Get all of the locals",3,[[],["hashmap",3]]],[11,"abort","","Set the abstract state to be `aborted` when a precondition…",3,[[]]],[11,"has_aborted","","Whether the state is aborted",3,[[]]],[11,"allow_control_flow","","Set the abstract state to allow generation of control flow…",3,[[]]],[11,"is_control_flow_allowed","","Predicate determining if control flow instructions can be…",3,[[]]],[11,"is_final","","The final state is one where the stack is empty",3,[[]]],[0,"borrow_graph","test_generation","",null,null],[3,"BorrowGraph","test_generation::borrow_graph","The `BorrowGraph` stores information sufficient to…",null,null],[4,"EdgeType","","The `EdgeType` is either weak or strong. A weak edge…",null,null],[13,"Weak","","",7,null],[13,"Strong","","",7,null],[11,"new","","Construct a new `BorrowGraph` given the number of locals…",8,[[],["borrowgraph",3]]],[11,"fresh_partition","","Add a new partition to the graph containing nonce `n` This…",8,[[],[["string",3],["result",4]]]],[11,"partition_mutability","","Determine whether a partition is mutable, immutable, or…",8,[[],[["mutability",4],["string",3],["result",4]]]],[11,"partition_freezable","","Determine whether the given partition is freezable. This…",8,[[],[["result",4],["string",3]]]],[11,"edges_consistent","","Determine whether two edges are consistent; i.e. whether…",8,[[]]],[0,"bytecode_generator","test_generation","",null,null],[3,"FunctionGenerationContext","test_generation::bytecode_generator","Context containing information about a function",null,null],[12,"function_handle_index","","",9,null],[12,"starting_call_height","","",9,null],[12,"locals_len","","",9,null],[12,"bytecode_len","","",9,null],[3,"BytecodeGenerator","","Generates a sequence of bytecode instructions. This…",null,null],[11,"new","","",9,[[["functionhandleindex",3]]]],[11,"incr_instruction_count","","",9,[[],["option",4]]],[11,"new","","The `BytecodeGenerator` is instantiated with a seed to use…",10,[[["stdrng",3]]]],[11,"apply_instruction","","Transition an abstract state, `state` to the next state…",10,[[["functiongenerationcontext",3],["abstractstate",3],["bytecode",4],["vec",3]],[["abstractstate",3],["option",4]]]],[11,"generate_block","","Given a valid starting state `abstract_state_in`, generate…",10,[[["abstractstate",3],["functiongenerationcontext",3],["compiledmodulemut",3]],["option",4]]],[11,"generate","","Generate the body of a function definition given a set of…",10,[[["functiongenerationcontext",3],["functionhandle",3],["compiledmodulemut",3],["callgraph",3]],[["vec",3],["option",4]]]],[11,"generate_module","","",10,[[["compiledmodulemut",3]],[["compiledmodulemut",3],["option",4]]]],[11,"inhabit_with_bytecode_seq","","Generate a sequence of instructions whose overall effect…",10,[[["instantiablemodule",3],["signaturetoken",4]],[["bytecode",4],["vec",3]]]],[0,"config","test_generation","",null,null],[3,"Args","test_generation::config","Command line arguments for the tool",null,null],[12,"num_iterations","","The optional number of programs that will be generated. If…",11,null],[12,"output_path","","Path where a serialized module should be saved. If `None`,…",11,null],[12,"seed","","The optional seed used for test generation.",11,null],[12,"num_threads","","The optional number of threads to use for test generation.",11,null],[5,"module_generation_settings","","The module generation settings that are used for…",null,[[],["modulegeneratoroptions",3]]],[17,"MUTATION_TOLERANCE","","This defines how tolerant the generator will be about…",null,null],[17,"MAX_CFG_BLOCKS","","This defines the maximum number of blocks that will be…",null,null],[17,"NEGATE_PRECONDITIONS","","Whether preconditions will be negated to generate invalid…",null,null],[17,"NEGATION_PROBABILITY","","The probability that preconditions will be negated for a…",null,null],[17,"ALLOW_MEMORY_UNSAFE","","Whether generation of instructions that require borrow…",null,null],[17,"RUN_ON_VM","","Whether the generated programs should be run on the VM…",null,null],[17,"EXECUTE_UNVERIFIED_MODULE","","Whether generated modules will be executed even if they…",null,null],[17,"GAS_METERING","","Whether gas will be metered when running generated…",null,null],[17,"CALL_STACK_LIMIT","","Call stack height limit. This is defined in the VM, and is…",null,null],[17,"VALUE_STACK_LIMIT","","The value stack size limit. This is defined in the VM and…",null,null],[17,"INHABITATION_INSTRUCTION_LIMIT","","Certain randomly generated types can lead to extremely…",null,null],[0,"control_flow_graph","test_generation","",null,null],[3,"BasicBlock","test_generation::control_flow_graph","This represents a basic block in a control flow graph",null,null],[3,"CFG","","A control flow graph",null,null],[11,"new","","",12,[[],["basicblock",3]]],[11,"get_locals_in","","Get the locals coming into the block",12,[[],["hashmap",3]]],[11,"get_locals_out","","Get the locals going out of the block",12,[[],["hashmap",3]]],[11,"set_instructions","","Set the list of instructions that comprise the block",12,[[["bytecode",4],["vec",3]]]],[11,"new","","Construct a control flow graph that contains empty basic…",13,[[["signature",3],["stdrng",3]],["cfg",3]]],[11,"get_basic_blocks","","Get a reference to all of the basic blocks of the CFG",13,[[],["hashmap",3]]],[11,"get_basic_blocks_mut","","Get a mutable reference to all of the basic blocks of the…",13,[[],["hashmap",3]]],[11,"get_children_ids","","Retrieve the block IDs of all children of the given basic…",13,[[],["vec",3]]],[11,"num_children","","Retrieve the number of children the given basic block…",13,[[]]],[11,"get_parent_ids","","Retrieve the block IDs of all parents of the given basic…",13,[[],["vec",3]]],[11,"num_parents","","Retrieve the number of parents the given basic block…",13,[[]]],[11,"serialize_block_order","","Decide the serialization order of the blocks in the CFG",13,[[],["vec",3]]],[11,"serialize","","Serialize the control flow graph into a sequence of…",13,[[],[["bytecode",4],["vec",3]]]],[0,"error","test_generation","",null,null],[3,"VMError","test_generation::error","This struct represents an error that is returned during…",null,null],[11,"new","","",14,[[["string",3]],["vmerror",3]]],[0,"summaries","test_generation","",null,null],[3,"Summary","test_generation::summaries","The `Summary` of a bytecode instruction contains a list of…",null,null],[12,"preconditions","","",15,null],[12,"effects","","",15,null],[4,"Effects","","",null,null],[13,"NoTyParams","","",16,null],[13,"TyParams","","",16,null],[13,"TyParamsCall","","",16,null],[5,"instruction_summary","","Return the `Summary` for a bytecode instruction,…",null,[[["bytecode",4]],["summary",3]]],[6,"Precondition","","A `Precondition` is a boolean predicate on an…",null,null],[6,"NonInstantiableEffect","","A `Effect` is a function that transforms on…",null,null],[6,"InstantiableEffect","","",null,null],[6,"FunctionInstantiableEffect","","",null,null],[0,"transitions","test_generation","",null,null],[3,"Subst","test_generation::transitions","A substitution is a mapping from type formal index to the…",null,null],[12,"subst","","",17,null],[4,"StackBinOpResult","","",null,null],[13,"Left","","",18,null],[13,"Right","","",18,null],[13,"Other","","",18,null],[5,"kind_for_token","","Given a signature token, returns the kind of this token in…",null,[[["abstractstate",3],["signaturetoken",4]],["kind",4]]],[5,"kinds_for_instantiation","","Given a locals signature index, determine the kind for…",null,[[["abstractstate",3]],[["kind",4],["vec",3]]]],[5,"stack_has_integer","","Determine whether the stack contains an integer value at…",null,[[["abstractstate",3]]]],[5,"stack_top_is_castable_to","","",null,[[["abstractstate",3],["signaturetoken",4]]]],[5,"stack_kind_is","","Determine the abstract value at `index` is of the given…",null,[[["abstractstate",3],["kind",4]]]],[5,"stack_kind_is_subkind","","Determine if the abstract value at `index` has a kind that…",null,[[["abstractstate",3],["kind",4]]]],[5,"local_kind_is","","Check whether the local at `index` is of the given kind",null,[[["abstractstate",3],["kind",4]]]],[5,"stack_has","","Determine whether the stack is at least of size `index`.…",null,[[["abstractstate",3],["option",4],["abstractvalue",3]]]],[5,"stack_has_polymorphic_eq","","Determine whether two tokens on the stack have the same type",null,[[["abstractstate",3]]]],[5,"stack_local_polymorphic_eq","","Determine whether an abstract value on the stack and a…",null,[[["abstractstate",3]]]],[5,"local_exists","","Check whether the local at `index` exists",null,[[["abstractstate",3]]]],[5,"local_availability_is","","Check whether the local at `index` is of the given…",null,[[["abstractstate",3],["borrowstate",4]]]],[5,"stack_ref_polymorphic_eq","","Determine whether an abstract value on the stack that is a…",null,[[["abstractstate",3]]]],[5,"stack_pop","","Pop from the top of the stack.",null,[[["abstractstate",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_bin_op","","Perform a binary operation using the top two values on the…",null,[[["abstractstate",3],["stackbinopresult",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_push","","Push given abstract_value to the top of the stack.",null,[[["abstractstate",3],["abstractvalue",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_push_register","","Push to the top of the stack from the register.",null,[[["abstractstate",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"local_set","","Set the availability of local at `index`",null,[[["abstractstate",3],["borrowstate",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"local_take","","Put copy of the local at `index` in register",null,[[["abstractstate",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"local_take_borrow","","Put reference to local at `index` in register",null,[[["abstractstate",3],["mutability",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"local_place","","Insert the register value into the locals at `index`",null,[[["abstractstate",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_satisfies_struct_instantiation","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]]]],[5,"stack_satisfies_struct_signature","","Determine whether the struct at the given index can be…",null,[[["abstractstate",3],["structdefinitionindex",3],["signatureindex",3],["option",4]]]],[5,"get_struct_instantiation_for_state","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]]]],[5,"stack_has_struct","","Determine if a struct (of the given signature) is at the…",null,[[["abstractstate",3],["structdefinitionindex",3]]]],[5,"stack_has_struct_inst","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]]]],[5,"struct_is_resource","","Determine if a struct at the given index is a resource",null,[[["abstractstate",3],["structdefinitionindex",3]]]],[5,"struct_inst_is_resource","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]]]],[5,"stack_struct_has_field_inst","","",null,[[["abstractstate",3],["fieldinstantiationindex",3]]]],[5,"stack_struct_has_field","","",null,[[["abstractstate",3],["fieldhandleindex",3]]]],[5,"stack_has_reference","","Determine whether the stack has a reference at `index`…",null,[[["abstractstate",3],["mutability",4]]]],[5,"stack_struct_inst_popn","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_struct_popn","","Pop the number of stack values required to construct the…",null,[[["abstractstate",3],["structdefinitionindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"create_struct_from_inst","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"create_struct","","Construct a struct from abstract values on the stack The…",null,[[["abstractstate",3],["structdefinitionindex",3],["signatureindex",3],["option",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_unpack_struct_instantiation","","",null,[[["abstractstate",3]]]],[5,"stack_unpack_struct_inst","","",null,[[["abstractstate",3],["structdefinstantiationindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_unpack_struct","","Push the fields of a struct as `AbstractValue`s to the stack",null,[[["abstractstate",3],["structdefinitionindex",3],["signatureindex",3],["option",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"struct_ref_instantiation","","",null,[[["abstractstate",3]],[["vec",3],["vmerror",3],["result",4]]]],[5,"stack_struct_borrow_field","","Push the field at `field_index` of a struct as an…",null,[[["abstractstate",3],["fieldhandleindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_struct_borrow_field_inst","","",null,[[["abstractstate",3],["fieldinstantiationindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"register_dereference","","Dereference the value stored in the register. If the value…",null,[[["abstractstate",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_push_register_borrow","","Push a reference to a register value with the given…",null,[[["abstractstate",3],["mutability",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_satisfies_function_signature","","Determine whether the function at the given index can be…",null,[[["abstractstate",3],["functionhandleindex",3]]]],[5,"stack_satisfies_function_inst_signature","","",null,[[["abstractstate",3],["functioninstantiationindex",3]]]],[5,"function_can_acquire_resource","","Whether the function acquires any global resources or not",null,[[["abstractstate",3]]]],[5,"stack_function_call","","Simulate calling the function at `function_index`",null,[[["abstractstate",3],["functionhandleindex",3],["signatureindex",3],["option",4]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_function_inst_call","","",null,[[["abstractstate",3],["functioninstantiationindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"get_function_instantiation_for_state","","",null,[[["abstractstate",3],["functioninstantiationindex",3]]]],[5,"stack_function_popn","","Pop the number of stack values required to call the…",null,[[["abstractstate",3],["functionhandleindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"stack_function_inst_popn","","",null,[[["abstractstate",3],["functioninstantiationindex",3]],[["result",4],["abstractstate",3],["vmerror",3]]]],[5,"memory_safe","","TODO: This is a temporary function that represents memory…",null,[[["abstractstate",3],["option",4]]]],[11,"new","","",17,[[]]],[11,"check_and_add","","NB that the position of arguments here matters. We can…",17,[[["abstractstate",3],["signaturetoken",4]]]],[11,"instantiation","","Return the instantiation from the substitution that has…",17,[[],[["vec",3],["signaturetoken",4]]]],[14,"state_stack_has","test_generation","Wrapper for enclosing the arguments of `stack_has` so that…",null,null],[14,"state_stack_is_castable","","Determines if the type at the top of the abstract stack is…",null,null],[14,"state_stack_has_integer","","Wrapper for enclosing the arguments of `stack_has_integer`…",null,null],[14,"state_stack_kind_is","","Wrapper for enclosing the arguments of `stack_kind_is` so…",null,null],[14,"state_stack_has_polymorphic_eq","","Wrapper for for enclosing the arguments of…",null,null],[14,"state_stack_pop","","Wrapper for enclosing the arguments of `stack_pop` so that…",null,null],[14,"state_stack_push","","Wrapper for enclosing the arguments of `stack_push` so…",null,null],[14,"state_stack_push_register","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_local_polymorphic_eq","","Wrapper for enclosing the arguments of…",null,null],[14,"state_local_exists","","Wrapper for enclosing the arguments of `local_exists` so…",null,null],[14,"state_local_availability_is","","Wrapper for enclosing the arguments of…",null,null],[14,"state_local_kind_is","","Wrapper for enclosing the arguments of `local_kind_is` so…",null,null],[14,"state_local_set","","Wrapper for enclosing the arguments of `local_set` so that…",null,null],[14,"state_local_take","","Wrapper for enclosing the arguments of `local_take` so…",null,null],[14,"state_local_take_borrow","","Wrapper for enclosing the arguments of `local_take_borrow`…",null,null],[14,"state_local_place","","Wrapper for enclosing the arguments of `local_palce` so…",null,null],[14,"state_stack_ref_polymorphic_eq","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_satisfies_struct_signature","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_struct_inst_popn","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_struct_popn","","Wrapper for enclosing the arguments of `stack_struct_popn`…",null,null],[14,"state_create_struct","","Wrapper for enclosing the arguments of `stack_pack_struct`…",null,null],[14,"state_create_struct_from_inst","","",null,null],[14,"state_stack_has_struct","","Wrapper for enclosing the arguments of `stack_has_struct`…",null,null],[14,"state_stack_has_struct_inst","","",null,null],[14,"state_stack_unpack_struct","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_unpack_struct_inst","","",null,null],[14,"state_struct_is_resource","","Wrapper for enclosing the arguments of…",null,null],[14,"state_struct_inst_is_resource","","",null,null],[14,"state_stack_struct_has_field","","Wrapper for enclosing the arguments of `struct_has_field`…",null,null],[14,"state_stack_struct_has_field_inst","","",null,null],[14,"state_stack_struct_borrow_field","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_struct_borrow_field_inst","","",null,null],[14,"state_stack_has_reference","","Wrapper for enclosing the arguments of…",null,null],[14,"state_register_dereference","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_push_register_borrow","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_satisfies_function_signature","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_satisfies_function_inst_signature","","",null,null],[14,"state_stack_function_popn","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_function_inst_popn","","",null,null],[14,"state_stack_function_call","","Wrapper for enclosing the arguments of…",null,null],[14,"state_stack_function_inst_call","","",null,null],[14,"function_instantiation_for_state","","Determine the proper type instantiation for function call…",null,null],[14,"state_function_can_acquire_resource","","Wrapper for enclosing the arguments of…",null,null],[14,"state_memory_safe","","Wrapper for enclosing the arguments of `memory_safe` so…",null,null],[14,"state_never","","Predicate that is false for every state.",null,null],[14,"state_stack_bin_op","","",null,null],[14,"state_control_flow","","Predicate that is false for every state, unless control…",null,null],[14,"struct_instantiation_for_state","","Determine the proper type instantiation for struct in the…",null,null],[14,"unpack_instantiation_for_state","","Determine the proper type instantiation for struct in the…",null,null],[14,"with_ty_param","","A wrapper around type instantiation, that allows…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","test_generation::abstract_state","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clear","","",3,[[]]],[11,"initialize","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","test_generation::borrow_graph","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","test_generation::bytecode_generator","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","test_generation::config","",11,[[]]],[11,"into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","test_generation::control_flow_graph","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"initialize","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","test_generation::error","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","test_generation::summaries","",15,[[]]],[11,"into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","test_generation::transitions","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"initialize","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"clone","test_generation::abstract_state","",4,[[],["borrowstate",4]]],[11,"clone","","",1,[[],["abstractvalue",3]]],[11,"clone","","",5,[[],["mutability",4]]],[11,"clone","","",6,[[],["callgraph",3]]],[11,"clone","","",2,[[],["instantiablemodule",3]]],[11,"clone","","",3,[[],["abstractstate",3]]],[11,"clone","test_generation::borrow_graph","",7,[[],["edgetype",4]]],[11,"clone","","",8,[[],["borrowgraph",3]]],[11,"clone","test_generation::bytecode_generator","",9,[[],["functiongenerationcontext",3]]],[11,"clone","test_generation::control_flow_graph","",12,[[],["basicblock",3]]],[11,"clone","","",13,[[],["cfg",3]]],[11,"clone","test_generation","",0,[[],["status",4]]],[11,"default","test_generation::abstract_state","",3,[[]]],[11,"default","test_generation::control_flow_graph","",12,[[],["basicblock",3]]],[11,"default","test_generation::transitions","",17,[[],["subst",3]]],[11,"eq","test_generation::abstract_state","",4,[[["borrowstate",4]]]],[11,"eq","","",1,[[["abstractvalue",3]]]],[11,"ne","","",1,[[["abstractvalue",3]]]],[11,"eq","","",5,[[["mutability",4]]]],[11,"eq","","",6,[[["callgraph",3]]]],[11,"ne","","",6,[[["callgraph",3]]]],[11,"eq","test_generation::borrow_graph","",7,[[["edgetype",4]]]],[11,"eq","","",8,[[["borrowgraph",3]]]],[11,"ne","","",8,[[["borrowgraph",3]]]],[11,"eq","test_generation::bytecode_generator","",9,[[["functiongenerationcontext",3]]]],[11,"ne","","",9,[[["functiongenerationcontext",3]]]],[11,"eq","test_generation","",0,[[["status",4]]]],[11,"fmt","test_generation::abstract_state","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::borrow_graph","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::bytecode_generator","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::config","",11,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::control_flow_graph","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::error","",14,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation","",0,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::abstract_state","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","test_generation::error","",14,[[["formatter",3]],["result",6]]],[11,"clap","test_generation::config","",11,[[],["app",3]]],[11,"from_clap","","",11,[[["argmatches",3]]]],[11,"augment_clap","","",11,[[["app",3]],["app",3]]],[11,"is_subcommand","","",11,[[]]]],"p":[[4,"Status"],[3,"AbstractValue"],[3,"InstantiableModule"],[3,"AbstractState"],[4,"BorrowState"],[4,"Mutability"],[3,"CallGraph"],[4,"EdgeType"],[3,"BorrowGraph"],[3,"FunctionGenerationContext"],[3,"BytecodeGenerator"],[3,"Args"],[3,"BasicBlock"],[3,"CFG"],[3,"VMError"],[3,"Summary"],[4,"Effects"],[3,"Subst"],[4,"StackBinOpResult"]]},\
"test_utils":{"doc":"","i":[[5,"read_env_var","test_utils","",null,[[],["string",3]]],[5,"read_bool_env_var","","",null,[[]]],[5,"extract_test_directives","","",null,[[["path",3]],[["vec",3],["result",6]]]],[0,"baseline_test","","A module supporting baseline (golden) tests.",null,null],[5,"verify_or_update_baseline","test_utils::baseline_test","Verifies or updates baseline file for the given generated…",null,[[["path",3]],["result",6]]],[17,"DEFAULT_SENDER","test_utils","",null,null]],"p":[]},\
"testsuite":{"doc":"","i":[],"p":[]},\
"transaction_builder":{"doc":"","i":[[5,"encode_add_recovery_rotation_capability","transaction_builder","Add the `KeyRotationCapability` for `to_recover_account`…",null,[[["accountaddress",3]],["script",3]]],[5,"encode_add_validator_script","","Encode a program adding `new_validator` to the pending…",null,[[["accountaddress",3]],["script",3]]],[5,"encode_burn_script","","Permanently destroy the coins stored in the oldest burn…",null,[[["accountaddress",3],["typetag",4]],["script",3]]],[5,"encode_burn_txn_fees_script","","Burn transaction fees that have been collected in the…",null,[[["typetag",4]],["script",3]]],[5,"encode_cancel_burn_script","","Cancel the oldest burn request from `preburn_address` and…",null,[[["accountaddress",3],["typetag",4]],["script",3]]],[5,"encode_create_recovery_address","","Extract the `KeyRotationCapability` for `recovery_account`…",null,[[],["script",3]]],[5,"encode_transfer_with_metadata_script","","Encode a program transferring `amount` coins to…",null,[[["vec",3],["typetag",4],["accountaddress",3]],["script",3]]],[5,"encode_preburn_script","","Preburn `amount` coins from the sender\'s account. This…",null,[[["typetag",4]],["script",3]]],[5,"encode_publish_shared_ed25519_public_key_script","","(1) Rotate the authentication key of the sender to…",null,[[["vec",3]],["script",3]]],[5,"encode_add_currency_to_account_script","","Add the currency identified by the type `currency` to the…",null,[[["typetag",4]],["script",3]]],[5,"encode_register_validator_script","","Encode a program registering the sender as a candidate…",null,[[["vec",3]],["script",3]]],[5,"encode_remove_validator_script","","Encode a program adding `to_remove` to the set of pending…",null,[[["accountaddress",3]],["script",3]]],[5,"encode_rotate_compliance_public_key_script","","Encode a program that rotates `vasp_root_addr`\'s…",null,[[["vec",3]],["script",3]]],[5,"encode_rotate_base_url_script","","Encode a program that rotates `vasp_root_addr`\'s base URL…",null,[[["vec",3]],["script",3]]],[5,"encode_rotate_consensus_pubkey_script","","Encode a program that rotates the sender\'s consensus…",null,[[["vec",3]],["script",3]]],[5,"encode_rotate_authentication_key_script","","Encode a program that rotates the sender\'s authentication…",null,[[["vec",3]],["script",3]]],[5,"encode_rotate_authentication_key_with_recovery_address_script","","Rotate the authentication key of `to_recover` to…",null,[[["vec",3],["accountaddress",3]],["script",3]]],[5,"encode_rotate_shared_ed25519_public_key_script","","(1) rotate the public key stored in the sender\'s…",null,[[["vec",3]],["script",3]]],[5,"_encode_mint_script_internal","","Encode a program creating `amount` coins for sender",null,[[["vec",3],["accountaddress",3],["typetag",4]],["script",3]]],[5,"_encode_mint_lbr_to_address_script_internal","","Encode a program creating `amount` LBR for `address`",null,[[["vec",3],["accountaddress",3]],["script",3]]],[5,"_encode_publishing_option_script_internal","","Modify publishing options. Takes the LCS bytes of a…",null,[[["vec",3]],["script",3]]],[5,"_encode_update_libra_version_internal","","Update Libra version",null,[[],["script",3]]],[5,"encode_mint_lbr","","Mints `amount_lbr` LBR from the sending account\'s…",null,[[],["script",3]]],[5,"encode_unmint_lbr","","Unmints `amount_lbr` LBR from the sending account into the…",null,[[],["script",3]]],[5,"encode_update_minting_ability","","Allows--true--or disallows--false--minting of `currency`…",null,[[["typetag",4]],["script",3]]],[5,"encode_create_parent_vasp_account","","Create an account with the ParentVASP role at `address`…",null,[[["vec",3],["typetag",4],["accountaddress",3]],["script",3]]],[5,"encode_create_child_vasp_account","","Create an account with the ChildVASP role at `address`…",null,[[["vec",3],["accountaddress",3],["typetag",4]],["script",3]]],[5,"encode_tiered_mint","","Mints \'mint_amount\' to \'designated_dealer_address\' for…",null,[[["accountaddress",3],["typetag",4]],["script",3]]],[5,"encode_create_designated_dealer","","Creates designated dealer at \'new_account_address",null,[[["vec",3],["accountaddress",3],["typetag",4]],["script",3]]],[5,"encode_freeze_account","","Freezes account with address addr.",null,[[["accountaddress",3]],["script",3]]],[5,"encode_unfreeze_account","","Unfreezes account with address addr.",null,[[["accountaddress",3]],["script",3]]],[5,"encode_rotate_authentication_key_script_with_nonce","","Encode a program that rotates the sender\'s authentication…",null,[[["vec",3]],["script",3]]],[5,"encode_update_exchange_rate","","Updates the on-chain exchange rate to LBR for the given…",null,[[["typetag",4]],["script",3]]],[5,"get_stdlib_script_abis","","",null,[[],[["scriptabi",3],["vec",3]]]],[5,"encode_stdlib_script","","Encode `stdlib_script` with arguments `args`. Note: this…",null,[[["transactionargument",4],["stdlibscript",4],["vec",3],["typetag",4],["vec",3]],["script",3]]],[5,"encode_mint_script","","Encode a program creating `amount` coins for sender",null,[[["accountaddress",3],["vec",3],["typetag",4]],["script",3]]],[5,"encode_mint_lbr_to_address_script","","Encode a program creating `amount` LBR for `address`",null,[[["vec",3],["accountaddress",3]],["script",3]]],[5,"encode_publishing_option_script","","",null,[[["vmpublishingoption",4]],["script",3]]],[5,"encode_update_libra_version","","",null,[[["libraversion",3]],["script",3]]],[5,"encode_block_prologue_script","","",null,[[["blockmetadata",3]],["transaction",4]]],[5,"get_transaction_name","","Returns a user friendly mnemonic for the transaction type…",null,[[],["string",3]]],[5,"encode_stdlib_upgrade_transaction","","",null,[[["stdliboptions",4]],["changeset",3]]]],"p":[]},\
"transaction_builder_generator":{"doc":"","i":[[0,"python3","transaction_builder_generator","Support for code-generation in Python 3",null,null],[5,"output","transaction_builder_generator::python3","",null,[[["write",8]],["result",6]]],[0,"rust","transaction_builder_generator","Support for code-generation in Rust",null,null],[5,"output","transaction_builder_generator::rust","",null,[[["write",8]],["result",6]]]],"p":[]},\
"utils":{"doc":"","i":[[0,"module_generation","utils","",null,null],[3,"ModuleGenerator","utils::module_generation","",null,null],[3,"ModuleGeneratorOptions","","",null,null],[12,"max_locals","","The maximum number of locals that can be defined within a…",0,null],[12,"max_fields","","The maximum number of fields that will be generated for…",0,null],[12,"min_fields","","",0,null],[12,"max_structs","","The maximum number of structs that can be generated for a…",0,null],[12,"max_functions","","The maximum number of functions that can be generated for…",0,null],[12,"max_ty_params","","The maximum number of type parameters functions and structs.",0,null],[12,"byte_array_max_size","","The maximum size that generated byte arrays can be.",0,null],[12,"max_string_size","","The maximum size that a generated string can be.",0,null],[12,"max_function_call_size","","The maximum number of arguments to generated function…",0,null],[12,"max_ret_types_size","","The maximum number of return types of generated function…",0,null],[12,"simple_types_only","","Whether or not generate modules should only contain simple…",0,null],[12,"references_allowed","","Whether references are allowed to be generated for e.g.…",0,null],[12,"add_resources","","Whether the generated modules should have any resources…",0,null],[12,"min_table_size","","The minimum number of entries in any table",0,null],[12,"args_for_ty_params","","If set, all functions with type parameters will have…",0,null],[3,"Pad","","",null,null],[5,"generate_module","","",null,[[["stdrng",3],["modulegeneratoroptions",3]],["compiledmodule",3]]],[5,"generate_modules","","Generate a `number - 1` modules. Then generate a root…",null,[[["stdrng",3],["modulegeneratoroptions",3]]]],[5,"generate_verified_modules","","",null,[[["stdrng",3],["modulegeneratoroptions",3]]]],[11,"create","","",1,[[["stdrng",3],["modulegeneratoroptions",3],["btreeset",3]],["moduledefinition",3]]],[11,"pad","","",2,[[["modulegeneratoroptions",3],["compiledmodulemut",3]]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"initialize","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clone","","",0,[[],["modulegeneratoroptions",3]]],[11,"default","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"ModuleGeneratorOptions"],[3,"ModuleGenerator"],[3,"Pad"]]},\
"vm":{"doc":"","i":[[4,"IndexKind","vm","Represents a kind of index -- useful for error messages.",null,null],[13,"ModuleHandle","","",0,null],[13,"StructHandle","","",0,null],[13,"FunctionHandle","","",0,null],[13,"FieldHandle","","",0,null],[13,"FunctionInstantiation","","",0,null],[13,"FieldInstantiation","","",0,null],[13,"StructDefinition","","",0,null],[13,"StructDefInstantiation","","",0,null],[13,"FunctionDefinition","","",0,null],[13,"FieldDefinition","","",0,null],[13,"Signature","","",0,null],[13,"Identifier","","",0,null],[13,"AddressIdentifier","","",0,null],[13,"ConstantPool","","",0,null],[13,"LocalPool","","",0,null],[13,"CodeDefinition","","",0,null],[13,"TypeParameter","","",0,null],[13,"MemberCount","","",0,null],[4,"SignatureTokenKind","","Represents the kind of a signature token.",null,null],[13,"Value","","Any sort of owned value that isn\'t an array (Integer,…",1,null],[13,"Reference","","A reference.",1,null],[13,"MutableReference","","A mutable reference.",1,null],[0,"access","","Defines accessors for compiled modules.",null,null],[8,"ModuleAccess","vm::access","Represents accessors for a compiled module.",null,null],[10,"as_module","","Returns the `CompiledModule` that will be used for accesses.",2,[[],["compiledmodule",3]]],[11,"self_handle_idx","","",2,[[],["modulehandleindex",3]]],[11,"self_handle","","Returns the `ModuleHandle` for `self`.",2,[[],["modulehandle",3]]],[11,"name","","Returns the name of the module.",2,[[],["identstr",3]]],[11,"address","","Returns the address of the module.",2,[[],["accountaddress",3]]],[11,"module_handle_at","","",2,[[["modulehandleindex",3]],["modulehandle",3]]],[11,"struct_handle_at","","",2,[[["structhandleindex",3]],["structhandle",3]]],[11,"function_handle_at","","",2,[[["functionhandleindex",3]],["functionhandle",3]]],[11,"field_handle_at","","",2,[[["fieldhandleindex",3]],["fieldhandle",3]]],[11,"struct_instantiation_at","","",2,[[["structdefinstantiationindex",3]],["structdefinstantiation",3]]],[11,"function_instantiation_at","","",2,[[["functioninstantiationindex",3]],["functioninstantiation",3]]],[11,"field_instantiation_at","","",2,[[["fieldinstantiationindex",3]],["fieldinstantiation",3]]],[11,"signature_at","","",2,[[["signatureindex",3]],["signature",3]]],[11,"identifier_at","","",2,[[["identifierindex",3]],["identstr",3]]],[11,"address_identifier_at","","",2,[[["addressidentifierindex",3]],["accountaddress",3]]],[11,"constant_at","","",2,[[["constantpoolindex",3]],["constant",3]]],[11,"struct_def_at","","",2,[[["structdefinitionindex",3]],["structdefinition",3]]],[11,"function_def_at","","",2,[[["functiondefinitionindex",3]],["functiondefinition",3]]],[11,"module_handles","","",2,[[]]],[11,"struct_handles","","",2,[[]]],[11,"function_handles","","",2,[[]]],[11,"field_handles","","",2,[[]]],[11,"struct_instantiations","","",2,[[]]],[11,"function_instantiations","","",2,[[]]],[11,"field_instantiations","","",2,[[]]],[11,"signatures","","",2,[[]]],[11,"constant_pool","","",2,[[]]],[11,"identifiers","","",2,[[]]],[11,"address_identifiers","","",2,[[]]],[11,"struct_defs","","",2,[[]]],[11,"function_defs","","",2,[[]]],[11,"module_id_for_handle","","",2,[[["modulehandle",3]],["moduleid",3]]],[11,"self_id","","",2,[[],["moduleid",3]]],[8,"ScriptAccess","","Represents accessors for a compiled script.",null,null],[10,"as_script","","Returns the `CompiledScript` that will be used for accesses.",3,[[],["compiledscript",3]]],[11,"module_handle_at","","",3,[[["modulehandleindex",3]],["modulehandle",3]]],[11,"struct_handle_at","","",3,[[["structhandleindex",3]],["structhandle",3]]],[11,"function_handle_at","","",3,[[["functionhandleindex",3]],["functionhandle",3]]],[11,"signature_at","","",3,[[["signatureindex",3]],["signature",3]]],[11,"identifier_at","","",3,[[["identifierindex",3]],["identstr",3]]],[11,"address_identifier_at","","",3,[[["addressidentifierindex",3]],["accountaddress",3]]],[11,"constant_at","","",3,[[["constantpoolindex",3]],["constant",3]]],[11,"function_instantiation_at","","",3,[[["functioninstantiationindex",3]],["functioninstantiation",3]]],[11,"module_handles","","",3,[[]]],[11,"struct_handles","","",3,[[]]],[11,"function_handles","","",3,[[]]],[11,"function_instantiations","","",3,[[]]],[11,"signatures","","",3,[[]]],[11,"constant_pool","","",3,[[]]],[11,"identifiers","","",3,[[]]],[11,"address_identifiers","","",3,[[]]],[11,"code","","",3,[[],["codeunit",3]]],[0,"check_bounds","vm","",null,null],[3,"BoundsChecker","vm::check_bounds","",null,null],[11,"new","","",4,[[["compiledmodulemut",3]]]],[11,"verify","","",4,[[],["vmresult",6]]],[0,"errors","vm","",null,null],[3,"Location","vm::errors","",null,null],[5,"vm_result_to_transaction_status","","",null,[[["vmresult",6]],["transactionstatus",4]]],[5,"vm_status_of_result","","Conversion functions from internal VM statuses into…",null,[[["vmresult",6]],["vmstatus",3]]],[5,"convert_prologue_runtime_error","","",null,[[["accountaddress",3],["vmstatus",3]],["vmstatus",3]]],[5,"vm_error","","",null,[[["location",3],["statuscode",4]],["vmstatus",3]]],[5,"bytecode_offset_err","","",null,[[["statuscode",4],["indexkind",4]],["vmstatus",3]]],[5,"bounds_error","","",null,[[["statuscode",4],["indexkind",4]],["vmstatus",3]]],[5,"verification_error","","",null,[[["statuscode",4],["indexkind",4]],["vmstatus",3]]],[5,"append_err_info","","",null,[[["indexkind",4],["vmstatus",3]],["vmstatus",3]]],[5,"err_at_offset","","",null,[[["statuscode",4]],["vmstatus",3]]],[6,"VMResult","","",null,null],[6,"BinaryLoaderResult","","",null,null],[17,"EACCOUNT_FROZEN","","Error codes that can be emitted by the prologue. These…",null,null],[17,"EBAD_SIGNATURE","","",null,null],[17,"EBAD_ACCOUNT_AUTHENTICATION_KEY","","",null,null],[17,"ESEQUENCE_NUMBER_TOO_OLD","","",null,null],[17,"ESEQUENCE_NUMBER_TOO_NEW","","",null,null],[17,"EACCOUNT_DOES_NOT_EXIST","","",null,null],[17,"ECANT_PAY_GAS_DEPOSIT","","",null,null],[17,"ETRANSACTION_EXPIRED","","",null,null],[17,"EINSUFFICIENT_BALANCE","","Generic error codes. These codes don\'t have any special…",null,null],[17,"EINSUFFICIENT_PRIVILEGES","","",null,null],[17,"EASSERT_ERROR","","",null,null],[11,"new","","",5,[[]]],[0,"constant","vm","",null,null],[0,"deserializer","","",null,null],[0,"file_format","","Binary format for transactions and modules.",null,null],[3,"ModuleHandleIndex","vm::file_format","Index into the `ModuleHandle` table.",null,null],[12,"0","","",6,null],[3,"StructHandleIndex","","Index into the `StructHandle` table.",null,null],[12,"0","","",7,null],[3,"FunctionHandleIndex","","Index into the `FunctionHandle` table.",null,null],[12,"0","","",8,null],[3,"FieldHandleIndex","","Index into the `FieldHandle` table.",null,null],[12,"0","","",9,null],[3,"StructDefInstantiationIndex","","Index into the `StructInstantiation` table.",null,null],[12,"0","","",10,null],[3,"FunctionInstantiationIndex","","Index into the `FunctionInstantiation` table.",null,null],[12,"0","","",11,null],[3,"FieldInstantiationIndex","","Index into the `FieldInstantiation` table.",null,null],[12,"0","","",12,null],[3,"IdentifierIndex","","Index into the `Identifier` table.",null,null],[12,"0","","",13,null],[3,"AddressIdentifierIndex","","Index into the `AddressIdentifier` table.",null,null],[12,"0","","",14,null],[3,"ConstantPoolIndex","","Index into the `ConstantPool` table.",null,null],[12,"0","","",15,null],[3,"SignatureIndex","","Index into the `Signature` table.",null,null],[12,"0","","",16,null],[3,"StructDefinitionIndex","","Index into the `StructDefinition` table.",null,null],[12,"0","","",17,null],[3,"FunctionDefinitionIndex","","Index into the `FunctionDefinition` table.",null,null],[12,"0","","",18,null],[3,"ModuleHandle","","A `ModuleHandle` is a reference to a MOVE module. It is…",null,null],[12,"address","","Index into the `AddressIdentifierIndex`. Identifies…",19,null],[12,"name","","The name of the module published in the code section for…",19,null],[3,"StructHandle","","A `StructHandle` is a reference to a user defined type. It…",null,null],[12,"module","","The module that defines the type.",20,null],[12,"name","","The name of the type.",20,null],[12,"is_nominal_resource","","There are two ways for a type to have the Kind resource 1)…",20,null],[12,"type_parameters","","The type formals (identified by their index into the vec)…",20,null],[3,"FunctionHandle","","A `FunctionHandle` is a reference to a function. It is…",null,null],[12,"module","","The module that defines the function.",21,null],[12,"name","","The name of the function.",21,null],[12,"parameters","","The list of arguments to the function.",21,null],[12,"return_","","The list of return types.",21,null],[12,"type_parameters","","The type formals (identified by their index into the vec)…",21,null],[3,"FieldHandle","","A field access info (owner type and offset)",null,null],[12,"owner","","",22,null],[12,"field","","",22,null],[3,"StructDefInstantiation","","A complete or partial instantiation of a generic struct",null,null],[12,"def","","",23,null],[12,"type_parameters","","",23,null],[3,"FunctionInstantiation","","A complete or partial instantiation of a function",null,null],[12,"handle","","",24,null],[12,"type_parameters","","",24,null],[3,"FieldInstantiation","","A complete or partial instantiation of a field (or the…",null,null],[12,"handle","","",25,null],[12,"type_parameters","","",25,null],[3,"StructDefinition","","A `StructDefinition` is a type definition. It either…",null,null],[12,"struct_handle","","The `StructHandle` for this `StructDefinition`. This has…",26,null],[12,"field_information","","Contains either - Information indicating the struct is…",26,null],[3,"FieldDefinition","","A `FieldDefinition` is the definition of a field: its name…",null,null],[12,"name","","The name of the field.",27,null],[12,"signature","","The type of the field.",27,null],[3,"FunctionDefinition","","A `FunctionDefinition` is the implementation of a…",null,null],[12,"function","","The prototype of the function (module, name, signature).",28,null],[12,"is_public","","Flag to indicate if this function is public.",28,null],[12,"acquires_global_resources","","List of nominal resources (declared in this module) that…",28,null],[12,"code","","Code for this function.",28,null],[3,"TypeSignature","","A type definition. `SignatureToken` allows the definition…",null,null],[12,"0","","",29,null],[3,"FunctionSignature","","A `FunctionSignature` in internally used to create a…",null,null],[12,"return_","","The list of return types.",30,null],[12,"parameters","","The list of arguments to the function.",30,null],[12,"type_parameters","","The type formals (identified by their index into the vec)…",30,null],[3,"Signature","","A `Signature` is the list of locals used by a function.",null,null],[12,"0","","",31,null],[3,"SignatureTokenPreorderTraversalIter","","An iterator to help traverse the `SignatureToken` in a…",null,null],[3,"Constant","","A `Constant` is a serialized value along with it\'s type.…",null,null],[12,"type_","","",32,null],[12,"data","","",32,null],[3,"CodeUnit","","A `CodeUnit` is the body of a function. It has the…",null,null],[12,"locals","","List of locals type. All locals are typed.",33,null],[12,"code","","Code stream, function body.",33,null],[3,"CompiledScript","","Contains the main function to execute and its dependencies.",null,null],[3,"CompiledScriptMut","","A mutable version of `CompiledScript`. Converting to a…",null,null],[12,"module_handles","","Handles to all modules referenced.",34,null],[12,"struct_handles","","Handles to external/imported types.",34,null],[12,"function_handles","","Handles to external/imported functions.",34,null],[12,"function_instantiations","","Function instantiations.",34,null],[12,"signatures","","",34,null],[12,"identifiers","","All identifiers used in this transaction.",34,null],[12,"address_identifiers","","All address identifiers used in this transaction.",34,null],[12,"constant_pool","","Constant pool. The constant values used in the transaction.",34,null],[12,"type_parameters","","",34,null],[12,"parameters","","",34,null],[12,"code","","",34,null],[3,"ScriptConversionInfo","","",null,null],[3,"CompiledModule","","A `CompiledModule` defines the structure of a module which…",null,null],[3,"CompiledModuleMut","","A mutable version of `CompiledModule`. Converting to a…",null,null],[12,"module_handles","","Handles to external modules and self.",35,null],[12,"self_module_handle_idx","","Handle to self.",35,null],[12,"struct_handles","","Handles to external and internal types.",35,null],[12,"function_handles","","Handles to external and internal functions.",35,null],[12,"field_handles","","Handles to fields.",35,null],[12,"struct_def_instantiations","","Struct instantiations.",35,null],[12,"function_instantiations","","Function instantiations.",35,null],[12,"field_instantiations","","Field instantiations.",35,null],[12,"signatures","","Locals signature pool. The signature for all locals of the…",35,null],[12,"identifiers","","All identifiers used in this module.",35,null],[12,"address_identifiers","","All address identifiers used in this module.",35,null],[12,"constant_pool","","Constant pool. The constant values used in the module.",35,null],[12,"struct_defs","","Types defined in this module.",35,null],[12,"function_defs","","Function defined in this module.",35,null],[4,"StructFieldInformation","","`StructFieldInformation` indicates whether a struct is…",null,null],[13,"Native","","",36,null],[13,"Declared","","",36,null],[4,"Kind","","A `Kind` classifies types into sets with rules each set…",null,null],[13,"All","","Represents the super set of all types. The type might…",37,null],[13,"Resource","","`Resource` types must follow move semantics and various…",37,null],[13,"Copyable","","`Copyable` types do not need to follow the `Resource`…",37,null],[4,"SignatureToken","","A `SignatureToken` is a type declaration for a location.",null,null],[13,"Bool","","Boolean, `true` or `false`.",38,null],[13,"U8","","Unsigned integers, 8 bits length.",38,null],[13,"U64","","Unsigned integers, 64 bits length.",38,null],[13,"U128","","Unsigned integers, 128 bits length.",38,null],[13,"Address","","Address, a 16 bytes immutable type.",38,null],[13,"Signer","","Signer, a 16 bytes immutable type representing the…",38,null],[13,"Vector","","Vector",38,null],[13,"Struct","","MOVE user type, resource or copyable",38,null],[13,"StructInstantiation","","",38,null],[13,"Reference","","Reference to a type.",38,null],[13,"MutableReference","","Mutable reference to a type.",38,null],[13,"TypeParameter","","Type parameter.",38,null],[4,"Bytecode","","`Bytecode` is a VM instruction of variable size. The type…",null,null],[13,"Pop","","Pop and discard the value at the top of the stack. The…",39,null],[13,"Ret","","Return from function, possibly with values according to…",39,null],[13,"BrTrue","","Branch to the instruction at position `CodeOffset` if the…",39,null],[13,"BrFalse","","Branch to the instruction at position `CodeOffset` if the…",39,null],[13,"Branch","","Branch unconditionally to the instruction at position…",39,null],[13,"LdU8","","Push a U8 constant onto the stack.",39,null],[13,"LdU64","","Push a U64 constant onto the stack.",39,null],[13,"LdU128","","Push a U128 constant onto the stack.",39,null],[13,"CastU8","","Convert the value at the top of the stack into u8.",39,null],[13,"CastU64","","Convert the value at the top of the stack into u64.",39,null],[13,"CastU128","","Convert the value at the top of the stack into u128.",39,null],[13,"LdConst","","Push a `Constant` onto the stack. The value is loaded and…",39,null],[13,"LdTrue","","Push `true` onto the stack.",39,null],[13,"LdFalse","","Push `false` onto the stack.",39,null],[13,"CopyLoc","","Push the local identified by `LocalIndex` onto the stack.…",39,null],[13,"MoveLoc","","Push the local identified by `LocalIndex` onto the stack.…",39,null],[13,"StLoc","","Pop value from the top of the stack and store it into the…",39,null],[13,"Call","","Call a function. The stack has the arguments pushed first…",39,null],[13,"CallGeneric","","",39,null],[13,"Pack","","Create an instance of the type specified via…",39,null],[13,"PackGeneric","","",39,null],[13,"Unpack","","Destroy an instance of a type and push the values bound to…",39,null],[13,"UnpackGeneric","","",39,null],[13,"ReadRef","","Read a reference. The reference is on the stack, it is…",39,null],[13,"WriteRef","","Write to a reference. The reference and the value are on…",39,null],[13,"FreezeRef","","Convert a mutable reference to an immutable reference.",39,null],[13,"MutBorrowLoc","","Load a mutable reference to a local identified by…",39,null],[13,"ImmBorrowLoc","","Load an immutable reference to a local identified by…",39,null],[13,"MutBorrowField","","Load a mutable reference to a field identified by…",39,null],[13,"MutBorrowFieldGeneric","","Load a mutable reference to a field identified by…",39,null],[13,"ImmBorrowField","","Load an immutable reference to a field identified by…",39,null],[13,"ImmBorrowFieldGeneric","","Load an immutable reference to a field identified by…",39,null],[13,"MutBorrowGlobal","","Return a mutable reference to an instance of type…",39,null],[13,"MutBorrowGlobalGeneric","","",39,null],[13,"ImmBorrowGlobal","","Return an immutable reference to an instance of type…",39,null],[13,"ImmBorrowGlobalGeneric","","",39,null],[13,"Add","","Add the 2 u64 at the top of the stack and pushes the…",39,null],[13,"Sub","","Subtract the 2 u64 at the top of the stack and pushes the…",39,null],[13,"Mul","","Multiply the 2 u64 at the top of the stack and pushes the…",39,null],[13,"Mod","","Perform a modulo operation on the 2 u64 at the top of the…",39,null],[13,"Div","","Divide the 2 u64 at the top of the stack and pushes the…",39,null],[13,"BitOr","","Bitwise OR the 2 u64 at the top of the stack and pushes…",39,null],[13,"BitAnd","","Bitwise AND the 2 u64 at the top of the stack and pushes…",39,null],[13,"Xor","","Bitwise XOR the 2 u64 at the top of the stack and pushes…",39,null],[13,"Or","","Logical OR the 2 bool at the top of the stack and pushes…",39,null],[13,"And","","Logical AND the 2 bool at the top of the stack and pushes…",39,null],[13,"Not","","Logical NOT the bool at the top of the stack and pushes…",39,null],[13,"Eq","","Compare for equality the 2 value at the top of the stack…",39,null],[13,"Neq","","Compare for inequality the 2 value at the top of the stack…",39,null],[13,"Lt","","Perform a \\\"less than\\\" operation of the 2 u64 at the top of…",39,null],[13,"Gt","","Perform a \\\"greater than\\\" operation of the 2 u64 at the top…",39,null],[13,"Le","","Perform a \\\"less than or equal\\\" operation of the 2 u64 at…",39,null],[13,"Ge","","Perform a \\\"greater than or equal\\\" than operation of the 2…",39,null],[13,"Abort","","Abort execution with errorcode",39,null],[13,"GetTxnSenderAddress","","Get the sender address from the transaction and pushes it…",39,null],[13,"Exists","","Returns whether or not a given address has an object of…",39,null],[13,"ExistsGeneric","","",39,null],[13,"MoveFrom","","Move the instance of type StructDefinitionIndex, at the…",39,null],[13,"MoveFromGeneric","","",39,null],[13,"MoveToSender","","Move the instance at the top of the stack to the address…",39,null],[13,"MoveToSenderGeneric","","",39,null],[13,"MoveTo","","Move the instance at the top of the stack to the address…",39,null],[13,"MoveToGeneric","","",39,null],[13,"Shl","","Shift the (second top value) left (top value) bits and…",39,null],[13,"Shr","","Shift the (second top value) right (top value) bits and…",39,null],[13,"Nop","","No operation.",39,null],[5,"self_module_name","","",null,[[],["identstr",3]]],[5,"empty_module","","Return the simplest module that will pass the bounds checker",null,[[],["compiledmodulemut",3]]],[5,"basic_test_module","","Create the following module which is convenient in tests:…",null,[[],["compiledmodulemut",3]]],[5,"dummy_procedure_module","","Create a dummy module to wrap the bytecode program in…",null,[[["bytecode",4],["vec",3]],["compiledmodule",3]]],[5,"empty_script","","Return a simple script that contains only a return in the…",null,[[],["compiledscriptmut",3]]],[6,"TableIndex","","Generic index into one of the tables in the binary format.",null,null],[6,"LocalIndex","","Index of a local variable in a function.",null,null],[6,"MemberCount","","Max number of fields in a `StructDefinition`.",null,null],[6,"CodeOffset","","Index into the code stream for a jump. The offset is…",null,null],[6,"IdentifierPool","","The pool of identifiers.",null,null],[6,"AddressIdentifierPool","","The pool of address identifiers (addresses used in…",null,null],[6,"ConstantPool","","The pool of `Constant` values",null,null],[6,"TypeSignaturePool","","The pool of `TypeSignature` instances. Those are system…",null,null],[6,"SignaturePool","","The pool of `Signature` instances. Every function…",null,null],[6,"TypeParameterIndex","","Type parameters are encoded as indices. This index can…",null,null],[17,"NO_TYPE_ARGUMENTS","","Index 0 into the LocalsSignaturePool, which is guaranteed…",null,null],[17,"NUMBER_OF_NATIVE_FUNCTIONS","","",null,null],[11,"new","","",6,[[["tableindex",6]]]],[11,"new","","",7,[[["tableindex",6]]]],[11,"new","","",8,[[["tableindex",6]]]],[11,"new","","",9,[[["tableindex",6]]]],[11,"new","","",10,[[["tableindex",6]]]],[11,"new","","",11,[[["tableindex",6]]]],[11,"new","","",12,[[["tableindex",6]]]],[11,"new","","",13,[[["tableindex",6]]]],[11,"new","","",14,[[["tableindex",6]]]],[11,"new","","",15,[[["tableindex",6]]]],[11,"new","","",16,[[["tableindex",6]]]],[11,"new","","",17,[[["tableindex",6]]]],[11,"new","","",18,[[["tableindex",6]]]],[11,"declared_field_count","","",26,[[],[["result",4],["membercount",6],["vmstatus",3]]]],[11,"is_public","","Returns whether the FunctionDefinition is public.",28,[[]]],[11,"is_native","","Returns whether the FunctionDefinition is native.",28,[[]]],[18,"PUBLIC","","Function can be invoked outside of its declaring module.",28,null],[18,"NATIVE","","A native function implemented in Rust.",28,null],[11,"len","","Length of the `Signature`.",31,[[]]],[11,"is_empty","","Whether the function has no locals (both arguments or…",31,[[]]],[11,"is_sub_kind_of","","Checks if the given kind is a sub-kind of another.",37,[[["kind",4]]]],[11,"join","","Helper function to determine the kind of a struct instance…",37,[[["kind",4]],["kind",4]]],[11,"signature_token_kind","","Returns the \\\"value kind\\\" for the `SignatureToken`",38,[[],["signaturetokenkind",4]]],[11,"is_integer","","",38,[[]]],[11,"is_reference","","Returns true if the `SignatureToken` is any kind of…",38,[[]]],[11,"is_mutable_reference","","Returns true if the `SignatureToken` is a mutable reference.",38,[[]]],[11,"debug_set_sh_idx","","Set the index to this one. Useful for random testing.",38,[[["structhandleindex",3]]]],[11,"preorder_traversal","","",38,[[],["signaturetokenpreordertraversaliter",3]]],[18,"NUM_INSTRUCTIONS","","The number of variants in this enum.",39,null],[11,"is_unconditional_branch","","Return true if this bytecode instruction always branches",39,[[]]],[11,"is_conditional_branch","","Return true if the branching behavior of this bytecode…",39,[[]]],[11,"is_branch","","Returns true if this bytecode instruction is either a…",39,[[]]],[11,"offset","","Returns the offset that this bytecode instruction branches…",39,[[],[["codeoffset",6],["option",4]]]],[11,"get_successors","","Return the successor offsets of this bytecode instruction.",39,[[["codeoffset",6]],[["codeoffset",6],["vec",3]]]],[18,"MAIN_INDEX","","Returns the index of `main` in case a script is converted…",40,null],[11,"as_inner","","Returns a reference to the inner `CompiledScriptMut`.",40,[[],["compiledscriptmut",3]]],[11,"into_inner","","Converts this instance into the inner `CompiledScriptMut`.…",40,[[],["compiledscriptmut",3]]],[11,"into_module","","Converts a `CompiledScript` into a `CompiledModule` for…",40,[[]]],[11,"freeze","","Converts this instance into `CompiledScript` after…",34,[[],[["compiledscript",3],["vmresult",6]]]],[11,"into_module","","Converts a `CompiledScriptMut` to a `CompiledModule` for…",34,[[]]],[11,"kind_count","","Returns the count of a specific `IndexKind`",35,[[["indexkind",4]]]],[11,"freeze","","Converts this instance into `CompiledModule` after…",35,[[],[["vmresult",6],["compiledmodule",3]]]],[11,"as_inner","","Returns a reference to the inner `CompiledModuleMut`.",41,[[],["compiledmodulemut",3]]],[11,"into_inner","","Converts this instance into the inner `CompiledModuleMut`.…",41,[[],["compiledmodulemut",3]]],[11,"kind_count","","Returns the number of items of a specific `IndexKind`.",41,[[["indexkind",4]]]],[11,"module_id_for_handle","","Returns the code key of `module_handle`",41,[[["modulehandle",3]],["moduleid",3]]],[11,"self_id","","Returns the code key of `self`",41,[[],["moduleid",3]]],[11,"into_script","","This function should only be called on an instance of…",41,[[["scriptconversioninfo",3]],["compiledscript",3]]],[0,"file_format_common","vm","Constants for the binary format.",null,null],[3,"BinaryData","vm::file_format_common","A wrapper for the binary vector",null,null],[4,"BinaryConstants","","Constant values for the binary format header.",null,null],[4,"TableType","","Constants for table types in the binary.",null,null],[13,"MODULE_HANDLES","","",42,null],[13,"STRUCT_HANDLES","","",42,null],[13,"FUNCTION_HANDLES","","",42,null],[13,"FUNCTION_INST","","",42,null],[13,"SIGNATURES","","",42,null],[13,"CONSTANT_POOL","","",42,null],[13,"IDENTIFIERS","","",42,null],[13,"ADDRESS_IDENTIFIERS","","",42,null],[13,"STRUCT_DEFS","","",42,null],[13,"STRUCT_DEF_INST","","",42,null],[13,"FUNCTION_DEFS","","",42,null],[13,"FIELD_HANDLE","","",42,null],[13,"FIELD_INST","","",42,null],[4,"SerializedType","","Constants for signature blob values.",null,null],[13,"BOOL","","",43,null],[13,"U8","","",43,null],[13,"U64","","",43,null],[13,"U128","","",43,null],[13,"ADDRESS","","",43,null],[13,"REFERENCE","","",43,null],[13,"MUTABLE_REFERENCE","","",43,null],[13,"STRUCT","","",43,null],[13,"TYPE_PARAMETER","","",43,null],[13,"VECTOR","","",43,null],[13,"STRUCT_INST","","",43,null],[13,"SIGNER","","",43,null],[4,"SerializedNominalResourceFlag","","",null,null],[13,"NOMINAL_RESOURCE","","",44,null],[13,"NORMAL_STRUCT","","",44,null],[4,"SerializedKind","","",null,null],[13,"ALL","","",45,null],[13,"COPYABLE","","",45,null],[13,"RESOURCE","","",45,null],[4,"SerializedNativeStructFlag","","",null,null],[13,"NATIVE","","",46,null],[13,"DECLARED","","",46,null],[4,"Opcodes","","List of opcodes constants.",null,null],[13,"POP","","",47,null],[13,"RET","","",47,null],[13,"BR_TRUE","","",47,null],[13,"BR_FALSE","","",47,null],[13,"BRANCH","","",47,null],[13,"LD_U64","","",47,null],[13,"LD_CONST","","",47,null],[13,"LD_TRUE","","",47,null],[13,"LD_FALSE","","",47,null],[13,"COPY_LOC","","",47,null],[13,"MOVE_LOC","","",47,null],[13,"ST_LOC","","",47,null],[13,"MUT_BORROW_LOC","","",47,null],[13,"IMM_BORROW_LOC","","",47,null],[13,"MUT_BORROW_FIELD","","",47,null],[13,"IMM_BORROW_FIELD","","",47,null],[13,"CALL","","",47,null],[13,"PACK","","",47,null],[13,"UNPACK","","",47,null],[13,"READ_REF","","",47,null],[13,"WRITE_REF","","",47,null],[13,"ADD","","",47,null],[13,"SUB","","",47,null],[13,"MUL","","",47,null],[13,"MOD","","",47,null],[13,"DIV","","",47,null],[13,"BIT_OR","","",47,null],[13,"BIT_AND","","",47,null],[13,"XOR","","",47,null],[13,"OR","","",47,null],[13,"AND","","",47,null],[13,"NOT","","",47,null],[13,"EQ","","",47,null],[13,"NEQ","","",47,null],[13,"LT","","",47,null],[13,"GT","","",47,null],[13,"LE","","",47,null],[13,"GE","","",47,null],[13,"ABORT","","",47,null],[13,"GET_TXN_SENDER","","",47,null],[13,"EXISTS","","",47,null],[13,"MUT_BORROW_GLOBAL","","",47,null],[13,"IMM_BORROW_GLOBAL","","",47,null],[13,"MOVE_FROM","","",47,null],[13,"MOVE_TO_SENDER","","",47,null],[13,"FREEZE_REF","","",47,null],[13,"SHL","","",47,null],[13,"SHR","","",47,null],[13,"LD_U8","","",47,null],[13,"LD_U128","","",47,null],[13,"CAST_U8","","",47,null],[13,"CAST_U64","","",47,null],[13,"CAST_U128","","",47,null],[13,"MUT_BORROW_FIELD_GENERIC","","",47,null],[13,"IMM_BORROW_FIELD_GENERIC","","",47,null],[13,"CALL_GENERIC","","",47,null],[13,"PACK_GENERIC","","",47,null],[13,"UNPACK_GENERIC","","",47,null],[13,"EXISTS_GENERIC","","",47,null],[13,"MUT_BORROW_GLOBAL_GENERIC","","",47,null],[13,"IMM_BORROW_GLOBAL_GENERIC","","",47,null],[13,"MOVE_FROM_GENERIC","","",47,null],[13,"MOVE_TO_SENDER_GENERIC","","",47,null],[13,"NOP","","",47,null],[13,"MOVE_TO","","",47,null],[13,"MOVE_TO_GENERIC","","",47,null],[5,"write_u8_as_uleb128","","",null,[[["binarydata",3]],["result",6]]],[5,"write_u16_as_uleb128","","Take a `Vec<u8>` and a value to write to that vector and…",null,[[["binarydata",3]],["result",6]]],[5,"write_u32_as_uleb128","","Take a `Vec<u8>` and a value to write to that vector and…",null,[[["binarydata",3]],["result",6]]],[5,"write_u16","","Write a `u16` in Little Endian format.",null,[[["binarydata",3]],["result",6]]],[5,"write_u32","","Write a `u32` in Little Endian format.",null,[[["binarydata",3]],["result",6]]],[5,"write_u64","","Write a `u64` in Little Endian format.",null,[[["binarydata",3]],["result",6]]],[5,"write_u128","","Write a `u128` in Little Endian format.",null,[[["binarydata",3]],["result",6]]],[5,"read_uleb128_as_u8","","Reads a `u8` in ULEB128 format from a `binary`.",null,[[["cursor",3]],["result",6]]],[5,"read_uleb128_as_u16","","Reads a `u16` in ULEB128 format from a `binary`.",null,[[["cursor",3]],["result",6]]],[5,"read_uleb128_as_u32","","Reads a `u32` in ULEB128 format from a `binary`.",null,[[["cursor",3]],["result",6]]],[5,"instruction_key","","The encoding of the instruction is the serialized form of…",null,[[["bytecode",4]]]],[17,"BINARY_SIZE_LIMIT","","Upper limit on the binary size",null,null],[18,"LIBRA_MAGIC_SIZE","","The blob that must start a binary.",48,null],[18,"LIBRA_MAGIC","","",48,null],[18,"HEADER_SIZE","","The `LIBRA_MAGIC` size, 1 byte for major version, 1 byte…",48,null],[18,"TABLE_HEADER_SIZE","","A (Table Type, Start Offset, Byte Count) size, which is 1…",48,null],[11,"new","","",49,[[]]],[11,"as_inner","","",49,[[]]],[11,"into_inner","","",49,[[],["vec",3]]],[11,"push","","",49,[[],["result",6]]],[11,"extend","","",49,[[],["result",6]]],[11,"len","","",49,[[]]],[11,"is_empty","","",49,[[]]],[11,"clear","","",49,[[]]],[0,"internals","vm","Types meant for use by other parts of this crate, and by…",null,null],[8,"ModuleIndex","vm::internals","Represents a module index.",null,null],[18,"KIND","","",50,null],[10,"into_index","","",50,[[]]],[0,"proptest_types","vm","Utilities for property-based testing.",null,null],[3,"CompiledModuleStrategyGen","vm::proptest_types","Contains configuration to generate [`CompiledModule`]…",null,null],[6,"TableSize","","Represents how large [`CompiledModule`] tables can be.",null,null],[11,"valid_strategy","vm::file_format","Convenience wrapper around…",41,[[]]],[11,"new","vm::proptest_types","Create a new configuration for randomly generating…",51,[[["tablesize",6]]]],[11,"zeros_all","","Zero out all fields, type parameters, arguments and return…",51,[[]]],[11,"generate","","Create a `proptest` strategy for `CompiledModule`…",51,[[]]],[0,"serializer","vm","Serialization of transactions and modules.",null,null],[11,"serialize","vm::file_format","Serializes a `CompiledScript` into a binary. The mutable…",40,[[["vec",3]],["result",6]]],[11,"serialize","","Serializes this into a binary format.",34,[[["vec",3]],["result",6]]],[11,"serialize","","Serializes a `CompiledModule` into a binary. The mutable…",41,[[["vec",3]],["result",6]]],[11,"serialize","","Serializes this into a binary format.",35,[[["vec",3]],["result",6]]],[0,"views","vm","An alternate representation of the file format built on…",null,null],[3,"ModuleView","vm::views","Represents a lazily evaluated abstraction over a module.",null,null],[3,"ModuleHandleView","","",null,null],[3,"StructHandleView","","",null,null],[3,"FunctionHandleView","","",null,null],[3,"StructDefinitionView","","",null,null],[3,"FieldDefinitionView","","",null,null],[3,"LocalsSignatureView","","",null,null],[3,"FunctionDefinitionView","","",null,null],[3,"StructInstantiationView","","",null,null],[3,"FieldHandleView","","",null,null],[3,"FunctionInstantiationView","","",null,null],[3,"FieldInstantiationView","","",null,null],[3,"TypeSignatureView","","",null,null],[3,"SignatureView","","",null,null],[3,"SignatureTokenView","","",null,null],[8,"ViewInternals","","This is used to expose some view internals to checks and…",null,null],[16,"ModuleType","","",52,null],[16,"Inner","","",52,null],[10,"module","","",52,[[]]],[10,"as_inner","","",52,[[]]],[11,"new","","",53,[[]]],[11,"self_handle_idx","","",53,[[],["modulehandleindex",3]]],[11,"module_handles","","",53,[[]]],[11,"struct_handles","","",53,[[]]],[11,"function_handles","","",53,[[]]],[11,"field_handles","","",53,[[]]],[11,"struct_instantiations","","",53,[[]]],[11,"function_instantiations","","",53,[[]]],[11,"field_instantiations","","",53,[[]]],[11,"signatures","","",53,[[]]],[11,"structs","","",53,[[]]],[11,"functions","","",53,[[]]],[11,"function_definition","","",53,[[["identstr",3]],[["functiondefinitionview",3],["option",4]]]],[11,"struct_definition","","",53,[[["identstr",3]],[["option",4],["structdefinitionview",3]]]],[11,"function_acquired_resources","","",53,[[["functionhandle",3]],[["structdefinitionindex",3],["btreeset",3]]]],[11,"id","","",53,[[],["moduleid",3]]],[11,"new","","",54,[[["modulehandle",3]]]],[11,"module_id","","",54,[[],["moduleid",3]]],[11,"new","","",55,[[["structhandle",3]]]],[11,"handle","","",55,[[],["structhandle",3]]],[11,"is_nominal_resource","","",55,[[]]],[11,"type_parameters","","",55,[[],["vec",3]]],[11,"module_handle","","",55,[[],["modulehandle",3]]],[11,"name","","",55,[[],["identstr",3]]],[11,"module_id","","",55,[[],["moduleid",3]]],[11,"handle_idx","","Return the StructHandleIndex of this handle in the…",55,[[],["structhandleindex",3]]],[11,"new","","",56,[[["functionhandle",3]]]],[11,"module_handle","","",56,[[],["modulehandle",3]]],[11,"name","","",56,[[],["identstr",3]]],[11,"parameters","","",56,[[],["signature",3]]],[11,"return_","","",56,[[],["signature",3]]],[11,"return_tokens","","",56,[[]]],[11,"arg_tokens","","",56,[[]]],[11,"type_parameters","","",56,[[],["vec",3]]],[11,"return_count","","",56,[[]]],[11,"arg_count","","",56,[[]]],[11,"module_id","","",56,[[],["moduleid",3]]],[11,"new","","",57,[[["structdefinition",3]]]],[11,"is_nominal_resource","","",57,[[]]],[11,"is_native","","",57,[[]]],[11,"type_parameters","","",57,[[],["vec",3]]],[11,"fields","","",57,[[],["option",4]]],[11,"name","","",57,[[],["identstr",3]]],[11,"new","","",58,[[["fielddefinition",3]]]],[11,"name","","",58,[[],["identstr",3]]],[11,"type_signature","","",58,[[],["typesignatureview",3]]],[11,"signature_token","","",58,[[],["signaturetoken",4]]],[11,"signature_token_view","","",58,[[],["signaturetokenview",3]]],[11,"is_empty","","",59,[[]]],[11,"len","","",59,[[]]],[11,"token_at","","",59,[[["localindex",6]],["signaturetokenview",3]]],[11,"new","","",60,[[["functiondefinition",3]]]],[11,"is_public","","",60,[[]]],[11,"is_native","","",60,[[]]],[11,"locals_signature","","",60,[[],[["localssignatureview",3],["option",4]]]],[11,"name","","",60,[[],["identstr",3]]],[11,"parameters","","",60,[[],["signature",3]]],[11,"return_","","",60,[[],["signature",3]]],[11,"type_parameters","","",60,[[],["vec",3]]],[11,"return_tokens","","",60,[[]]],[11,"arg_tokens","","",60,[[]]],[11,"return_count","","",60,[[]]],[11,"arg_count","","",60,[[]]],[11,"code","","",60,[[],[["option",4],["codeunit",3]]]],[11,"new","","",61,[[["structdefinstantiation",3]]]],[11,"new","","",62,[[["fieldhandle",3]]]],[11,"new","","",63,[[["functioninstantiation",3]]]],[11,"new","","",64,[[["fieldinstantiation",3]]]],[11,"new","","",65,[[["typesignature",3]]]],[11,"token","","",65,[[],["signaturetokenview",3]]],[11,"new","","",66,[[["signature",3]]]],[11,"len","","",66,[[]]],[11,"is_empty","","",66,[[]]],[11,"tokens","","",66,[[]]],[11,"token_at","","",66,[[["localindex",6]],["signaturetokenview",3]]],[11,"new","","",67,[[["signaturetoken",4]]]],[11,"signature_token","","",67,[[],["signaturetoken",4]]],[11,"signature_token_kind","","",67,[[],["signaturetokenkind",4]]],[11,"is_reference","","",67,[[]]],[11,"is_mutable_reference","","",67,[[]]],[11,"variants","vm","",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","vm::check_bounds","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","vm::errors","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"clear","","",5,[[]]],[11,"initialize","","",5,[[]]],[11,"from","vm::file_format","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"clear","","",6,[[]]],[11,"initialize","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"clear","","",7,[[]]],[11,"initialize","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"clear","","",8,[[]]],[11,"initialize","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"clear","","",9,[[]]],[11,"initialize","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"clear","","",10,[[]]],[11,"initialize","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"to_string","","",11,[[],["string",3]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"clear","","",11,[[]]],[11,"initialize","","",11,[[]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"clear","","",12,[[]]],[11,"initialize","","",12,[[]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"clear","","",13,[[]]],[11,"initialize","","",13,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"clear","","",14,[[]]],[11,"initialize","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"clear","","",15,[[]]],[11,"initialize","","",15,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"clear","","",16,[[]]],[11,"initialize","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"vzip","","",17,[[]]],[11,"clear","","",17,[[]]],[11,"initialize","","",17,[[]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"vzip","","",18,[[]]],[11,"clear","","",18,[[]]],[11,"initialize","","",18,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"vzip","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"vzip","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"vzip","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"clear","","",28,[[]]],[11,"initialize","","",28,[[]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"vzip","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"vzip","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"clear","","",31,[[]]],[11,"initialize","","",31,[[]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"into_iter","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"clear","","",33,[[]]],[11,"initialize","","",33,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"vzip","","",34,[[]]],[11,"clear","","",34,[[]]],[11,"initialize","","",34,[[]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"vzip","","",69,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"vzip","","",35,[[]]],[11,"clear","","",35,[[]]],[11,"initialize","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"vzip","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"vzip","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"from","vm::file_format_common","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"clear","","",49,[[]]],[11,"initialize","","",49,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","vm::proptest_types","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","vm::views","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"as_module","vm::file_format","",41,[[],["compiledmodule",3]]],[11,"as_script","","",40,[[],["compiledscript",3]]],[11,"into_index","","",6,[[]]],[11,"into_index","","",7,[[]]],[11,"into_index","","",8,[[]]],[11,"into_index","","",9,[[]]],[11,"into_index","","",10,[[]]],[11,"into_index","","",11,[[]]],[11,"into_index","","",12,[[]]],[11,"into_index","","",13,[[]]],[11,"into_index","","",14,[[]]],[11,"into_index","","",15,[[]]],[11,"into_index","","",16,[[]]],[11,"into_index","","",17,[[]]],[11,"into_index","","",18,[[]]],[11,"module","vm::views","",53,[[]]],[11,"as_inner","","",53,[[]]],[11,"module","","",54,[[]]],[11,"as_inner","","",54,[[]]],[11,"module","","",55,[[]]],[11,"as_inner","","",55,[[]]],[11,"module","","",56,[[]]],[11,"as_inner","","",56,[[]]],[11,"module","","",57,[[]]],[11,"as_inner","","",57,[[]]],[11,"module","","",60,[[]]],[11,"as_inner","","",60,[[]]],[11,"module","","",58,[[]]],[11,"as_inner","","",58,[[]]],[11,"module","","",65,[[]]],[11,"as_inner","","",65,[[]]],[11,"module","","",66,[[]]],[11,"as_inner","","",66,[[]]],[11,"module","","",67,[[]]],[11,"as_inner","","",67,[[]]],[11,"from","vm::file_format_common","",49,[[["vec",3]]]],[11,"next","vm::file_format","",68,[[],["option",4]]],[11,"clone","","",6,[[],["modulehandleindex",3]]],[11,"clone","","",7,[[],["structhandleindex",3]]],[11,"clone","","",8,[[],["functionhandleindex",3]]],[11,"clone","","",9,[[],["fieldhandleindex",3]]],[11,"clone","","",10,[[],["structdefinstantiationindex",3]]],[11,"clone","","",11,[[],["functioninstantiationindex",3]]],[11,"clone","","",12,[[],["fieldinstantiationindex",3]]],[11,"clone","","",13,[[],["identifierindex",3]]],[11,"clone","","",14,[[],["addressidentifierindex",3]]],[11,"clone","","",15,[[],["constantpoolindex",3]]],[11,"clone","","",16,[[],["signatureindex",3]]],[11,"clone","","",17,[[],["structdefinitionindex",3]]],[11,"clone","","",18,[[],["functiondefinitionindex",3]]],[11,"clone","","",19,[[],["modulehandle",3]]],[11,"clone","","",20,[[],["structhandle",3]]],[11,"clone","","",21,[[],["functionhandle",3]]],[11,"clone","","",22,[[],["fieldhandle",3]]],[11,"clone","","",36,[[],["structfieldinformation",4]]],[11,"clone","","",23,[[],["structdefinstantiation",3]]],[11,"clone","","",24,[[],["functioninstantiation",3]]],[11,"clone","","",25,[[],["fieldinstantiation",3]]],[11,"clone","","",26,[[],["structdefinition",3]]],[11,"clone","","",27,[[],["fielddefinition",3]]],[11,"clone","","",28,[[],["functiondefinition",3]]],[11,"clone","","",29,[[],["typesignature",3]]],[11,"clone","","",30,[[],["functionsignature",3]]],[11,"clone","","",31,[[],["signature",3]]],[11,"clone","","",37,[[],["kind",4]]],[11,"clone","","",38,[[],["signaturetoken",4]]],[11,"clone","","",32,[[],["constant",3]]],[11,"clone","","",33,[[],["codeunit",3]]],[11,"clone","","",39,[[],["bytecode",4]]],[11,"clone","","",40,[[],["compiledscript",3]]],[11,"clone","","",34,[[],["compiledscriptmut",3]]],[11,"clone","","",41,[[],["compiledmodule",3]]],[11,"clone","","",35,[[],["compiledmodulemut",3]]],[11,"clone","vm::file_format_common","",42,[[],["tabletype",4]]],[11,"clone","","",43,[[],["serializedtype",4]]],[11,"clone","","",44,[[],["serializednominalresourceflag",4]]],[11,"clone","","",45,[[],["serializedkind",4]]],[11,"clone","","",46,[[],["serializednativestructflag",4]]],[11,"clone","","",47,[[],["opcodes",4]]],[11,"clone","vm::proptest_types","",51,[[],["compiledmodulestrategygen",3]]],[11,"clone","vm::views","",56,[[]]],[11,"clone","","",60,[[]]],[11,"clone","vm","",0,[[],["indexkind",4]]],[11,"clone","","",1,[[],["signaturetokenkind",4]]],[11,"default","vm::errors","",5,[[],["location",3]]],[11,"default","vm::file_format","",6,[[],["modulehandleindex",3]]],[11,"default","","",7,[[],["structhandleindex",3]]],[11,"default","","",8,[[],["functionhandleindex",3]]],[11,"default","","",9,[[],["fieldhandleindex",3]]],[11,"default","","",10,[[],["structdefinstantiationindex",3]]],[11,"default","","",11,[[],["functioninstantiationindex",3]]],[11,"default","","",12,[[],["fieldinstantiationindex",3]]],[11,"default","","",13,[[],["identifierindex",3]]],[11,"default","","",14,[[],["addressidentifierindex",3]]],[11,"default","","",15,[[],["constantpoolindex",3]]],[11,"default","","",16,[[],["signatureindex",3]]],[11,"default","","",17,[[],["structdefinitionindex",3]]],[11,"default","","",18,[[],["functiondefinitionindex",3]]],[11,"default","","",28,[[],["functiondefinition",3]]],[11,"default","","",31,[[],["signature",3]]],[11,"default","","",33,[[],["codeunit",3]]],[11,"default","","",34,[[],["compiledscriptmut",3]]],[11,"default","","",35,[[],["compiledmodulemut",3]]],[11,"default","vm::file_format_common","",49,[[],["binarydata",3]]],[11,"cmp","vm::file_format","",6,[[["modulehandleindex",3]],["ordering",4]]],[11,"cmp","","",7,[[["structhandleindex",3]],["ordering",4]]],[11,"cmp","","",8,[[["functionhandleindex",3]],["ordering",4]]],[11,"cmp","","",9,[[["fieldhandleindex",3]],["ordering",4]]],[11,"cmp","","",10,[[["structdefinstantiationindex",3]],["ordering",4]]],[11,"cmp","","",11,[[["functioninstantiationindex",3]],["ordering",4]]],[11,"cmp","","",12,[[["fieldinstantiationindex",3]],["ordering",4]]],[11,"cmp","","",13,[[["identifierindex",3]],["ordering",4]]],[11,"cmp","","",14,[[["addressidentifierindex",3]],["ordering",4]]],[11,"cmp","","",15,[[["constantpoolindex",3]],["ordering",4]]],[11,"cmp","","",16,[[["signatureindex",3]],["ordering",4]]],[11,"cmp","","",17,[[["structdefinitionindex",3]],["ordering",4]]],[11,"cmp","","",18,[[["functiondefinitionindex",3]],["ordering",4]]],[11,"cmp","","",19,[[["modulehandle",3]],["ordering",4]]],[11,"cmp","","",20,[[["structhandle",3]],["ordering",4]]],[11,"cmp","","",37,[[["kind",4]],["ordering",4]]],[11,"cmp","","",38,[[["signaturetoken",4]],["ordering",4]]],[11,"cmp","vm","",0,[[["indexkind",4]],["ordering",4]]],[11,"cmp","","",1,[[["signaturetokenkind",4]],["ordering",4]]],[11,"eq","vm::file_format","",6,[[["modulehandleindex",3]]]],[11,"ne","","",6,[[["modulehandleindex",3]]]],[11,"eq","","",7,[[["structhandleindex",3]]]],[11,"ne","","",7,[[["structhandleindex",3]]]],[11,"eq","","",8,[[["functionhandleindex",3]]]],[11,"ne","","",8,[[["functionhandleindex",3]]]],[11,"eq","","",9,[[["fieldhandleindex",3]]]],[11,"ne","","",9,[[["fieldhandleindex",3]]]],[11,"eq","","",10,[[["structdefinstantiationindex",3]]]],[11,"ne","","",10,[[["structdefinstantiationindex",3]]]],[11,"eq","","",11,[[["functioninstantiationindex",3]]]],[11,"ne","","",11,[[["functioninstantiationindex",3]]]],[11,"eq","","",12,[[["fieldinstantiationindex",3]]]],[11,"ne","","",12,[[["fieldinstantiationindex",3]]]],[11,"eq","","",13,[[["identifierindex",3]]]],[11,"ne","","",13,[[["identifierindex",3]]]],[11,"eq","","",14,[[["addressidentifierindex",3]]]],[11,"ne","","",14,[[["addressidentifierindex",3]]]],[11,"eq","","",15,[[["constantpoolindex",3]]]],[11,"ne","","",15,[[["constantpoolindex",3]]]],[11,"eq","","",16,[[["signatureindex",3]]]],[11,"ne","","",16,[[["signatureindex",3]]]],[11,"eq","","",17,[[["structdefinitionindex",3]]]],[11,"ne","","",17,[[["structdefinitionindex",3]]]],[11,"eq","","",18,[[["functiondefinitionindex",3]]]],[11,"ne","","",18,[[["functiondefinitionindex",3]]]],[11,"eq","","",19,[[["modulehandle",3]]]],[11,"ne","","",19,[[["modulehandle",3]]]],[11,"eq","","",20,[[["structhandle",3]]]],[11,"ne","","",20,[[["structhandle",3]]]],[11,"eq","","",21,[[["functionhandle",3]]]],[11,"ne","","",21,[[["functionhandle",3]]]],[11,"eq","","",22,[[["fieldhandle",3]]]],[11,"ne","","",22,[[["fieldhandle",3]]]],[11,"eq","","",36,[[["structfieldinformation",4]]]],[11,"ne","","",36,[[["structfieldinformation",4]]]],[11,"eq","","",23,[[["structdefinstantiation",3]]]],[11,"ne","","",23,[[["structdefinstantiation",3]]]],[11,"eq","","",24,[[["functioninstantiation",3]]]],[11,"ne","","",24,[[["functioninstantiation",3]]]],[11,"eq","","",25,[[["fieldinstantiation",3]]]],[11,"ne","","",25,[[["fieldinstantiation",3]]]],[11,"eq","","",26,[[["structdefinition",3]]]],[11,"ne","","",26,[[["structdefinition",3]]]],[11,"eq","","",27,[[["fielddefinition",3]]]],[11,"ne","","",27,[[["fielddefinition",3]]]],[11,"eq","","",28,[[["functiondefinition",3]]]],[11,"ne","","",28,[[["functiondefinition",3]]]],[11,"eq","","",29,[[["typesignature",3]]]],[11,"ne","","",29,[[["typesignature",3]]]],[11,"eq","","",30,[[["functionsignature",3]]]],[11,"ne","","",30,[[["functionsignature",3]]]],[11,"eq","","",31,[[["signature",3]]]],[11,"ne","","",31,[[["signature",3]]]],[11,"eq","","",37,[[["kind",4]]]],[11,"eq","","",38,[[["signaturetoken",4]]]],[11,"ne","","",38,[[["signaturetoken",4]]]],[11,"eq","","",32,[[["constant",3]]]],[11,"ne","","",32,[[["constant",3]]]],[11,"eq","","",33,[[["codeunit",3]]]],[11,"ne","","",33,[[["codeunit",3]]]],[11,"eq","","",39,[[["bytecode",4]]]],[11,"ne","","",39,[[["bytecode",4]]]],[11,"eq","","",40,[[["compiledscript",3]]]],[11,"ne","","",40,[[["compiledscript",3]]]],[11,"eq","","",34,[[["compiledscriptmut",3]]]],[11,"ne","","",34,[[["compiledscriptmut",3]]]],[11,"eq","","",41,[[["compiledmodule",3]]]],[11,"ne","","",41,[[["compiledmodule",3]]]],[11,"eq","","",35,[[["compiledmodulemut",3]]]],[11,"ne","","",35,[[["compiledmodulemut",3]]]],[11,"eq","vm::file_format_common","",42,[[["tabletype",4]]]],[11,"eq","vm","",0,[[["indexkind",4]]]],[11,"eq","","",1,[[["signaturetokenkind",4]]]],[11,"partial_cmp","vm::file_format","",6,[[["modulehandleindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["modulehandleindex",3]]]],[11,"le","","",6,[[["modulehandleindex",3]]]],[11,"gt","","",6,[[["modulehandleindex",3]]]],[11,"ge","","",6,[[["modulehandleindex",3]]]],[11,"partial_cmp","","",7,[[["structhandleindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["structhandleindex",3]]]],[11,"le","","",7,[[["structhandleindex",3]]]],[11,"gt","","",7,[[["structhandleindex",3]]]],[11,"ge","","",7,[[["structhandleindex",3]]]],[11,"partial_cmp","","",8,[[["functionhandleindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["functionhandleindex",3]]]],[11,"le","","",8,[[["functionhandleindex",3]]]],[11,"gt","","",8,[[["functionhandleindex",3]]]],[11,"ge","","",8,[[["functionhandleindex",3]]]],[11,"partial_cmp","","",9,[[["fieldhandleindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["fieldhandleindex",3]]]],[11,"le","","",9,[[["fieldhandleindex",3]]]],[11,"gt","","",9,[[["fieldhandleindex",3]]]],[11,"ge","","",9,[[["fieldhandleindex",3]]]],[11,"partial_cmp","","",10,[[["structdefinstantiationindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["structdefinstantiationindex",3]]]],[11,"le","","",10,[[["structdefinstantiationindex",3]]]],[11,"gt","","",10,[[["structdefinstantiationindex",3]]]],[11,"ge","","",10,[[["structdefinstantiationindex",3]]]],[11,"partial_cmp","","",11,[[["functioninstantiationindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",11,[[["functioninstantiationindex",3]]]],[11,"le","","",11,[[["functioninstantiationindex",3]]]],[11,"gt","","",11,[[["functioninstantiationindex",3]]]],[11,"ge","","",11,[[["functioninstantiationindex",3]]]],[11,"partial_cmp","","",12,[[["fieldinstantiationindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["fieldinstantiationindex",3]]]],[11,"le","","",12,[[["fieldinstantiationindex",3]]]],[11,"gt","","",12,[[["fieldinstantiationindex",3]]]],[11,"ge","","",12,[[["fieldinstantiationindex",3]]]],[11,"partial_cmp","","",13,[[["identifierindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["identifierindex",3]]]],[11,"le","","",13,[[["identifierindex",3]]]],[11,"gt","","",13,[[["identifierindex",3]]]],[11,"ge","","",13,[[["identifierindex",3]]]],[11,"partial_cmp","","",14,[[["addressidentifierindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",14,[[["addressidentifierindex",3]]]],[11,"le","","",14,[[["addressidentifierindex",3]]]],[11,"gt","","",14,[[["addressidentifierindex",3]]]],[11,"ge","","",14,[[["addressidentifierindex",3]]]],[11,"partial_cmp","","",15,[[["constantpoolindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["constantpoolindex",3]]]],[11,"le","","",15,[[["constantpoolindex",3]]]],[11,"gt","","",15,[[["constantpoolindex",3]]]],[11,"ge","","",15,[[["constantpoolindex",3]]]],[11,"partial_cmp","","",16,[[["signatureindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",16,[[["signatureindex",3]]]],[11,"le","","",16,[[["signatureindex",3]]]],[11,"gt","","",16,[[["signatureindex",3]]]],[11,"ge","","",16,[[["signatureindex",3]]]],[11,"partial_cmp","","",17,[[["structdefinitionindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",17,[[["structdefinitionindex",3]]]],[11,"le","","",17,[[["structdefinitionindex",3]]]],[11,"gt","","",17,[[["structdefinitionindex",3]]]],[11,"ge","","",17,[[["structdefinitionindex",3]]]],[11,"partial_cmp","","",18,[[["functiondefinitionindex",3]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["functiondefinitionindex",3]]]],[11,"le","","",18,[[["functiondefinitionindex",3]]]],[11,"gt","","",18,[[["functiondefinitionindex",3]]]],[11,"ge","","",18,[[["functiondefinitionindex",3]]]],[11,"partial_cmp","","",19,[[["modulehandle",3]],[["option",4],["ordering",4]]]],[11,"lt","","",19,[[["modulehandle",3]]]],[11,"le","","",19,[[["modulehandle",3]]]],[11,"gt","","",19,[[["modulehandle",3]]]],[11,"ge","","",19,[[["modulehandle",3]]]],[11,"partial_cmp","","",20,[[["structhandle",3]],[["option",4],["ordering",4]]]],[11,"lt","","",20,[[["structhandle",3]]]],[11,"le","","",20,[[["structhandle",3]]]],[11,"gt","","",20,[[["structhandle",3]]]],[11,"ge","","",20,[[["structhandle",3]]]],[11,"partial_cmp","","",37,[[["kind",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",38,[[["signaturetoken",4]],[["option",4],["ordering",4]]]],[11,"lt","","",38,[[["signaturetoken",4]]]],[11,"le","","",38,[[["signaturetoken",4]]]],[11,"gt","","",38,[[["signaturetoken",4]]]],[11,"ge","","",38,[[["signaturetoken",4]]]],[11,"partial_cmp","vm","",0,[[["indexkind",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["signaturetokenkind",4]],[["option",4],["ordering",4]]]],[11,"fmt","vm::errors","",5,[[["formatter",3]],["result",6]]],[11,"fmt","vm::file_format","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",29,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","vm::file_format_common","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","vm::proptest_types","",51,[[["formatter",3]],["result",6]]],[11,"fmt","vm","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","vm::file_format","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","vm","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","vm::file_format","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",18,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","","",23,[[]]],[11,"hash","","",24,[[]]],[11,"hash","","",25,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",30,[[]]],[11,"hash","","",31,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",38,[[]]],[11,"hash","","",32,[[]]],[11,"hash","","",39,[[]]],[11,"hash","vm::file_format_common","",42,[[]]],[11,"hash","vm","",0,[[]]],[11,"arbitrary_with","vm::file_format","",6,[[]]],[11,"arbitrary_with","","",7,[[]]],[11,"arbitrary_with","","",8,[[]]],[11,"arbitrary_with","","",9,[[]]],[11,"arbitrary_with","","",10,[[]]],[11,"arbitrary_with","","",11,[[]]],[11,"arbitrary_with","","",12,[[]]],[11,"arbitrary_with","","",13,[[]]],[11,"arbitrary_with","","",14,[[]]],[11,"arbitrary_with","","",15,[[]]],[11,"arbitrary_with","","",16,[[]]],[11,"arbitrary_with","","",17,[[]]],[11,"arbitrary_with","","",18,[[]]],[11,"arbitrary_with","","",19,[[]]],[11,"arbitrary_with","","",20,[[]]],[11,"arbitrary_with","","",21,[[]]],[11,"arbitrary_with","","",22,[[]]],[11,"arbitrary_with","","",36,[[]]],[11,"arbitrary_with","","",23,[[]]],[11,"arbitrary_with","","",24,[[]]],[11,"arbitrary_with","","",25,[[]]],[11,"arbitrary_with","","",26,[[]]],[11,"arbitrary_with","","",27,[[]]],[11,"arbitrary_with","","",28,[[]]],[11,"arbitrary_with","","",29,[[]]],[11,"arbitrary_with","","",30,[[]]],[11,"arbitrary_with","","",31,[[]]],[11,"arbitrary_with","","",37,[[]]],[11,"arbitrary_with","","",38,[[]]],[11,"arbitrary_with","","",33,[[]]],[11,"arbitrary_with","","",39,[[]]],[11,"arbitrary_with","","",34,[[]]],[11,"arbitrary_with","","",35,[[]]],[11,"serialize_constant","","",32,[[["movevalue",4],["movetypelayout",4]],["option",4]]],[11,"deserialize_constant","","",32,[[],[["option",4],["movevalue",4]]]],[11,"deserialize","","Deserializes a &[u8] slice into a `CompiledScript` instance.",40,[[],["binaryloaderresult",6]]],[11,"deserialize","","Deserialize a &[u8] slice into a `CompiledModule` instance.",41,[[],["binaryloaderresult",6]]],[11,"deserialize_no_check_bounds","","",35,[[],["binaryloaderresult",6]]]],"p":[[4,"IndexKind"],[4,"SignatureTokenKind"],[8,"ModuleAccess"],[8,"ScriptAccess"],[3,"BoundsChecker"],[3,"Location"],[3,"ModuleHandleIndex"],[3,"StructHandleIndex"],[3,"FunctionHandleIndex"],[3,"FieldHandleIndex"],[3,"StructDefInstantiationIndex"],[3,"FunctionInstantiationIndex"],[3,"FieldInstantiationIndex"],[3,"IdentifierIndex"],[3,"AddressIdentifierIndex"],[3,"ConstantPoolIndex"],[3,"SignatureIndex"],[3,"StructDefinitionIndex"],[3,"FunctionDefinitionIndex"],[3,"ModuleHandle"],[3,"StructHandle"],[3,"FunctionHandle"],[3,"FieldHandle"],[3,"StructDefInstantiation"],[3,"FunctionInstantiation"],[3,"FieldInstantiation"],[3,"StructDefinition"],[3,"FieldDefinition"],[3,"FunctionDefinition"],[3,"TypeSignature"],[3,"FunctionSignature"],[3,"Signature"],[3,"Constant"],[3,"CodeUnit"],[3,"CompiledScriptMut"],[3,"CompiledModuleMut"],[4,"StructFieldInformation"],[4,"Kind"],[4,"SignatureToken"],[4,"Bytecode"],[3,"CompiledScript"],[3,"CompiledModule"],[4,"TableType"],[4,"SerializedType"],[4,"SerializedNominalResourceFlag"],[4,"SerializedKind"],[4,"SerializedNativeStructFlag"],[4,"Opcodes"],[4,"BinaryConstants"],[3,"BinaryData"],[8,"ModuleIndex"],[3,"CompiledModuleStrategyGen"],[8,"ViewInternals"],[3,"ModuleView"],[3,"ModuleHandleView"],[3,"StructHandleView"],[3,"FunctionHandleView"],[3,"StructDefinitionView"],[3,"FieldDefinitionView"],[3,"LocalsSignatureView"],[3,"FunctionDefinitionView"],[3,"StructInstantiationView"],[3,"FieldHandleView"],[3,"FunctionInstantiationView"],[3,"FieldInstantiationView"],[3,"TypeSignatureView"],[3,"SignatureView"],[3,"SignatureTokenView"],[3,"SignatureTokenPreorderTraversalIter"],[3,"ScriptConversionInfo"]]},\
"vm_genesis":{"doc":"","i":[[5,"encode_genesis_transaction_with_validator","vm_genesis","",null,[[["option",4],["ed25519publickey",3],["vmpublishingoption",4]],["transaction",4]]],[5,"encode_genesis_change_set","","",null,[[["ed25519publickey",3],["vmpublishingoption",4]]]],[5,"encode_genesis_transaction","","",null,[[["ed25519publickey",3],["vmpublishingoption",4]],["transaction",4]]],[5,"generate_genesis_change_set_for_testing","","Generate an artificial genesis `ChangeSet` for testing",null,[[["stdliboptions",4]],["changeset",3]]],[5,"generate_genesis_type_mapping","","Generate an artificial genesis `ChangeSet` for testing",null,[[],[["vec",3],["fatstructtype",3],["btreemap",3]]]],[5,"validator_registrations","","",null,[[],[["vec",3],["validatorregistration",6]]]],[6,"ValidatorRegistration","","",null,null],[7,"GENESIS_KEYPAIR","","",null,null]],"p":[]},\
"vm_validator":{"doc":"","i":[[0,"mocks","vm_validator","",null,null],[0,"mock_vm_validator","vm_validator::mocks","",null,null],[3,"MockVMValidator","vm_validator::mocks::mock_vm_validator","",null,null],[0,"vm_validator","vm_validator","",null,null],[3,"VMValidator","vm_validator::vm_validator","",null,null],[5,"get_account_sequence_number","","returns account\'s sequence number from storage",null,[[["dbreader",8],["accountaddress",3]],["result",6]]],[8,"TransactionValidation","","",null,null],[16,"ValidationInstance","","",0,null],[10,"validate_transaction","","Validate a txn from client",0,[[["signedtransaction",3]],[["result",6],["vmvalidatorresult",3]]]],[10,"restart","","Restart the transaction validation instance",0,[[["onchainconfigpayload",3]],["result",6]]],[11,"new","","",1,[[["arc",3],["dbreader",8]]]],[11,"from","vm_validator::mocks::mock_vm_validator","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","vm_validator::vm_validator","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"validate_transaction","vm_validator::mocks::mock_vm_validator","",2,[[["signedtransaction",3]],[["result",6],["vmvalidatorresult",3]]]],[11,"restart","","",2,[[["onchainconfigpayload",3]],["result",6]]],[11,"validate_transaction","vm_validator::vm_validator","",1,[[["signedtransaction",3]],[["result",6],["vmvalidatorresult",3]]]],[11,"restart","","",1,[[["onchainconfigpayload",3]],["result",6]]],[11,"clone","vm_validator::mocks::mock_vm_validator","",2,[[],["mockvmvalidator",3]]],[11,"clone","vm_validator::vm_validator","",1,[[],["vmvalidator",3]]],[11,"validate_transaction","vm_validator::mocks::mock_vm_validator","",2,[[["signedtransaction",3],["stateview",8]],["vmvalidatorresult",3]]]],"p":[[8,"TransactionValidation"],[3,"VMValidator"],[3,"MockVMValidator"]]},\
"workspace_builder":{"doc":"","i":[[5,"workspace_root","workspace_builder","",null,[[],["pathbuf",3]]],[5,"get_bin","","",null,[[["asref",8]],["pathbuf",3]]]],"p":[]},\
"x_core":{"doc":"","i":[[3,"DebugIgnore","x_core","A newtype wrapper that causes this field to be ignored…",null,null],[12,"0","","",0,null],[3,"WorkspaceSubset","","Information collected about a subset of members of a…",null,null],[3,"XCoreContext","","Core context shared across all of x.",null,null],[4,"SystemError","","A system error that happened while running a lint.",null,null],[13,"Exec","","",1,null],[12,"cmd","x_core::SystemError","",2,null],[12,"status","","",2,null],[13,"Guppy","x_core","",1,null],[13,"Io","","",1,null],[12,"context","x_core::SystemError","",3,null],[12,"err","","",3,null],[13,"Serde","x_core","",1,null],[12,"context","x_core::SystemError","",4,null],[12,"err","","",4,null],[4,"WorkspaceStatus","x_core","The status of a particular package ID in a…",null,null],[13,"RootMember","","This package ID is a root member of the workspace subset.",5,null],[13,"Dependency","","This package ID is a dependency of the workspace subset,…",5,null],[13,"Absent","","This package ID is not a dependency of the workspace subset.",5,null],[11,"io","","",1,[[["error",3]]]],[11,"de","","",1,[[]]],[11,"ser","","",1,[[]]],[11,"new","","Creates a new subset by simulating a Cargo build on the…",6,[[["packagegraph",3],["cargooptions",3]],[["result",6],["error",4]]]],[11,"default_members","","Creates a new subset of default members by reading the…",6,[[["packagegraph",3],["path",3]],["result",6]]],[11,"status_of","","Returns the status of the given package ID in the subset.",6,[[["packageid",3]],["workspacestatus",4]]],[11,"root_members","","Returns a list of root packages in this subset, ignoring…",6,[[]]],[11,"build_set","","Returns the set of packages and features that would be…",6,[[],["cargoset",3]]],[11,"unified_set","","Returns the set of packages and features that would be…",6,[[],["featureset",3]]],[6,"Result","","Type alias for the return type for `run` methods.",null,null],[11,"new","","Creates a new XCoreContext.",7,[[["path",3]]]],[11,"project_root","","Returns the project root for this workspace.",7,[[],["path",3]]],[11,"package_graph","","Returns the package graph for this workspace.",7,[[],[["result",6],["packagegraph",3]]]],[11,"default_members","","Returns information about the default members for this…",7,[[],[["workspacesubset",3],["result",6]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"from","","",1,[[["error",4]]]],[11,"clone","","",0,[[],["debugignore",3]]],[11,"clone","","",5,[[],["workspacestatus",4]]],[11,"cmp","","",0,[[["debugignore",3]],["ordering",4]]],[11,"eq","","",0,[[["debugignore",3]]]],[11,"ne","","",0,[[["debugignore",3]]]],[11,"eq","","",5,[[["workspacestatus",4]]]],[11,"partial_cmp","","",0,[[["debugignore",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["debugignore",3]]]],[11,"le","","",0,[[["debugignore",3]]]],[11,"gt","","",0,[[["debugignore",3]]]],[11,"ge","","",0,[[["debugignore",3]]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",5,[[]]],[11,"source","","",1,[[],[["option",4],["error",8]]]]],"p":[[3,"DebugIgnore"],[4,"SystemError"],[13,"Exec"],[13,"Io"],[13,"Serde"],[4,"WorkspaceStatus"],[3,"WorkspaceSubset"],[3,"XCoreContext"]]},\
"x_lint":{"doc":"Lint engine.","i":[[3,"LintEngineConfig","x_lint","Configuration for the lint engine.",null,null],[3,"LintEngine","","Executor for linters.",null,null],[3,"LintResults","","",null,null],[12,"skipped","","",0,null],[12,"messages","","",0,null],[3,"LintFormatter","","A lint formatter.",null,null],[3,"LintMessage","","A message raised by a lint.",null,null],[3,"LintSource","","Message source for lints.",null,null],[4,"RunStatus","","The run status of a lint.",null,null],[13,"Executed","","This lint run was successful, with messages possibly…",1,null],[13,"Skipped","","This lint was skipped.",1,null],[4,"SkipReason","","The reason for why this lint was skipped.",null,null],[13,"NonUtf8","","This file was not valid UTF-8.",2,null],[13,"UnsupportedExtension","","This extension was unsupported.",2,null],[13,"UnsupportedFile","","The given file was unsupported by this linter.",2,null],[13,"UnsupportedPackage","","The given package was unsupported by this linter.",2,null],[4,"LintLevel","","",null,null],[13,"Error","","",3,null],[13,"Warning","","",3,null],[4,"LintKind","","",null,null],[13,"Project","","",4,null],[13,"Package","","",4,null],[12,"name","x_lint::LintKind","",5,null],[12,"workspace_path","","",5,null],[13,"File","x_lint","",4,null],[13,"Content","","",4,null],[0,"content","","",null,null],[3,"ContentContext","x_lint::content","",null,null],[8,"ContentLinter","","Represents a linter that checks file contents.",null,null],[11,"pre_run","","Pre-run step -- avoids loading the contents if possible.",6,[[["filecontext",3]],[["runstatus",4],["result",6]]]],[10,"run","","Executes the lint against the given content context.",6,[[["lintformatter",3],["contentcontext",3]],[["runstatus",4],["result",6]]]],[18,"BINARY_FILE_CUTOFF","","The number of bytes that will be searched for null bytes…",7,null],[11,"file_ctx","","Returns the file context.",7,[[],["filecontext",3]]],[11,"content","","Returns the content, or `None` if this is a non-UTF-8 file.",7,[[],["option",4]]],[11,"content_bytes","","Returns the raw bytes for the content.",7,[[]]],[11,"is_binary","","Returns true if this is a binary file.",7,[[]]],[0,"file","x_lint","",null,null],[3,"FileContext","x_lint::file","Contains information for a single file.",null,null],[11,"new","","",8,[[["projectcontext",3],["path",3]]]],[11,"project_ctx","","Returns the project context.",8,[[],["projectcontext",3]]],[11,"file_path","","Returns the path of this file, relative to the root of the…",8,[[],["path",3]]],[11,"extension","","Returns the extension of the file. Returns `None` if…",8,[[],["option",4]]],[0,"package","x_lint","",null,null],[3,"PackageContext","x_lint::package","Lint context for an individual package.",null,null],[8,"PackageLinter","","Represents a linter that runs once per package.",null,null],[10,"run","","",9,[[["packagecontext",3],["lintformatter",3]],[["runstatus",4],["result",6]]]],[11,"new","","",10,[[["projectcontext",3],["packagegraph",3],["path",3],["packagemetadata",3]],["result",6]]],[11,"project_ctx","","Returns the project context.",10,[[],["projectcontext",3]]],[11,"package_graph","","Returns the package graph.",10,[[],["packagegraph",3]]],[11,"workspace_path","","Returns the relative path for this package in the workspace.",10,[[],["path",3]]],[11,"metadata","","Returns the metadata for this package.",10,[[],["packagemetadata",3]]],[11,"is_default_member","","Returns true if this is a default member of this workspace.",10,[[]]],[0,"project","x_lint","",null,null],[3,"ProjectContext","x_lint::project","Overall linter context for a project.",null,null],[8,"ProjectLinter","","Represents a linter that checks some property for the…",null,null],[10,"run","","Executes the lint against the given project context.",11,[[["projectcontext",3],["lintformatter",3]],[["runstatus",4],["result",6]]]],[11,"new","","",12,[[["xcorecontext",3]]]],[11,"project_root","","Returns the project root.",12,[[],["path",3]]],[11,"package_graph","","Returns the package graph, computing it for the first time…",12,[[],[["packagegraph",3],["result",6]]]],[11,"full_path","","Returns the absolute path from the project root.",12,[[],["pathbuf",3]]],[11,"default_members","","Returns information about the default workspace members.",12,[[],[["result",6],["workspacesubset",3]]]],[11,"new","x_lint","",13,[[["xcorecontext",3]]]],[11,"with_project_linters","","",13,[[]]],[11,"with_package_linters","","",13,[[]]],[11,"with_content_linters","","",13,[[]]],[11,"fail_fast","","",13,[[]]],[11,"build","","",13,[[],["lintengine",3]]],[11,"new","","",14,[[["lintengineconfig",3]]]],[11,"run","","",14,[[],[["result",6],["lintresults",3]]]],[0,"prelude","","",null,null],[6,"Result","x_lint::prelude","Type alias for the return type for `run` methods.",null,null],[4,"SystemError","","A system error that happened while running a lint.",null,null],[13,"Exec","","",15,null],[12,"cmd","x_lint::prelude::SystemError","",16,null],[12,"status","","",16,null],[13,"Guppy","x_lint::prelude","",15,null],[13,"Io","","",15,null],[12,"context","x_lint::prelude::SystemError","",17,null],[12,"err","","",17,null],[13,"Serde","x_lint::prelude","",15,null],[12,"context","x_lint::prelude::SystemError","",18,null],[12,"err","","",18,null],[8,"Linter","x_lint","Represents a linter.",null,null],[10,"name","","Returns the name of the linter.",19,[[]]],[11,"new","","",20,[[["vec",3],["lintsource",3]]]],[11,"write","","Writes a new lint message to this formatter.",20,[[["lintlevel",4]]]],[11,"write_kind","","Writes a new lint message to this formatter with a custom…",20,[[["lintlevel",4],["lintkind",4]]]],[11,"new","","",21,[[["lintlevel",4]]]],[11,"level","","",21,[[],["lintlevel",4]]],[11,"message","","",21,[[]]],[11,"name","","",22,[[]]],[11,"kind","","",22,[[],["lintkind",4]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"equivalent","","",4,[[]]],[11,"from","x_lint::content","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","x_lint::file","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","x_lint::package","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","x_lint::project","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","x_lint::prelude","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"fmt","","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"source","","",15,[[],[["option",4],["error",8]]]],[11,"fmt","","",15,[[["formatter",3]],[["error",3],["result",4]]]],[11,"from","","",15,[[["error",4]],["systemerror",4]]],[11,"clone","x_lint::file","",8,[[],["filecontext",3]]],[11,"clone","x_lint::package","",10,[[],["packagecontext",3]]],[11,"clone","x_lint","",13,[[],["lintengineconfig",3]]],[11,"clone","","",1,[[],["runstatus",4]]],[11,"clone","","",2,[[],["skipreason",4]]],[11,"clone","","",3,[[],["lintlevel",4]]],[11,"clone","","",22,[[],["lintsource",3]]],[11,"clone","","",4,[[],["lintkind",4]]],[11,"eq","","",1,[[["runstatus",4]]]],[11,"ne","","",1,[[["runstatus",4]]]],[11,"eq","","",2,[[["skipreason",4]]]],[11,"ne","","",2,[[["skipreason",4]]]],[11,"eq","","",3,[[["lintlevel",4]]]],[11,"eq","","",4,[[["lintkind",4]]]],[11,"ne","","",4,[[["lintkind",4]]]],[11,"fmt","x_lint::content","",7,[[["formatter",3]],["result",6]]],[11,"fmt","x_lint::file","",8,[[["formatter",3]],["result",6]]],[11,"fmt","x_lint::package","",10,[[["formatter",3]],["result",6]]],[11,"fmt","x_lint::project","",12,[[["formatter",3]],["result",6]]],[11,"fmt","x_lint","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"io","x_lint::prelude","",15,[[["error",3]],["systemerror",4]]],[11,"de","","",15,[[],["systemerror",4]]],[11,"ser","","",15,[[],["systemerror",4]]]],"p":[[3,"LintResults"],[4,"RunStatus"],[4,"SkipReason"],[4,"LintLevel"],[4,"LintKind"],[13,"Package"],[8,"ContentLinter"],[3,"ContentContext"],[3,"FileContext"],[8,"PackageLinter"],[3,"PackageContext"],[8,"ProjectLinter"],[3,"ProjectContext"],[3,"LintEngineConfig"],[3,"LintEngine"],[4,"SystemError"],[13,"Exec"],[13,"Io"],[13,"Serde"],[8,"Linter"],[3,"LintFormatter"],[3,"LintMessage"],[3,"LintSource"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);